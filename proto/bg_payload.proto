syntax = "proto3";

import "bg_gorm_db.proto";
import "bg_core.proto";

package bg.service.v1;
option go_package = "./pb";

// import "mwitkow/go-proto-validators/validator.proto";
import "google/protobuf/timestamp.proto";
// import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
// import "google/protobuf/struct.proto";

enum TaskStatus {
    AllStatus = 0;
    Pending = 1;
    Draft = 2;
    Returned = 3;
    Approved = 4;
    Rejected = 5;
    DeleteRequest = 6;
    Deleted = 7;
}

enum TaskStep {
    AllStep = 0;
    Maker = 1;
    Checker = 2;
    Signer = 3;
    Releaser = 4;
}

message Task {
    uint64 taskID = 1;
    string type = 2;
    string status = 3;
    string step = 4;
    uint64 featureID = 5;
    uint64 lastApprovedByID = 6;
    uint64 lastRejectedByID = 7;
    string lastApprovedByName = 8;
    string lastRejectedByName = 9;
    string createdByName = 10;
    string updatedByName = 11;
    string reasons = 12;
    string comment = 13;
    google.protobuf.Timestamp createdAt = 101;
    google.protobuf.Timestamp updatedAt = 102;
}

message Company {
    uint64 companyID = 1;
    uint64 holdingID = 2;
    string groupName = 3;
    string companyName = 4;
    string holdingCompanyName = 5;
    google.protobuf.Timestamp createdAt = 101;
    google.protobuf.Timestamp updatedAt = 102;
}

message TransactionTask {
    Task task = 1;
    Company company = 2;
    repeated TransactionTaskData data = 3;
}

message TransactionTaskData {
    ThirdParty thirdParty = 1;
    repeated Transaction transaction = 2;
}

message ApiPaginationResponse {
    uint64 page = 1;
    uint64 limit = 2;
    uint64 totalRecord = 3;
    uint32 totalPage = 4;
}

message HealthCheckRequest {}
message HealthCheckResponse {
    string message = 1;
}

message GenerateThirdPartyRequest {
    uint64 page = 1;
    uint64 limit = 2;
}
message GenerateThirdPartyResponse {
    bool error = 1;
    uint32 code = 2;
    string message = 3;
    ApiPaginationResponse pagination = 4;
}

message GetApplicantNameData {
    string name = 1;
    uint64 total = 2;
}
message GetApplicantNameRequest {}
message GetApplicantNameResponse {
    bool error = 1;
    uint32 code = 2;
    string message = 3;
    repeated GetApplicantNameData data = 4;
}

message GetThirdPartyRequest {}
message GetThirdPartyResponse {
    bool error = 1;
    uint32 code = 2;
    string message = 3;
    repeated ThirdParty data = 4;
}

message GetTransactionTaskRequest {
    TaskStatus status = 1;
    TaskStep step = 2;
    int32 limit = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		description: "Limit data per page. Default value '-1' for disable limit",
	}];
    int32 page = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		description: "Page number to get data. Default value '-1' for disable page",
	}];
    string sort = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		description: "Order data by column name",
	}];
    Direction dir = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		description: "Sort DirectionEnum should be ASC or DESC",
	}];
    string filter = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		description: "Create 'AND' queries \n format: [key:value,key:value] \n example: filter=task_id:1,type:Announcement => Where task_id = 1 AND type = 'Announcement' \n Expressions: \n - 'key:value' => 'key = value' \n - 'key:%%value' => 'key LIKE %value%' \n - 'key:%!value' => 'key ILIKE %value%' \n - 'key:>=value' => 'key >= value' \n - 'key:<=value' => 'key <= value' \n - 'key1:>=value1,key2:<=value2' => 'key1 >= value1 AND key2 <= value2' BETWEEN EXAMPLE \n - 'key1.nestedKey1:value' => 'key1->>nestedKey1 = value'",
	}];
    string query = 8 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		description: "Create 'OR' queries \n format: [key1,key2,key3:value] \n example: query=name,type:Announcement => Where name = 'Announcement' OR type = 'Announcement' \n Expressions: \n - 'key:value' => 'key = value' \n - 'key:%%value' => 'key LIKE %value%' \n - 'key:%!value' => 'key ILIKE %value%' \n - 'key1.nestedKey1:value' => 'key1->>nestedKey1 = value'",
	}];
}
message GetTransactionTaskResponse {
    bool error = 1;
    uint32 code = 2;
    string message = 3;
    repeated TransactionTask data = 4;
    PaginationResponse pagination = 5;
}

message GetTransactionTaskDetailRequest {
    uint64 taskID = 1;
}
message GetTransactionTaskDetailResponse {
    bool error = 1;
    uint32 code = 2;
    string message = 3;
    TransactionTask data = 4;
}

message CreateTransactionTaskThirdParty {
    uint64 thirdPartyID = 1;
    bool isAllowBeneficiary = 2;
}
message CreateTransactionTaskRequest {
    uint64 taskID = 1;
    uint64 companyID = 2;
    repeated CreateTransactionTaskThirdParty thirdParty = 3;
    bool isDraft = 4;
}
message CreateTransactionTaskResponse {
    bool error = 1;
    uint32 code = 2;
    string message = 3;
    Task data = 4;
}

message GetTransactionRequest {
    Transaction transaction = 1;
    int32 limit = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		description: "Limit data per page. Default value '-1' for disable limit",
	}];
    int32 page = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		description: "Page number to get data. Default value '-1' for disable page",
	}];
    string sort = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		description: "Order data by column name",
	}];
    Direction dir = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		description: "Sort DirectionEnum should be ASC or DESC",
	}];
    string filter = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		description: "Create 'AND' queries \n format: [key:value,key:value] \n example: filter=task_id:1,type:Announcement => Where task_id = 1 AND type = 'Announcement' \n Expressions: \n - 'key:value' => 'key = value' \n - 'key:%%value' => 'key LIKE %value%' \n - 'key:%!value' => 'key ILIKE %value%' \n - 'key:>=value' => 'key >= value' \n - 'key:<=value' => 'key <= value' \n - 'key1:>=value1,key2:<=value2' => 'key1 >= value1 AND key2 <= value2' BETWEEN EXAMPLE \n - 'key1.nestedKey1:value' => 'key1->>nestedKey1 = value'",
	}];
    string query = 7 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
		description: "Create 'OR' queries \n format: [key1,key2,key3:value] \n example: query=name,type:Announcement => Where name = 'Announcement' OR type = 'Announcement' \n Expressions: \n - 'key:value' => 'key = value' \n - 'key:%%value' => 'key LIKE %value%' \n - 'key:%!value' => 'key ILIKE %value%' \n - 'key1.nestedKey1:value' => 'key1->>nestedKey1 = value'",
	}];
}
message GetTransactionResponse {
    bool error = 1;
    uint32 code = 2;
    string message = 3;
    repeated Transaction data = 4;
    PaginationResponse pagination = 5;
}

message GetTransactionDetailRequest {
    uint64 transactionID = 1;
}
message GetTransactionDetailResponse {
    bool error = 1;
    uint32 code = 2;
    string message = 3;
    Transaction data = 4;
}

message CreateTransactionRequest {
    repeated Transaction data = 1;
}
message CreateTransactionResponse {
    bool error = 1;
    uint32 code = 2;
    string message = 3;
    repeated Transaction data = 4;
}

message UpdateTransactionRequest {
    uint64 transactionID = 1;
    Transaction data = 2;
}
message UpdateTransactionResponse {
    bool error = 1;
    uint32 code = 2;
    string message = 3;
    Transaction data = 4;
}
