syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/httpbody.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// import "bg_core.proto";
import "bg_payload.proto";

package bg.service.v1;
option go_package = "./pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    security_definitions: {
        security: {
                key: "bearer"
                value: {
                type: TYPE_API_KEY
                in: IN_HEADER
                name: "Authorization"
                description: "Authentication token, prefixed by Bearer: Bearer <token>"
            }
        }
    }
    security: {
        security_requirement: {
            key: "bearer"
        }
    }
};

service ApiService {

    rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse) {
        option (google.api.http) = {
            get: "/api/bg/health"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {} // Disable security key
            summary: "Health Check"
            description: "This API for check health server"
        };
    };

    rpc GetCurrency(GetCurrencyRequest) returns (GetCurrencyResponse) {
        option (google.api.http) = {
            get: "/api/bg/currency"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Currency"]
            summary: "Currency"
            description: "This API for Currency list"
        };
    };

    rpc GetBeneficiaryName(GetBeneficiaryNameRequest) returns (GetBeneficiaryNameResponse) {
        option (google.api.http) = {
            get: "/api/bg/beneficiary-name"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Beneficiary"]
            summary: "Beneficiary"
            description: "This API for Beneficiary list"
        };
    };

    rpc GetApplicantName(GetApplicantNameRequest) returns (GetApplicantNameResponse) {
        option (google.api.http) = {
            get: "/api/bg/applicant-name"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Applicant"]
            summary: "Applicant"
            description: "This API for Applicant list"
        };
    };

    rpc GetThirdParty(GetThirdPartyRequest) returns (GetThirdPartyResponse) {
        option (google.api.http) = {
            get: "/api/bg/third-party"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Third Party"]
            summary: "Third Party"
            description: "This API for Third Party list"
        };
    };

    rpc GetCustomerLimit(GetCustomerLimitRequest) returns (GetCustomerLimitResponse) {
        option (google.api.http) = {
            get: "/api/bg/customer-limit"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Customer Limit"]
            summary: "Customer Limit"
            description: "This API for Customer Limit"
        };
    }

    rpc GetTaskMappingFile(GetTaskMappingFileRequest) returns (google.api.HttpBody) {
        option (google.api.http) = {
            get: "/api/bg/mapping/task/template/{fileFormat}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["BG Mapping"]
            summary: "BG Mapping Export"
            description: "This API for BG Mapping export"
        };
    };

    rpc GetTaskMapping(GetTaskMappingRequest) returns (GetTaskMappingResponse) {
        option (google.api.http) = {
            get: "/api/bg/mapping/task"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["BG Mapping"]
            summary: "BG Mapping List"
            description: "This API for BG Mapping list"
        };
    };

    rpc GetTaskMappingDetail(GetTaskMappingDetailRequest) returns (GetTaskMappingDetailResponse) {
        option (google.api.http) = {
            get: "/api/bg/mapping/task/{taskID}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["BG Mapping"]
            summary: "BG Mapping Detail"
            description: "This API for BG Mapping detail"
        };
    };
    
    rpc CreateTaskMapping(CreateTaskMappingRequest) returns (CreateTaskMappingResponse) {
        option (google.api.http) = {
            post: "/api/bg/mapping/task"
            body: "*"
            additional_bindings: [
				{
					post: "/api/bg/mapping/task/{taskID}"
					body: "*"
				}
			]
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["BG Mapping"]
            summary: "Update Or Create Mapping"
            description: "This API for update or create BG Mapping"
        };
    };

    rpc GetTaskMappingDigitalFile(GetTaskMappingDigitalFileRequest) returns (google.api.HttpBody) {
        option (google.api.http) = {
            get: "/api/bg/mapping-digital/task/template/{fileFormat}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["BG Mapping Digital"]
            summary: "BG Mapping Digital Export"
            description: "This API for BG Mapping Digital export"
        };
    };

    rpc GetTaskMappingDigital(GetTaskMappingDigitalRequest) returns (GetTaskMappingDigitalResponse) {
        option (google.api.http) = {
            get: "/api/bg/mapping-digital/task"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["BG Mapping Digital"]
            summary: "BG Mapping Digital List"
            description: "This API for BG Mapping Digital list"
        };
    };

    rpc GetTaskMappingDigitalDetail(GetTaskMappingDigitalDetailRequest) returns (GetTaskMappingDigitalDetailResponse) {
        option (google.api.http) = {
            get: "/api/bg/mapping-digital/task/{taskID}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["BG Mapping Digital"]
            summary: "BG Mapping Digital Detail"
            description: "This API for BG Mapping Digital detail"
        };
    };

    rpc CreateTaskMappingDigital(CreateTaskMappingDigitalRequest) returns (CreateTaskMappingDigitalResponse) {
        option (google.api.http) = {
            post: "/api/bg/mapping-digital/task"
            body: "*"
            additional_bindings: [
				{
					post: "/api/bg/mapping-digital/task/{taskID}"
					body: "*"
				}
			]
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["BG Mapping Digital"]
            summary: "Update Or Create BG Mapping Digital"
            description: "This API for update or create BG Mapping Digital"
        };
    };

    rpc GetTransactionAttachment(GetTransactionAttachmentRequest) returns (GetTransactionAttachmentResponse) {
        option (google.api.http) = {
            get: "/api/bg/transaction/attachment/{referenceNo}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: {} // Disable security key
            tags: ["Transaction"]
            summary: "Transaction Attachment"
            description: "This API for transaction attachment"
        };
    };

    rpc GetTransactionFile(GetTransactionFileRequest) returns (google.api.HttpBody) {
        option (google.api.http) = {
            get: "/api/bg/transaction/data/template/{fileFormat}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Transaction"]
            summary: "Transaction Export"
            description: "This API for Transaction export"
        };
    };

    rpc GetTransaction(GetTransactionRequest) returns (GetTransactionResponse) {
        option (google.api.http) = {
            get: "/api/bg/transaction/data"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Transaction"]
            summary: "Transaction List"
            description: "This API for transaction list"
        };
    };

    rpc GetTransactionDetail(GetTransactionDetailRequest) returns (GetTransactionDetailResponse) {
        option (google.api.http) = {
            get: "/api/bg/transaction/data/{referenceNo}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Transaction"]
            summary: "Transaction Detail"
            description: "This API for transaction detail"
        };
    };

    rpc CreateTransaction(CreateTransactionRequest) returns (CreateTransactionResponse) {
        option (google.api.http) = {
            post: "/api/bg/transaction/data/create"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Transaction"]
            summary: "Create Transaction"
            description: "This API for create transaction"
        };
    };

    rpc DeleteTransaction(DeleteTransactionRequest) returns (DeleteTransactionResponse) {
        option (google.api.http) = {
            post: "/api/bg/transaction/data/delete"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["Transaction"]
            summary: "Delete Transaction"
            description: "This API for delete transaction"
        };
    };

    rpc GetTaskIssuing(GetTaskIssuingRequest) returns (GetTaskIssuingResponse) {
        option (google.api.http) = {
            get: "/api/bg/issuing/task"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["BG Issuing"]
            summary: "BG Issuing List"
            description: "This API for BG Issuing list"
        };
    };

    rpc GetTaskIssuingDetail(GetTaskIssuingDetailRequest) returns (GetTaskIssuingDetailResponse) {
        option (google.api.http) = {
            get: "/api/bg/issuing/task/{taskID}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["BG Issuing"]
            summary: "BG Issuing Detail"
            description: "This API for BG Issuing detail"
        };
    };

    rpc GetTaskIssuingFile(GetTaskIssuingFileRequest) returns (google.api.HttpBody) {
        option (google.api.http) = {
            get: "/api/bg/issuing/task/template/{fileFormat}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["BG Issuing"]
            summary: "BG Issuing Export"
            description: "This API for BG Issuing export"
        };
    };

    rpc CreateTaskIssuing(CreateTaskIssuingRequest) returns (CreateTaskIssuingResponse) {
        option (google.api.http) = {
            post: "/api/bg/issuing/task"
            body: "*"
            additional_bindings: [
				{
					post: "/api/bg/issuing/task/{taskID}"
					body: "*"
				}
			]
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["BG Issuing"]
            summary: "Update Or Create BG Issuing"
            description: "This API for update or create BG Issuing"
        };
    };

    rpc TaskAction (TaskActionRequest) returns (TaskActionResponse) {
        option (google.api.http) = {
            post: "/api/bg/issuing/task/action/{taskID}"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["BG Issuing"]
            summary: "Set action task";
            description: "set task action. Action: 'approve', 'rework', 'reject', 'delete'"
        };
    }

    rpc CreateIssuing(CreateIssuingRequest) returns (CreateIssuingResponse) {
    }

    rpc CheckIssuingStatus(CheckIssuingRequest) returns (CheckIssuingResponse) {
        option (google.api.http) = {
            get: "/api/bg/issuing/check"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["BG Issuing"]
            summary: "Check BG Issuing Status"
            description: "This API for check BG Issuing status which has been sent to Portal"
        };
    }

    rpc FileUpload(FileUploadRequest) returns (FileUploadResponse) {
        option (google.api.http) = {
            post: "/api/bg/issuing/upload"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            tags: ["BG Issuing"]
            summary: "Upload File"
            description: "This API for file upload"
        };
    }
}
