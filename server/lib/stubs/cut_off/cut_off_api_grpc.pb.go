// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: cut_off_api.proto

package pb

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CutOffServiceClient is the client API for CutOffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CutOffServiceClient interface {
	CreateCutOffTask(ctx context.Context, in *CreateCutOffTaskRequest, opts ...grpc.CallOption) (*CreateCutOffTaskResponse, error)
	ListCutOffTask(ctx context.Context, in *ListCutOffTaskRequest, opts ...grpc.CallOption) (*ListCutOffTaskResponse, error)
	CutOffTaskAction(ctx context.Context, in *CutOffTaskActionRequest, opts ...grpc.CallOption) (*CutOffTaskActionResponse, error)
	DownloadListCutOffTask(ctx context.Context, in *FileListCutOffTaskRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	GetCutoffTaskByID(ctx context.Context, in *GetCutOffTaskByIDRequest, opts ...grpc.CallOption) (*GetCutOffTaskByIDResponse, error)
	ListCutOffData(ctx context.Context, in *ListCutOffDataRequest, opts ...grpc.CallOption) (*ListCutOffDataResponse, error)
	ListCutOffDataTemplate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListCutOffDataTemplateResponse, error)
	GetCutOffDataByID(ctx context.Context, in *GetCutOffDataByIDRequest, opts ...grpc.CallOption) (*GetCutOffDataByIDResponse, error)
	GetCutOffSchedule(ctx context.Context, in *ListCutOffDataScheduleRequest, opts ...grpc.CallOption) (*ListCutOffScheduledDataResponse, error)
	GetCutOffScheduleByTime(ctx context.Context, in *ListCutOffDataScheduleRequest, opts ...grpc.CallOption) (*ListCutOffScheduledDataByTimeResponse, error)
	GetCutOffScheduleToday(ctx context.Context, in *ListCutOffDataScheduleTodayRequest, opts ...grpc.CallOption) (*ListCutOffDataScheduleTodayRespons, error)
	GetMyTasksCreatedBy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ArrayString, error)
	GetMyTasksApprovedBy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ArrayString, error)
	GetProductAvaible(ctx context.Context, in *ListProductUsedReq, opts ...grpc.CallOption) (*ListProductUsedRes, error)
	SaveCutOffData(ctx context.Context, in *SaveCutOffDataRequest, opts ...grpc.CallOption) (*SaveCutOffDataResponse, error)
	DeleteCutOffData(ctx context.Context, in *SaveCutOffDataRequest, opts ...grpc.CallOption) (*SaveCutOffDataResponse, error)
	GetHolidayTask(ctx context.Context, in *GetHolidayTaskRequest, opts ...grpc.CallOption) (*GetHolidayTaskResponse, error)
	GetHolidayTaskByID(ctx context.Context, in *GetHolidayTaskByIDRequest, opts ...grpc.CallOption) (*GetHolidayTaskByIDResponse, error)
	CreateHolidayTask(ctx context.Context, in *CreateHolidayTaskRequest, opts ...grpc.CallOption) (*CreateHolidayTaskResponse, error)
	GetHoliday(ctx context.Context, in *GetHolidayRequest, opts ...grpc.CallOption) (*GetHolidayResponse, error)
	GetHolidayHTTP(ctx context.Context, in *GetHolidayRequest, opts ...grpc.CallOption) (*GetHolidayResponse, error)
	GetHolidayByFeatureID(ctx context.Context, in *GetHolidayByFeatureIDRequest, opts ...grpc.CallOption) (*GetHolidayByFeatureIDResponse, error)
	HolidayTaskAction(ctx context.Context, in *HolidayTaskActionRequest, opts ...grpc.CallOption) (*HolidayTaskActionResponse, error)
	GetHolidaySchedules(ctx context.Context, in *GetHolidaySchedulesRequest, opts ...grpc.CallOption) (*GetHolidaySchedulesResponse, error)
	DownloadListHolidayTask(ctx context.Context, in *DownloadListHolidayTaskRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	GetMyHolidayTasksCreatedBy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ArrayString, error)
	GetMyHolidayTasksApprovedBy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ArrayString, error)
	CreateHoliday(ctx context.Context, in *CreateHolidayRequest, opts ...grpc.CallOption) (*CreateHolidayResponse, error)
	DeleteHoliday(ctx context.Context, in *DeleteHolidayRequest, opts ...grpc.CallOption) (*Empty, error)
	GetAvailableTime(ctx context.Context, in *GetAvailableTimeRequest, opts ...grpc.CallOption) (*GetAvailableTimeResponse, error)
}

type cutOffServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCutOffServiceClient(cc grpc.ClientConnInterface) CutOffServiceClient {
	return &cutOffServiceClient{cc}
}

func (c *cutOffServiceClient) CreateCutOffTask(ctx context.Context, in *CreateCutOffTaskRequest, opts ...grpc.CallOption) (*CreateCutOffTaskResponse, error) {
	out := new(CreateCutOffTaskResponse)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/CreateCutOffTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) ListCutOffTask(ctx context.Context, in *ListCutOffTaskRequest, opts ...grpc.CallOption) (*ListCutOffTaskResponse, error) {
	out := new(ListCutOffTaskResponse)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/ListCutOffTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) CutOffTaskAction(ctx context.Context, in *CutOffTaskActionRequest, opts ...grpc.CallOption) (*CutOffTaskActionResponse, error) {
	out := new(CutOffTaskActionResponse)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/CutOffTaskAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) DownloadListCutOffTask(ctx context.Context, in *FileListCutOffTaskRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/DownloadListCutOffTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) GetCutoffTaskByID(ctx context.Context, in *GetCutOffTaskByIDRequest, opts ...grpc.CallOption) (*GetCutOffTaskByIDResponse, error) {
	out := new(GetCutOffTaskByIDResponse)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/GetCutoffTaskByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) ListCutOffData(ctx context.Context, in *ListCutOffDataRequest, opts ...grpc.CallOption) (*ListCutOffDataResponse, error) {
	out := new(ListCutOffDataResponse)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/ListCutOffData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) ListCutOffDataTemplate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListCutOffDataTemplateResponse, error) {
	out := new(ListCutOffDataTemplateResponse)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/ListCutOffDataTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) GetCutOffDataByID(ctx context.Context, in *GetCutOffDataByIDRequest, opts ...grpc.CallOption) (*GetCutOffDataByIDResponse, error) {
	out := new(GetCutOffDataByIDResponse)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/GetCutOffDataByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) GetCutOffSchedule(ctx context.Context, in *ListCutOffDataScheduleRequest, opts ...grpc.CallOption) (*ListCutOffScheduledDataResponse, error) {
	out := new(ListCutOffScheduledDataResponse)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/GetCutOffSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) GetCutOffScheduleByTime(ctx context.Context, in *ListCutOffDataScheduleRequest, opts ...grpc.CallOption) (*ListCutOffScheduledDataByTimeResponse, error) {
	out := new(ListCutOffScheduledDataByTimeResponse)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/GetCutOffScheduleByTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) GetCutOffScheduleToday(ctx context.Context, in *ListCutOffDataScheduleTodayRequest, opts ...grpc.CallOption) (*ListCutOffDataScheduleTodayRespons, error) {
	out := new(ListCutOffDataScheduleTodayRespons)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/GetCutOffScheduleToday", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) GetMyTasksCreatedBy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ArrayString, error) {
	out := new(ArrayString)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/GetMyTasksCreatedBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) GetMyTasksApprovedBy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ArrayString, error) {
	out := new(ArrayString)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/GetMyTasksApprovedBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) GetProductAvaible(ctx context.Context, in *ListProductUsedReq, opts ...grpc.CallOption) (*ListProductUsedRes, error) {
	out := new(ListProductUsedRes)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/GetProductAvaible", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) SaveCutOffData(ctx context.Context, in *SaveCutOffDataRequest, opts ...grpc.CallOption) (*SaveCutOffDataResponse, error) {
	out := new(SaveCutOffDataResponse)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/SaveCutOffData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) DeleteCutOffData(ctx context.Context, in *SaveCutOffDataRequest, opts ...grpc.CallOption) (*SaveCutOffDataResponse, error) {
	out := new(SaveCutOffDataResponse)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/DeleteCutOffData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) GetHolidayTask(ctx context.Context, in *GetHolidayTaskRequest, opts ...grpc.CallOption) (*GetHolidayTaskResponse, error) {
	out := new(GetHolidayTaskResponse)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/GetHolidayTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) GetHolidayTaskByID(ctx context.Context, in *GetHolidayTaskByIDRequest, opts ...grpc.CallOption) (*GetHolidayTaskByIDResponse, error) {
	out := new(GetHolidayTaskByIDResponse)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/GetHolidayTaskByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) CreateHolidayTask(ctx context.Context, in *CreateHolidayTaskRequest, opts ...grpc.CallOption) (*CreateHolidayTaskResponse, error) {
	out := new(CreateHolidayTaskResponse)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/CreateHolidayTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) GetHoliday(ctx context.Context, in *GetHolidayRequest, opts ...grpc.CallOption) (*GetHolidayResponse, error) {
	out := new(GetHolidayResponse)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/GetHoliday", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) GetHolidayHTTP(ctx context.Context, in *GetHolidayRequest, opts ...grpc.CallOption) (*GetHolidayResponse, error) {
	out := new(GetHolidayResponse)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/GetHolidayHTTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) GetHolidayByFeatureID(ctx context.Context, in *GetHolidayByFeatureIDRequest, opts ...grpc.CallOption) (*GetHolidayByFeatureIDResponse, error) {
	out := new(GetHolidayByFeatureIDResponse)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/GetHolidayByFeatureID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) HolidayTaskAction(ctx context.Context, in *HolidayTaskActionRequest, opts ...grpc.CallOption) (*HolidayTaskActionResponse, error) {
	out := new(HolidayTaskActionResponse)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/HolidayTaskAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) GetHolidaySchedules(ctx context.Context, in *GetHolidaySchedulesRequest, opts ...grpc.CallOption) (*GetHolidaySchedulesResponse, error) {
	out := new(GetHolidaySchedulesResponse)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/GetHolidaySchedules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) DownloadListHolidayTask(ctx context.Context, in *DownloadListHolidayTaskRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/DownloadListHolidayTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) GetMyHolidayTasksCreatedBy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ArrayString, error) {
	out := new(ArrayString)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/GetMyHolidayTasksCreatedBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) GetMyHolidayTasksApprovedBy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ArrayString, error) {
	out := new(ArrayString)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/GetMyHolidayTasksApprovedBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) CreateHoliday(ctx context.Context, in *CreateHolidayRequest, opts ...grpc.CallOption) (*CreateHolidayResponse, error) {
	out := new(CreateHolidayResponse)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/CreateHoliday", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) DeleteHoliday(ctx context.Context, in *DeleteHolidayRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/DeleteHoliday", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cutOffServiceClient) GetAvailableTime(ctx context.Context, in *GetAvailableTimeRequest, opts ...grpc.CallOption) (*GetAvailableTimeResponse, error) {
	out := new(GetAvailableTimeResponse)
	err := c.cc.Invoke(ctx, "/cut.off.service.v1.CutOffService/GetAvailableTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CutOffServiceServer is the server API for CutOffService service.
// All implementations must embed UnimplementedCutOffServiceServer
// for forward compatibility
type CutOffServiceServer interface {
	CreateCutOffTask(context.Context, *CreateCutOffTaskRequest) (*CreateCutOffTaskResponse, error)
	ListCutOffTask(context.Context, *ListCutOffTaskRequest) (*ListCutOffTaskResponse, error)
	CutOffTaskAction(context.Context, *CutOffTaskActionRequest) (*CutOffTaskActionResponse, error)
	DownloadListCutOffTask(context.Context, *FileListCutOffTaskRequest) (*httpbody.HttpBody, error)
	GetCutoffTaskByID(context.Context, *GetCutOffTaskByIDRequest) (*GetCutOffTaskByIDResponse, error)
	ListCutOffData(context.Context, *ListCutOffDataRequest) (*ListCutOffDataResponse, error)
	ListCutOffDataTemplate(context.Context, *Empty) (*ListCutOffDataTemplateResponse, error)
	GetCutOffDataByID(context.Context, *GetCutOffDataByIDRequest) (*GetCutOffDataByIDResponse, error)
	GetCutOffSchedule(context.Context, *ListCutOffDataScheduleRequest) (*ListCutOffScheduledDataResponse, error)
	GetCutOffScheduleByTime(context.Context, *ListCutOffDataScheduleRequest) (*ListCutOffScheduledDataByTimeResponse, error)
	GetCutOffScheduleToday(context.Context, *ListCutOffDataScheduleTodayRequest) (*ListCutOffDataScheduleTodayRespons, error)
	GetMyTasksCreatedBy(context.Context, *Empty) (*ArrayString, error)
	GetMyTasksApprovedBy(context.Context, *Empty) (*ArrayString, error)
	GetProductAvaible(context.Context, *ListProductUsedReq) (*ListProductUsedRes, error)
	SaveCutOffData(context.Context, *SaveCutOffDataRequest) (*SaveCutOffDataResponse, error)
	DeleteCutOffData(context.Context, *SaveCutOffDataRequest) (*SaveCutOffDataResponse, error)
	GetHolidayTask(context.Context, *GetHolidayTaskRequest) (*GetHolidayTaskResponse, error)
	GetHolidayTaskByID(context.Context, *GetHolidayTaskByIDRequest) (*GetHolidayTaskByIDResponse, error)
	CreateHolidayTask(context.Context, *CreateHolidayTaskRequest) (*CreateHolidayTaskResponse, error)
	GetHoliday(context.Context, *GetHolidayRequest) (*GetHolidayResponse, error)
	GetHolidayHTTP(context.Context, *GetHolidayRequest) (*GetHolidayResponse, error)
	GetHolidayByFeatureID(context.Context, *GetHolidayByFeatureIDRequest) (*GetHolidayByFeatureIDResponse, error)
	HolidayTaskAction(context.Context, *HolidayTaskActionRequest) (*HolidayTaskActionResponse, error)
	GetHolidaySchedules(context.Context, *GetHolidaySchedulesRequest) (*GetHolidaySchedulesResponse, error)
	DownloadListHolidayTask(context.Context, *DownloadListHolidayTaskRequest) (*httpbody.HttpBody, error)
	GetMyHolidayTasksCreatedBy(context.Context, *Empty) (*ArrayString, error)
	GetMyHolidayTasksApprovedBy(context.Context, *Empty) (*ArrayString, error)
	CreateHoliday(context.Context, *CreateHolidayRequest) (*CreateHolidayResponse, error)
	DeleteHoliday(context.Context, *DeleteHolidayRequest) (*Empty, error)
	GetAvailableTime(context.Context, *GetAvailableTimeRequest) (*GetAvailableTimeResponse, error)
	mustEmbedUnimplementedCutOffServiceServer()
}

// UnimplementedCutOffServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCutOffServiceServer struct {
}

func (UnimplementedCutOffServiceServer) CreateCutOffTask(context.Context, *CreateCutOffTaskRequest) (*CreateCutOffTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCutOffTask not implemented")
}
func (UnimplementedCutOffServiceServer) ListCutOffTask(context.Context, *ListCutOffTaskRequest) (*ListCutOffTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCutOffTask not implemented")
}
func (UnimplementedCutOffServiceServer) CutOffTaskAction(context.Context, *CutOffTaskActionRequest) (*CutOffTaskActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CutOffTaskAction not implemented")
}
func (UnimplementedCutOffServiceServer) DownloadListCutOffTask(context.Context, *FileListCutOffTaskRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadListCutOffTask not implemented")
}
func (UnimplementedCutOffServiceServer) GetCutoffTaskByID(context.Context, *GetCutOffTaskByIDRequest) (*GetCutOffTaskByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCutoffTaskByID not implemented")
}
func (UnimplementedCutOffServiceServer) ListCutOffData(context.Context, *ListCutOffDataRequest) (*ListCutOffDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCutOffData not implemented")
}
func (UnimplementedCutOffServiceServer) ListCutOffDataTemplate(context.Context, *Empty) (*ListCutOffDataTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCutOffDataTemplate not implemented")
}
func (UnimplementedCutOffServiceServer) GetCutOffDataByID(context.Context, *GetCutOffDataByIDRequest) (*GetCutOffDataByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCutOffDataByID not implemented")
}
func (UnimplementedCutOffServiceServer) GetCutOffSchedule(context.Context, *ListCutOffDataScheduleRequest) (*ListCutOffScheduledDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCutOffSchedule not implemented")
}
func (UnimplementedCutOffServiceServer) GetCutOffScheduleByTime(context.Context, *ListCutOffDataScheduleRequest) (*ListCutOffScheduledDataByTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCutOffScheduleByTime not implemented")
}
func (UnimplementedCutOffServiceServer) GetCutOffScheduleToday(context.Context, *ListCutOffDataScheduleTodayRequest) (*ListCutOffDataScheduleTodayRespons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCutOffScheduleToday not implemented")
}
func (UnimplementedCutOffServiceServer) GetMyTasksCreatedBy(context.Context, *Empty) (*ArrayString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyTasksCreatedBy not implemented")
}
func (UnimplementedCutOffServiceServer) GetMyTasksApprovedBy(context.Context, *Empty) (*ArrayString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyTasksApprovedBy not implemented")
}
func (UnimplementedCutOffServiceServer) GetProductAvaible(context.Context, *ListProductUsedReq) (*ListProductUsedRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductAvaible not implemented")
}
func (UnimplementedCutOffServiceServer) SaveCutOffData(context.Context, *SaveCutOffDataRequest) (*SaveCutOffDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCutOffData not implemented")
}
func (UnimplementedCutOffServiceServer) DeleteCutOffData(context.Context, *SaveCutOffDataRequest) (*SaveCutOffDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCutOffData not implemented")
}
func (UnimplementedCutOffServiceServer) GetHolidayTask(context.Context, *GetHolidayTaskRequest) (*GetHolidayTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHolidayTask not implemented")
}
func (UnimplementedCutOffServiceServer) GetHolidayTaskByID(context.Context, *GetHolidayTaskByIDRequest) (*GetHolidayTaskByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHolidayTaskByID not implemented")
}
func (UnimplementedCutOffServiceServer) CreateHolidayTask(context.Context, *CreateHolidayTaskRequest) (*CreateHolidayTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHolidayTask not implemented")
}
func (UnimplementedCutOffServiceServer) GetHoliday(context.Context, *GetHolidayRequest) (*GetHolidayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHoliday not implemented")
}
func (UnimplementedCutOffServiceServer) GetHolidayHTTP(context.Context, *GetHolidayRequest) (*GetHolidayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHolidayHTTP not implemented")
}
func (UnimplementedCutOffServiceServer) GetHolidayByFeatureID(context.Context, *GetHolidayByFeatureIDRequest) (*GetHolidayByFeatureIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHolidayByFeatureID not implemented")
}
func (UnimplementedCutOffServiceServer) HolidayTaskAction(context.Context, *HolidayTaskActionRequest) (*HolidayTaskActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HolidayTaskAction not implemented")
}
func (UnimplementedCutOffServiceServer) GetHolidaySchedules(context.Context, *GetHolidaySchedulesRequest) (*GetHolidaySchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHolidaySchedules not implemented")
}
func (UnimplementedCutOffServiceServer) DownloadListHolidayTask(context.Context, *DownloadListHolidayTaskRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadListHolidayTask not implemented")
}
func (UnimplementedCutOffServiceServer) GetMyHolidayTasksCreatedBy(context.Context, *Empty) (*ArrayString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyHolidayTasksCreatedBy not implemented")
}
func (UnimplementedCutOffServiceServer) GetMyHolidayTasksApprovedBy(context.Context, *Empty) (*ArrayString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyHolidayTasksApprovedBy not implemented")
}
func (UnimplementedCutOffServiceServer) CreateHoliday(context.Context, *CreateHolidayRequest) (*CreateHolidayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHoliday not implemented")
}
func (UnimplementedCutOffServiceServer) DeleteHoliday(context.Context, *DeleteHolidayRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHoliday not implemented")
}
func (UnimplementedCutOffServiceServer) GetAvailableTime(context.Context, *GetAvailableTimeRequest) (*GetAvailableTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableTime not implemented")
}
func (UnimplementedCutOffServiceServer) mustEmbedUnimplementedCutOffServiceServer() {}

// UnsafeCutOffServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CutOffServiceServer will
// result in compilation errors.
type UnsafeCutOffServiceServer interface {
	mustEmbedUnimplementedCutOffServiceServer()
}

func RegisterCutOffServiceServer(s grpc.ServiceRegistrar, srv CutOffServiceServer) {
	s.RegisterService(&CutOffService_ServiceDesc, srv)
}

func _CutOffService_CreateCutOffTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCutOffTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).CreateCutOffTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/CreateCutOffTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).CreateCutOffTask(ctx, req.(*CreateCutOffTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_ListCutOffTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCutOffTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).ListCutOffTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/ListCutOffTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).ListCutOffTask(ctx, req.(*ListCutOffTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_CutOffTaskAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CutOffTaskActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).CutOffTaskAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/CutOffTaskAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).CutOffTaskAction(ctx, req.(*CutOffTaskActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_DownloadListCutOffTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileListCutOffTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).DownloadListCutOffTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/DownloadListCutOffTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).DownloadListCutOffTask(ctx, req.(*FileListCutOffTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_GetCutoffTaskByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCutOffTaskByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).GetCutoffTaskByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/GetCutoffTaskByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).GetCutoffTaskByID(ctx, req.(*GetCutOffTaskByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_ListCutOffData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCutOffDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).ListCutOffData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/ListCutOffData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).ListCutOffData(ctx, req.(*ListCutOffDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_ListCutOffDataTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).ListCutOffDataTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/ListCutOffDataTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).ListCutOffDataTemplate(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_GetCutOffDataByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCutOffDataByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).GetCutOffDataByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/GetCutOffDataByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).GetCutOffDataByID(ctx, req.(*GetCutOffDataByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_GetCutOffSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCutOffDataScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).GetCutOffSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/GetCutOffSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).GetCutOffSchedule(ctx, req.(*ListCutOffDataScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_GetCutOffScheduleByTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCutOffDataScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).GetCutOffScheduleByTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/GetCutOffScheduleByTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).GetCutOffScheduleByTime(ctx, req.(*ListCutOffDataScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_GetCutOffScheduleToday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCutOffDataScheduleTodayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).GetCutOffScheduleToday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/GetCutOffScheduleToday",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).GetCutOffScheduleToday(ctx, req.(*ListCutOffDataScheduleTodayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_GetMyTasksCreatedBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).GetMyTasksCreatedBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/GetMyTasksCreatedBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).GetMyTasksCreatedBy(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_GetMyTasksApprovedBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).GetMyTasksApprovedBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/GetMyTasksApprovedBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).GetMyTasksApprovedBy(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_GetProductAvaible_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductUsedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).GetProductAvaible(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/GetProductAvaible",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).GetProductAvaible(ctx, req.(*ListProductUsedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_SaveCutOffData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCutOffDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).SaveCutOffData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/SaveCutOffData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).SaveCutOffData(ctx, req.(*SaveCutOffDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_DeleteCutOffData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCutOffDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).DeleteCutOffData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/DeleteCutOffData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).DeleteCutOffData(ctx, req.(*SaveCutOffDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_GetHolidayTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHolidayTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).GetHolidayTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/GetHolidayTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).GetHolidayTask(ctx, req.(*GetHolidayTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_GetHolidayTaskByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHolidayTaskByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).GetHolidayTaskByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/GetHolidayTaskByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).GetHolidayTaskByID(ctx, req.(*GetHolidayTaskByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_CreateHolidayTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHolidayTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).CreateHolidayTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/CreateHolidayTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).CreateHolidayTask(ctx, req.(*CreateHolidayTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_GetHoliday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHolidayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).GetHoliday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/GetHoliday",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).GetHoliday(ctx, req.(*GetHolidayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_GetHolidayHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHolidayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).GetHolidayHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/GetHolidayHTTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).GetHolidayHTTP(ctx, req.(*GetHolidayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_GetHolidayByFeatureID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHolidayByFeatureIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).GetHolidayByFeatureID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/GetHolidayByFeatureID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).GetHolidayByFeatureID(ctx, req.(*GetHolidayByFeatureIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_HolidayTaskAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HolidayTaskActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).HolidayTaskAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/HolidayTaskAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).HolidayTaskAction(ctx, req.(*HolidayTaskActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_GetHolidaySchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHolidaySchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).GetHolidaySchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/GetHolidaySchedules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).GetHolidaySchedules(ctx, req.(*GetHolidaySchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_DownloadListHolidayTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadListHolidayTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).DownloadListHolidayTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/DownloadListHolidayTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).DownloadListHolidayTask(ctx, req.(*DownloadListHolidayTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_GetMyHolidayTasksCreatedBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).GetMyHolidayTasksCreatedBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/GetMyHolidayTasksCreatedBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).GetMyHolidayTasksCreatedBy(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_GetMyHolidayTasksApprovedBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).GetMyHolidayTasksApprovedBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/GetMyHolidayTasksApprovedBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).GetMyHolidayTasksApprovedBy(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_CreateHoliday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHolidayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).CreateHoliday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/CreateHoliday",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).CreateHoliday(ctx, req.(*CreateHolidayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_DeleteHoliday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHolidayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).DeleteHoliday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/DeleteHoliday",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).DeleteHoliday(ctx, req.(*DeleteHolidayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CutOffService_GetAvailableTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CutOffServiceServer).GetAvailableTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cut.off.service.v1.CutOffService/GetAvailableTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CutOffServiceServer).GetAvailableTime(ctx, req.(*GetAvailableTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CutOffService_ServiceDesc is the grpc.ServiceDesc for CutOffService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CutOffService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cut.off.service.v1.CutOffService",
	HandlerType: (*CutOffServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCutOffTask",
			Handler:    _CutOffService_CreateCutOffTask_Handler,
		},
		{
			MethodName: "ListCutOffTask",
			Handler:    _CutOffService_ListCutOffTask_Handler,
		},
		{
			MethodName: "CutOffTaskAction",
			Handler:    _CutOffService_CutOffTaskAction_Handler,
		},
		{
			MethodName: "DownloadListCutOffTask",
			Handler:    _CutOffService_DownloadListCutOffTask_Handler,
		},
		{
			MethodName: "GetCutoffTaskByID",
			Handler:    _CutOffService_GetCutoffTaskByID_Handler,
		},
		{
			MethodName: "ListCutOffData",
			Handler:    _CutOffService_ListCutOffData_Handler,
		},
		{
			MethodName: "ListCutOffDataTemplate",
			Handler:    _CutOffService_ListCutOffDataTemplate_Handler,
		},
		{
			MethodName: "GetCutOffDataByID",
			Handler:    _CutOffService_GetCutOffDataByID_Handler,
		},
		{
			MethodName: "GetCutOffSchedule",
			Handler:    _CutOffService_GetCutOffSchedule_Handler,
		},
		{
			MethodName: "GetCutOffScheduleByTime",
			Handler:    _CutOffService_GetCutOffScheduleByTime_Handler,
		},
		{
			MethodName: "GetCutOffScheduleToday",
			Handler:    _CutOffService_GetCutOffScheduleToday_Handler,
		},
		{
			MethodName: "GetMyTasksCreatedBy",
			Handler:    _CutOffService_GetMyTasksCreatedBy_Handler,
		},
		{
			MethodName: "GetMyTasksApprovedBy",
			Handler:    _CutOffService_GetMyTasksApprovedBy_Handler,
		},
		{
			MethodName: "GetProductAvaible",
			Handler:    _CutOffService_GetProductAvaible_Handler,
		},
		{
			MethodName: "SaveCutOffData",
			Handler:    _CutOffService_SaveCutOffData_Handler,
		},
		{
			MethodName: "DeleteCutOffData",
			Handler:    _CutOffService_DeleteCutOffData_Handler,
		},
		{
			MethodName: "GetHolidayTask",
			Handler:    _CutOffService_GetHolidayTask_Handler,
		},
		{
			MethodName: "GetHolidayTaskByID",
			Handler:    _CutOffService_GetHolidayTaskByID_Handler,
		},
		{
			MethodName: "CreateHolidayTask",
			Handler:    _CutOffService_CreateHolidayTask_Handler,
		},
		{
			MethodName: "GetHoliday",
			Handler:    _CutOffService_GetHoliday_Handler,
		},
		{
			MethodName: "GetHolidayHTTP",
			Handler:    _CutOffService_GetHolidayHTTP_Handler,
		},
		{
			MethodName: "GetHolidayByFeatureID",
			Handler:    _CutOffService_GetHolidayByFeatureID_Handler,
		},
		{
			MethodName: "HolidayTaskAction",
			Handler:    _CutOffService_HolidayTaskAction_Handler,
		},
		{
			MethodName: "GetHolidaySchedules",
			Handler:    _CutOffService_GetHolidaySchedules_Handler,
		},
		{
			MethodName: "DownloadListHolidayTask",
			Handler:    _CutOffService_DownloadListHolidayTask_Handler,
		},
		{
			MethodName: "GetMyHolidayTasksCreatedBy",
			Handler:    _CutOffService_GetMyHolidayTasksCreatedBy_Handler,
		},
		{
			MethodName: "GetMyHolidayTasksApprovedBy",
			Handler:    _CutOffService_GetMyHolidayTasksApprovedBy_Handler,
		},
		{
			MethodName: "CreateHoliday",
			Handler:    _CutOffService_CreateHoliday_Handler,
		},
		{
			MethodName: "DeleteHoliday",
			Handler:    _CutOffService_DeleteHoliday_Handler,
		},
		{
			MethodName: "GetAvailableTime",
			Handler:    _CutOffService_GetAvailableTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cut_off_api.proto",
}
