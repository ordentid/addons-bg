package pb

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
	time "time"
)

type CutOffORM struct {
	CreatedAt           *time.Time `gorm:"column:CreatedAt"`
	CreatedByID         uint64     `gorm:"column:CreatedByID"`
	DeletedAt           *time.Time `gorm:"column:DeletedAt"`
	LastApprovedByID    uint64     `gorm:"column:CreatedAt"`
	LastRejectedByID    uint64     `gorm:"column:CreatedAt"`
	ModuleID            string     `gorm:"column:ModulID;type:jsonb"`
	RepeatOn            string     `gorm:"column:RepeatOn;type:jsonb"`
	RepeatPattern       string     `gorm:"column:RepeatPattern"`
	Saved               bool       `gorm:"column:Saved"`
	ScheduleDescription string     `gorm:"column:ScheduleDescription"`
	ScheduleID          uint64     `gorm:"column:ScheduleID;primary_key;not null"`
	ScheduleName        string     `gorm:"column:ScheduleName"`
	ScheduleTime        string     `gorm:"column:ScheduleTime;type:jsonb"`
	Status              string     `gorm:"column:Status"`
	UpdatedAt           *time.Time `gorm:"column:UpdatedAt"`
}

// TableName overrides the default tablename generated by GORM
func (CutOffORM) TableName() string {
	return "CutOff"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *CutOff) ToORM(ctx context.Context) (CutOffORM, error) {
	to := CutOffORM{}
	var err error
	if prehook, ok := interface{}(m).(CutOffWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.ScheduleID = m.ScheduleID
	to.ScheduleName = m.ScheduleName
	to.ScheduleDescription = m.ScheduleDescription
	to.ModuleID = m.ModuleID
	to.ScheduleTime = m.ScheduleTime
	to.RepeatOn = m.RepeatOn
	to.RepeatPattern = m.RepeatPattern
	to.Saved = m.Saved
	to.Status = m.Status
	to.CreatedByID = m.CreatedByID
	to.LastApprovedByID = m.LastApprovedByID
	to.LastRejectedByID = m.LastRejectedByID
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if m.DeletedAt != nil {
		t := m.DeletedAt.AsTime()
		to.DeletedAt = &t
	}
	if posthook, ok := interface{}(m).(CutOffWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *CutOffORM) ToPB(ctx context.Context) (CutOff, error) {
	to := CutOff{}
	var err error
	if prehook, ok := interface{}(m).(CutOffWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.ScheduleID = m.ScheduleID
	to.ScheduleName = m.ScheduleName
	to.ScheduleDescription = m.ScheduleDescription
	to.ModuleID = m.ModuleID
	to.ScheduleTime = m.ScheduleTime
	to.RepeatOn = m.RepeatOn
	to.RepeatPattern = m.RepeatPattern
	to.Saved = m.Saved
	to.Status = m.Status
	to.CreatedByID = m.CreatedByID
	to.LastApprovedByID = m.LastApprovedByID
	to.LastRejectedByID = m.LastRejectedByID
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if m.DeletedAt != nil {
		to.DeletedAt = timestamppb.New(*m.DeletedAt)
	}
	if posthook, ok := interface{}(m).(CutOffWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type CutOff the arg will be the target, the caller the one being converted from

// CutOffBeforeToORM called before default ToORM code
type CutOffWithBeforeToORM interface {
	BeforeToORM(context.Context, *CutOffORM) error
}

// CutOffAfterToORM called after default ToORM code
type CutOffWithAfterToORM interface {
	AfterToORM(context.Context, *CutOffORM) error
}

// CutOffBeforeToPB called before default ToPB code
type CutOffWithBeforeToPB interface {
	BeforeToPB(context.Context, *CutOff) error
}

// CutOffAfterToPB called after default ToPB code
type CutOffWithAfterToPB interface {
	AfterToPB(context.Context, *CutOff) error
}

type HolidayORM struct {
	CreatedAt           *time.Time `gorm:"column:CreatedAt"`
	CreatedByID         uint64     `gorm:"column:CreatedByID"`
	DeletedAt           *time.Time `gorm:"column:DeletedAt"`
	LastApprovedByID    uint64     `gorm:"column:CreatedAt"`
	LastRejectedByID    uint64     `gorm:"column:CreatedAt"`
	Module              string     `gorm:"type:jsonb"`
	Saved               bool       `gorm:"not null"`
	ScheduleDate        string     `gorm:"type:jsonb"`
	ScheduleDescription string     `gorm:"not null"`
	ScheduleID          uint64     `gorm:"primary_key;not null"`
	ScheduleName        string     `gorm:"not null"`
	Status              string     `gorm:"not null"`
	TaskID              uint64
	UpdatedAt           *time.Time `gorm:"column:UpdatedAt"`
}

// TableName overrides the default tablename generated by GORM
func (HolidayORM) TableName() string {
	return "Holiday"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Holiday) ToORM(ctx context.Context) (HolidayORM, error) {
	to := HolidayORM{}
	var err error
	if prehook, ok := interface{}(m).(HolidayWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.ScheduleID = m.ScheduleID
	to.ScheduleName = m.ScheduleName
	to.ScheduleDescription = m.ScheduleDescription
	to.Module = m.Module
	to.ScheduleDate = m.ScheduleDate
	to.Saved = m.Saved
	to.Status = m.Status
	to.TaskID = m.TaskID
	to.CreatedByID = m.CreatedByID
	to.LastApprovedByID = m.LastApprovedByID
	to.LastRejectedByID = m.LastRejectedByID
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if m.DeletedAt != nil {
		t := m.DeletedAt.AsTime()
		to.DeletedAt = &t
	}
	if posthook, ok := interface{}(m).(HolidayWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *HolidayORM) ToPB(ctx context.Context) (Holiday, error) {
	to := Holiday{}
	var err error
	if prehook, ok := interface{}(m).(HolidayWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.ScheduleID = m.ScheduleID
	to.ScheduleName = m.ScheduleName
	to.ScheduleDescription = m.ScheduleDescription
	to.Module = m.Module
	to.ScheduleDate = m.ScheduleDate
	to.Saved = m.Saved
	to.Status = m.Status
	to.TaskID = m.TaskID
	to.CreatedByID = m.CreatedByID
	to.LastApprovedByID = m.LastApprovedByID
	to.LastRejectedByID = m.LastRejectedByID
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if m.DeletedAt != nil {
		to.DeletedAt = timestamppb.New(*m.DeletedAt)
	}
	if posthook, ok := interface{}(m).(HolidayWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Holiday the arg will be the target, the caller the one being converted from

// HolidayBeforeToORM called before default ToORM code
type HolidayWithBeforeToORM interface {
	BeforeToORM(context.Context, *HolidayORM) error
}

// HolidayAfterToORM called after default ToORM code
type HolidayWithAfterToORM interface {
	AfterToORM(context.Context, *HolidayORM) error
}

// HolidayBeforeToPB called before default ToPB code
type HolidayWithBeforeToPB interface {
	BeforeToPB(context.Context, *Holiday) error
}

// HolidayAfterToPB called after default ToPB code
type HolidayWithAfterToPB interface {
	AfterToPB(context.Context, *Holiday) error
}

type CalendarORM struct {
	CreatedAt        *time.Time `gorm:"column:CreatedAt"`
	CreatedByID      uint64     `gorm:"column:CreatedByID"`
	Date             *time.Time `gorm:"not null"`
	Day              string     `gorm:"not null"`
	DeletedAt        *time.Time `gorm:"column:DeletedAt"`
	Id               uint64     `gorm:"primary_key;not null"`
	IsHoliday        bool       `gorm:"not null"`
	LastApprovedByID uint64     `gorm:"column:CreatedAt"`
	LastRejectedByID uint64     `gorm:"column:CreatedAt"`
	Notes            string
	UpdatedAt        *time.Time `gorm:"column:UpdatedAt"`
}

// TableName overrides the default tablename generated by GORM
func (CalendarORM) TableName() string {
	return "Calendar"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Calendar) ToORM(ctx context.Context) (CalendarORM, error) {
	to := CalendarORM{}
	var err error
	if prehook, ok := interface{}(m).(CalendarWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.Date != nil {
		t := m.Date.AsTime()
		to.Date = &t
	}
	to.Day = m.Day
	to.IsHoliday = m.IsHoliday
	to.Notes = m.Notes
	to.CreatedByID = m.CreatedByID
	to.LastApprovedByID = m.LastApprovedByID
	to.LastRejectedByID = m.LastRejectedByID
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if m.DeletedAt != nil {
		t := m.DeletedAt.AsTime()
		to.DeletedAt = &t
	}
	if posthook, ok := interface{}(m).(CalendarWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *CalendarORM) ToPB(ctx context.Context) (Calendar, error) {
	to := Calendar{}
	var err error
	if prehook, ok := interface{}(m).(CalendarWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	if m.Date != nil {
		to.Date = timestamppb.New(*m.Date)
	}
	to.Day = m.Day
	to.IsHoliday = m.IsHoliday
	to.Notes = m.Notes
	to.CreatedByID = m.CreatedByID
	to.LastApprovedByID = m.LastApprovedByID
	to.LastRejectedByID = m.LastRejectedByID
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if m.DeletedAt != nil {
		to.DeletedAt = timestamppb.New(*m.DeletedAt)
	}
	if posthook, ok := interface{}(m).(CalendarWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Calendar the arg will be the target, the caller the one being converted from

// CalendarBeforeToORM called before default ToORM code
type CalendarWithBeforeToORM interface {
	BeforeToORM(context.Context, *CalendarORM) error
}

// CalendarAfterToORM called after default ToORM code
type CalendarWithAfterToORM interface {
	AfterToORM(context.Context, *CalendarORM) error
}

// CalendarBeforeToPB called before default ToPB code
type CalendarWithBeforeToPB interface {
	BeforeToPB(context.Context, *Calendar) error
}

// CalendarAfterToPB called after default ToPB code
type CalendarWithAfterToPB interface {
	AfterToPB(context.Context, *Calendar) error
}

// DefaultCreateCutOff executes a basic gorm create call
func DefaultCreateCutOff(ctx context.Context, in *CutOff, db *gorm.DB) (*CutOff, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CutOffORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CutOffORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type CutOffORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CutOffORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadCutOff(ctx context.Context, in *CutOff, db *gorm.DB) (*CutOff, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.ScheduleID == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(CutOffORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &CutOffORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CutOffORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := CutOffORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(CutOffORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type CutOffORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CutOffORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CutOffORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteCutOff(ctx context.Context, in *CutOff, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.ScheduleID == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(CutOffORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&CutOffORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(CutOffORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type CutOffORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CutOffORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteCutOffSet(ctx context.Context, in []*CutOff, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.ScheduleID == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.ScheduleID)
	}
	if hook, ok := (interface{}(&CutOffORM{})).(CutOffORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("schedule_id in (?)", keys).Delete(&CutOffORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&CutOffORM{})).(CutOffORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type CutOffORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*CutOff, *gorm.DB) (*gorm.DB, error)
}
type CutOffORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*CutOff, *gorm.DB) error
}

// DefaultStrictUpdateCutOff clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateCutOff(ctx context.Context, in *CutOff, db *gorm.DB) (*CutOff, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateCutOff")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &CutOffORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("ScheduleID=?", ormObj.ScheduleID).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(CutOffORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(CutOffORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CutOffORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type CutOffORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CutOffORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CutOffORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchCutOff executes a basic gorm update call with patch behavior
func DefaultPatchCutOff(ctx context.Context, in *CutOff, updateMask *field_mask.FieldMask, db *gorm.DB) (*CutOff, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj CutOff
	var err error
	if hook, ok := interface{}(&pbObj).(CutOffWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(CutOffWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskCutOff(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(CutOffWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateCutOff(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(CutOffWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type CutOffWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *CutOff, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CutOffWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *CutOff, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CutOffWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *CutOff, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CutOffWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *CutOff, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetCutOff executes a bulk gorm update call with patch behavior
func DefaultPatchSetCutOff(ctx context.Context, objects []*CutOff, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*CutOff, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*CutOff, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchCutOff(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskCutOff patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskCutOff(ctx context.Context, patchee *CutOff, patcher *CutOff, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*CutOff, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	var updatedDeletedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"ScheduleID" {
			patchee.ScheduleID = patcher.ScheduleID
			continue
		}
		if f == prefix+"ScheduleName" {
			patchee.ScheduleName = patcher.ScheduleName
			continue
		}
		if f == prefix+"ScheduleDescription" {
			patchee.ScheduleDescription = patcher.ScheduleDescription
			continue
		}
		if f == prefix+"ModuleID" {
			patchee.ModuleID = patcher.ModuleID
			continue
		}
		if f == prefix+"ScheduleTime" {
			patchee.ScheduleTime = patcher.ScheduleTime
			continue
		}
		if f == prefix+"RepeatOn" {
			patchee.RepeatOn = patcher.RepeatOn
			continue
		}
		if f == prefix+"RepeatPattern" {
			patchee.RepeatPattern = patcher.RepeatPattern
			continue
		}
		if f == prefix+"Saved" {
			patchee.Saved = patcher.Saved
			continue
		}
		if f == prefix+"Status" {
			patchee.Status = patcher.Status
			continue
		}
		if f == prefix+"CreatedByID" {
			patchee.CreatedByID = patcher.CreatedByID
			continue
		}
		if f == prefix+"LastApprovedByID" {
			patchee.LastApprovedByID = patcher.LastApprovedByID
			continue
		}
		if f == prefix+"LastRejectedByID" {
			patchee.LastRejectedByID = patcher.LastRejectedByID
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if !updatedDeletedAt && strings.HasPrefix(f, prefix+"DeletedAt.") {
			if patcher.DeletedAt == nil {
				patchee.DeletedAt = nil
				continue
			}
			if patchee.DeletedAt == nil {
				patchee.DeletedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"DeletedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.DeletedAt, patchee.DeletedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"DeletedAt" {
			updatedDeletedAt = true
			patchee.DeletedAt = patcher.DeletedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListCutOff executes a gorm list call
func DefaultListCutOff(ctx context.Context, db *gorm.DB) ([]*CutOff, error) {
	in := CutOff{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CutOffORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &CutOffORM{}, &CutOff{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CutOffORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("ScheduleID")
	ormResponse := []CutOffORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CutOffORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*CutOff{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type CutOffORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CutOffORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CutOffORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]CutOffORM) error
}

// DefaultCreateHoliday executes a basic gorm create call
func DefaultCreateHoliday(ctx context.Context, in *Holiday, db *gorm.DB) (*Holiday, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HolidayORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HolidayORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type HolidayORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HolidayORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadHoliday(ctx context.Context, in *Holiday, db *gorm.DB) (*Holiday, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.ScheduleID == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(HolidayORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &HolidayORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HolidayORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := HolidayORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(HolidayORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type HolidayORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HolidayORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HolidayORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteHoliday(ctx context.Context, in *Holiday, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.ScheduleID == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(HolidayORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&HolidayORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(HolidayORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type HolidayORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HolidayORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteHolidaySet(ctx context.Context, in []*Holiday, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.ScheduleID == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.ScheduleID)
	}
	if hook, ok := (interface{}(&HolidayORM{})).(HolidayORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("schedule_id in (?)", keys).Delete(&HolidayORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&HolidayORM{})).(HolidayORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type HolidayORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Holiday, *gorm.DB) (*gorm.DB, error)
}
type HolidayORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Holiday, *gorm.DB) error
}

// DefaultStrictUpdateHoliday clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateHoliday(ctx context.Context, in *Holiday, db *gorm.DB) (*Holiday, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateHoliday")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &HolidayORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("schedule_id=?", ormObj.ScheduleID).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(HolidayORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(HolidayORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HolidayORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type HolidayORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HolidayORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HolidayORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchHoliday executes a basic gorm update call with patch behavior
func DefaultPatchHoliday(ctx context.Context, in *Holiday, updateMask *field_mask.FieldMask, db *gorm.DB) (*Holiday, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Holiday
	var err error
	if hook, ok := interface{}(&pbObj).(HolidayWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(HolidayWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskHoliday(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(HolidayWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateHoliday(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(HolidayWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type HolidayWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Holiday, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type HolidayWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Holiday, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type HolidayWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Holiday, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type HolidayWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Holiday, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetHoliday executes a bulk gorm update call with patch behavior
func DefaultPatchSetHoliday(ctx context.Context, objects []*Holiday, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Holiday, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Holiday, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchHoliday(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskHoliday patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskHoliday(ctx context.Context, patchee *Holiday, patcher *Holiday, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Holiday, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	var updatedDeletedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"ScheduleID" {
			patchee.ScheduleID = patcher.ScheduleID
			continue
		}
		if f == prefix+"ScheduleName" {
			patchee.ScheduleName = patcher.ScheduleName
			continue
		}
		if f == prefix+"ScheduleDescription" {
			patchee.ScheduleDescription = patcher.ScheduleDescription
			continue
		}
		if f == prefix+"Module" {
			patchee.Module = patcher.Module
			continue
		}
		if f == prefix+"ScheduleDate" {
			patchee.ScheduleDate = patcher.ScheduleDate
			continue
		}
		if f == prefix+"Saved" {
			patchee.Saved = patcher.Saved
			continue
		}
		if f == prefix+"Status" {
			patchee.Status = patcher.Status
			continue
		}
		if f == prefix+"TaskID" {
			patchee.TaskID = patcher.TaskID
			continue
		}
		if f == prefix+"CreatedByID" {
			patchee.CreatedByID = patcher.CreatedByID
			continue
		}
		if f == prefix+"LastApprovedByID" {
			patchee.LastApprovedByID = patcher.LastApprovedByID
			continue
		}
		if f == prefix+"LastRejectedByID" {
			patchee.LastRejectedByID = patcher.LastRejectedByID
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if !updatedDeletedAt && strings.HasPrefix(f, prefix+"DeletedAt.") {
			if patcher.DeletedAt == nil {
				patchee.DeletedAt = nil
				continue
			}
			if patchee.DeletedAt == nil {
				patchee.DeletedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"DeletedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.DeletedAt, patchee.DeletedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"DeletedAt" {
			updatedDeletedAt = true
			patchee.DeletedAt = patcher.DeletedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListHoliday executes a gorm list call
func DefaultListHoliday(ctx context.Context, db *gorm.DB) ([]*Holiday, error) {
	in := Holiday{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HolidayORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &HolidayORM{}, &Holiday{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HolidayORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("schedule_id")
	ormResponse := []HolidayORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HolidayORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Holiday{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type HolidayORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HolidayORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HolidayORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]HolidayORM) error
}

// DefaultCreateCalendar executes a basic gorm create call
func DefaultCreateCalendar(ctx context.Context, in *Calendar, db *gorm.DB) (*Calendar, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CalendarORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CalendarORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type CalendarORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CalendarORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadCalendar(ctx context.Context, in *Calendar, db *gorm.DB) (*Calendar, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(CalendarORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &CalendarORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CalendarORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := CalendarORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(CalendarORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type CalendarORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CalendarORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CalendarORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteCalendar(ctx context.Context, in *Calendar, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(CalendarORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&CalendarORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(CalendarORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type CalendarORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CalendarORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteCalendarSet(ctx context.Context, in []*Calendar, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&CalendarORM{})).(CalendarORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&CalendarORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&CalendarORM{})).(CalendarORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type CalendarORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Calendar, *gorm.DB) (*gorm.DB, error)
}
type CalendarORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Calendar, *gorm.DB) error
}

// DefaultStrictUpdateCalendar clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateCalendar(ctx context.Context, in *Calendar, db *gorm.DB) (*Calendar, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateCalendar")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &CalendarORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(CalendarORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(CalendarORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CalendarORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type CalendarORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CalendarORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CalendarORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchCalendar executes a basic gorm update call with patch behavior
func DefaultPatchCalendar(ctx context.Context, in *Calendar, updateMask *field_mask.FieldMask, db *gorm.DB) (*Calendar, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Calendar
	var err error
	if hook, ok := interface{}(&pbObj).(CalendarWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadCalendar(ctx, &Calendar{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(CalendarWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskCalendar(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(CalendarWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateCalendar(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(CalendarWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type CalendarWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Calendar, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CalendarWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Calendar, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CalendarWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Calendar, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CalendarWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Calendar, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetCalendar executes a bulk gorm update call with patch behavior
func DefaultPatchSetCalendar(ctx context.Context, objects []*Calendar, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Calendar, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Calendar, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchCalendar(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskCalendar patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskCalendar(ctx context.Context, patchee *Calendar, patcher *Calendar, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Calendar, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedDate bool
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	var updatedDeletedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if !updatedDate && strings.HasPrefix(f, prefix+"Date.") {
			if patcher.Date == nil {
				patchee.Date = nil
				continue
			}
			if patchee.Date == nil {
				patchee.Date = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"Date."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.Date, patchee.Date, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"Date" {
			updatedDate = true
			patchee.Date = patcher.Date
			continue
		}
		if f == prefix+"Day" {
			patchee.Day = patcher.Day
			continue
		}
		if f == prefix+"IsHoliday" {
			patchee.IsHoliday = patcher.IsHoliday
			continue
		}
		if f == prefix+"Notes" {
			patchee.Notes = patcher.Notes
			continue
		}
		if f == prefix+"CreatedByID" {
			patchee.CreatedByID = patcher.CreatedByID
			continue
		}
		if f == prefix+"LastApprovedByID" {
			patchee.LastApprovedByID = patcher.LastApprovedByID
			continue
		}
		if f == prefix+"LastRejectedByID" {
			patchee.LastRejectedByID = patcher.LastRejectedByID
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if !updatedDeletedAt && strings.HasPrefix(f, prefix+"DeletedAt.") {
			if patcher.DeletedAt == nil {
				patchee.DeletedAt = nil
				continue
			}
			if patchee.DeletedAt == nil {
				patchee.DeletedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"DeletedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.DeletedAt, patchee.DeletedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"DeletedAt" {
			updatedDeletedAt = true
			patchee.DeletedAt = patcher.DeletedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListCalendar executes a gorm list call
func DefaultListCalendar(ctx context.Context, db *gorm.DB) ([]*Calendar, error) {
	in := Calendar{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CalendarORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &CalendarORM{}, &Calendar{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CalendarORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []CalendarORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CalendarORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Calendar{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type CalendarORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CalendarORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CalendarORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]CalendarORM) error
}
