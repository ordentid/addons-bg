// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: cut_off_payload.proto

package pb

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskStatus int32

const (
	TaskStatus_AllStatus        TaskStatus = 0
	TaskStatus_Pending          TaskStatus = 1
	TaskStatus_Draft            TaskStatus = 2
	TaskStatus_Returned         TaskStatus = 3
	TaskStatus_Approved         TaskStatus = 4
	TaskStatus_Rejected         TaskStatus = 5
	TaskStatus_RequestForDelete TaskStatus = 6
	TaskStatus_Deleted          TaskStatus = 7
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "AllStatus",
		1: "Pending",
		2: "Draft",
		3: "Returned",
		4: "Approved",
		5: "Rejected",
		6: "RequestForDelete",
		7: "Deleted",
	}
	TaskStatus_value = map[string]int32{
		"AllStatus":        0,
		"Pending":          1,
		"Draft":            2,
		"Returned":         3,
		"Approved":         4,
		"Rejected":         5,
		"RequestForDelete": 6,
		"Deleted":          7,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_cut_off_payload_proto_enumTypes[0].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_cut_off_payload_proto_enumTypes[0]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{0}
}

type TaskStep int32

const (
	TaskStep_AllStep  TaskStep = 0
	TaskStep_Maker    TaskStep = 1
	TaskStep_Checker  TaskStep = 2
	TaskStep_Signer   TaskStep = 3
	TaskStep_Releaser TaskStep = 4
)

// Enum value maps for TaskStep.
var (
	TaskStep_name = map[int32]string{
		0: "AllStep",
		1: "Maker",
		2: "Checker",
		3: "Signer",
		4: "Releaser",
	}
	TaskStep_value = map[string]int32{
		"AllStep":  0,
		"Maker":    1,
		"Checker":  2,
		"Signer":   3,
		"Releaser": 4,
	}
)

func (x TaskStep) Enum() *TaskStep {
	p := new(TaskStep)
	*p = x
	return p
}

func (x TaskStep) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStep) Descriptor() protoreflect.EnumDescriptor {
	return file_cut_off_payload_proto_enumTypes[1].Descriptor()
}

func (TaskStep) Type() protoreflect.EnumType {
	return &file_cut_off_payload_proto_enumTypes[1]
}

func (x TaskStep) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStep.Descriptor instead.
func (TaskStep) EnumDescriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{1}
}

type SortDirection int32

const (
	SortDirection_DESC SortDirection = 0
	SortDirection_ASC  SortDirection = 1
)

// Enum value maps for SortDirection.
var (
	SortDirection_name = map[int32]string{
		0: "DESC",
		1: "ASC",
	}
	SortDirection_value = map[string]int32{
		"DESC": 0,
		"ASC":  1,
	}
)

func (x SortDirection) Enum() *SortDirection {
	p := new(SortDirection)
	*p = x
	return p
}

func (x SortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_cut_off_payload_proto_enumTypes[2].Descriptor()
}

func (SortDirection) Type() protoreflect.EnumType {
	return &file_cut_off_payload_proto_enumTypes[2]
}

func (x SortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortDirection.Descriptor instead.
func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{2}
}

type FileListCutOffTaskRequest_Formats int32

const (
	FileListCutOffTaskRequest_null FileListCutOffTaskRequest_Formats = 0
	FileListCutOffTaskRequest_pdf  FileListCutOffTaskRequest_Formats = 1
	FileListCutOffTaskRequest_xls  FileListCutOffTaskRequest_Formats = 2
	FileListCutOffTaskRequest_csv  FileListCutOffTaskRequest_Formats = 3
)

// Enum value maps for FileListCutOffTaskRequest_Formats.
var (
	FileListCutOffTaskRequest_Formats_name = map[int32]string{
		0: "null",
		1: "pdf",
		2: "xls",
		3: "csv",
	}
	FileListCutOffTaskRequest_Formats_value = map[string]int32{
		"null": 0,
		"pdf":  1,
		"xls":  2,
		"csv":  3,
	}
)

func (x FileListCutOffTaskRequest_Formats) Enum() *FileListCutOffTaskRequest_Formats {
	p := new(FileListCutOffTaskRequest_Formats)
	*p = x
	return p
}

func (x FileListCutOffTaskRequest_Formats) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileListCutOffTaskRequest_Formats) Descriptor() protoreflect.EnumDescriptor {
	return file_cut_off_payload_proto_enumTypes[3].Descriptor()
}

func (FileListCutOffTaskRequest_Formats) Type() protoreflect.EnumType {
	return &file_cut_off_payload_proto_enumTypes[3]
}

func (x FileListCutOffTaskRequest_Formats) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileListCutOffTaskRequest_Formats.Descriptor instead.
func (FileListCutOffTaskRequest_Formats) EnumDescriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{15, 0}
}

type DownloadListHolidayTaskRequest_Formats int32

const (
	DownloadListHolidayTaskRequest_null DownloadListHolidayTaskRequest_Formats = 0
	DownloadListHolidayTaskRequest_pdf  DownloadListHolidayTaskRequest_Formats = 1
	DownloadListHolidayTaskRequest_xls  DownloadListHolidayTaskRequest_Formats = 2
	DownloadListHolidayTaskRequest_csv  DownloadListHolidayTaskRequest_Formats = 3
)

// Enum value maps for DownloadListHolidayTaskRequest_Formats.
var (
	DownloadListHolidayTaskRequest_Formats_name = map[int32]string{
		0: "null",
		1: "pdf",
		2: "xls",
		3: "csv",
	}
	DownloadListHolidayTaskRequest_Formats_value = map[string]int32{
		"null": 0,
		"pdf":  1,
		"xls":  2,
		"csv":  3,
	}
)

func (x DownloadListHolidayTaskRequest_Formats) Enum() *DownloadListHolidayTaskRequest_Formats {
	p := new(DownloadListHolidayTaskRequest_Formats)
	*p = x
	return p
}

func (x DownloadListHolidayTaskRequest_Formats) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DownloadListHolidayTaskRequest_Formats) Descriptor() protoreflect.EnumDescriptor {
	return file_cut_off_payload_proto_enumTypes[4].Descriptor()
}

func (DownloadListHolidayTaskRequest_Formats) Type() protoreflect.EnumType {
	return &file_cut_off_payload_proto_enumTypes[4]
}

func (x DownloadListHolidayTaskRequest_Formats) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DownloadListHolidayTaskRequest_Formats.Descriptor instead.
func (DownloadListHolidayTaskRequest_Formats) EnumDescriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{59, 0}
}

type PaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page       int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	TotalRows  int64 `protobuf:"varint,3,opt,name=totalRows,proto3" json:"totalRows,omitempty"`
	TotalPages int32 `protobuf:"varint,4,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
}

func (x *PaginationResponse) Reset() {
	*x = PaginationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationResponse) ProtoMessage() {}

func (x *PaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationResponse.ProtoReflect.Descriptor instead.
func (*PaginationResponse) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{0}
}

func (x *PaginationResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PaginationResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PaginationResponse) GetTotalRows() int64 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

func (x *PaginationResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID             uint64                 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Type               string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Status             string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Step               string                 `protobuf:"bytes,4,opt,name=step,proto3" json:"step,omitempty"`
	FeatureID          uint64                 `protobuf:"varint,5,opt,name=featureID,proto3" json:"featureID,omitempty"`
	LastApprovedByID   uint64                 `protobuf:"varint,6,opt,name=lastApprovedByID,proto3" json:"lastApprovedByID,omitempty"`
	LastRejectedByID   uint64                 `protobuf:"varint,7,opt,name=lastRejectedByID,proto3" json:"lastRejectedByID,omitempty"`
	LastApprovedByName string                 `protobuf:"bytes,8,opt,name=lastApprovedByName,proto3" json:"lastApprovedByName,omitempty"`
	LastRejectedByName string                 `protobuf:"bytes,9,opt,name=lastRejectedByName,proto3" json:"lastRejectedByName,omitempty"`
	CreatedByName      string                 `protobuf:"bytes,10,opt,name=createdByName,proto3" json:"createdByName,omitempty"`
	UpdatedByName      string                 `protobuf:"bytes,11,opt,name=updatedByName,proto3" json:"updatedByName,omitempty"`
	Reasons            string                 `protobuf:"bytes,12,opt,name=reasons,proto3" json:"reasons,omitempty"`
	Comment            string                 `protobuf:"bytes,13,opt,name=comment,proto3" json:"comment,omitempty"`
	Workflow           string                 `protobuf:"bytes,14,opt,name=workflow,proto3" json:"workflow,omitempty"`
	CompanyID          uint64                 `protobuf:"varint,15,opt,name=companyID,proto3" json:"companyID,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{1}
}

func (x *Task) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *Task) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Task) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Task) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *Task) GetFeatureID() uint64 {
	if x != nil {
		return x.FeatureID
	}
	return 0
}

func (x *Task) GetLastApprovedByID() uint64 {
	if x != nil {
		return x.LastApprovedByID
	}
	return 0
}

func (x *Task) GetLastRejectedByID() uint64 {
	if x != nil {
		return x.LastRejectedByID
	}
	return 0
}

func (x *Task) GetLastApprovedByName() string {
	if x != nil {
		return x.LastApprovedByName
	}
	return ""
}

func (x *Task) GetLastRejectedByName() string {
	if x != nil {
		return x.LastRejectedByName
	}
	return ""
}

func (x *Task) GetCreatedByName() string {
	if x != nil {
		return x.CreatedByName
	}
	return ""
}

func (x *Task) GetUpdatedByName() string {
	if x != nil {
		return x.UpdatedByName
	}
	return ""
}

func (x *Task) GetReasons() string {
	if x != nil {
		return x.Reasons
	}
	return ""
}

func (x *Task) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Task) GetWorkflow() string {
	if x != nil {
		return x.Workflow
	}
	return ""
}

func (x *Task) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *Task) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Task) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Sort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column    string `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Direction string `protobuf:"bytes,2,opt,name=direction,proto3" json:"direction,omitempty"`
}

func (x *Sort) Reset() {
	*x = Sort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sort) ProtoMessage() {}

func (x *Sort) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sort.ProtoReflect.Descriptor instead.
func (*Sort) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{2}
}

func (x *Sort) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *Sort) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

type ListProductUsedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleType string `protobuf:"bytes,1,opt,name=scheduleType,proto3" json:"scheduleType,omitempty"`
}

func (x *ListProductUsedReq) Reset() {
	*x = ListProductUsedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProductUsedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProductUsedReq) ProtoMessage() {}

func (x *ListProductUsedReq) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProductUsedReq.ProtoReflect.Descriptor instead.
func (*ListProductUsedReq) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{3}
}

func (x *ListProductUsedReq) GetScheduleType() string {
	if x != nil {
		return x.ScheduleType
	}
	return ""
}

type ListProductUsedRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool      `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Module `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListProductUsedRes) Reset() {
	*x = ListProductUsedRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProductUsedRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProductUsedRes) ProtoMessage() {}

func (x *ListProductUsedRes) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProductUsedRes.ProtoReflect.Descriptor instead.
func (*ListProductUsedRes) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{4}
}

func (x *ListProductUsedRes) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ListProductUsedRes) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListProductUsedRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListProductUsedRes) GetData() []*Module {
	if x != nil {
		return x.Data
	}
	return nil
}

type Module struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleID uint64 `protobuf:"varint,1,opt,name=moduleID,proto3" json:"moduleID,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Module) Reset() {
	*x = Module{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Module) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Module) ProtoMessage() {}

func (x *Module) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Module.ProtoReflect.Descriptor instead.
func (*Module) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{5}
}

func (x *Module) GetModuleID() uint64 {
	if x != nil {
		return x.ModuleID
	}
	return 0
}

func (x *Module) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ScheduleTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime string `protobuf:"bytes,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   string `protobuf:"bytes,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *ScheduleTime) Reset() {
	*x = ScheduleTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleTime) ProtoMessage() {}

func (x *ScheduleTime) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleTime.ProtoReflect.Descriptor instead.
func (*ScheduleTime) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{6}
}

func (x *ScheduleTime) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ScheduleTime) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

type CutOffData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleID          uint64                 `protobuf:"varint,1,opt,name=scheduleID,proto3" json:"scheduleID,omitempty"`
	ScheduleName        string                 `protobuf:"bytes,2,opt,name=scheduleName,proto3" json:"scheduleName,omitempty"`
	ScheduleDescription string                 `protobuf:"bytes,3,opt,name=scheduleDescription,proto3" json:"scheduleDescription,omitempty"`
	Modules             []*Module              `protobuf:"bytes,4,rep,name=modules,proto3" json:"modules,omitempty"`
	ScheduleTimes       []*ScheduleTime        `protobuf:"bytes,5,rep,name=scheduleTimes,proto3" json:"scheduleTimes,omitempty"`
	RepeatOn            []string               `protobuf:"bytes,6,rep,name=repeatOn,proto3" json:"repeatOn,omitempty"`
	RepeatPattern       string                 `protobuf:"bytes,7,opt,name=repeatPattern,proto3" json:"repeatPattern,omitempty"`
	Saved               bool                   `protobuf:"varint,8,opt,name=saved,proto3" json:"saved,omitempty"`
	Status              string                 `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CreatedByID         uint64                 `protobuf:"varint,17,opt,name=createdByID,proto3" json:"createdByID,omitempty"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	UpdatedByID         uint64                 `protobuf:"varint,19,opt,name=updatedByID,proto3" json:"updatedByID,omitempty"`
	DeletedAt           *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	DeletedByID         uint64                 `protobuf:"varint,21,opt,name=deletedByID,proto3" json:"deletedByID,omitempty"`
}

func (x *CutOffData) Reset() {
	*x = CutOffData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CutOffData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CutOffData) ProtoMessage() {}

func (x *CutOffData) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CutOffData.ProtoReflect.Descriptor instead.
func (*CutOffData) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{7}
}

func (x *CutOffData) GetScheduleID() uint64 {
	if x != nil {
		return x.ScheduleID
	}
	return 0
}

func (x *CutOffData) GetScheduleName() string {
	if x != nil {
		return x.ScheduleName
	}
	return ""
}

func (x *CutOffData) GetScheduleDescription() string {
	if x != nil {
		return x.ScheduleDescription
	}
	return ""
}

func (x *CutOffData) GetModules() []*Module {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *CutOffData) GetScheduleTimes() []*ScheduleTime {
	if x != nil {
		return x.ScheduleTimes
	}
	return nil
}

func (x *CutOffData) GetRepeatOn() []string {
	if x != nil {
		return x.RepeatOn
	}
	return nil
}

func (x *CutOffData) GetRepeatPattern() string {
	if x != nil {
		return x.RepeatPattern
	}
	return ""
}

func (x *CutOffData) GetSaved() bool {
	if x != nil {
		return x.Saved
	}
	return false
}

func (x *CutOffData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CutOffData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CutOffData) GetCreatedByID() uint64 {
	if x != nil {
		return x.CreatedByID
	}
	return 0
}

func (x *CutOffData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CutOffData) GetUpdatedByID() uint64 {
	if x != nil {
		return x.UpdatedByID
	}
	return 0
}

func (x *CutOffData) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *CutOffData) GetDeletedByID() uint64 {
	if x != nil {
		return x.DeletedByID
	}
	return 0
}

type CreateCutOffTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *CutOffData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	TaskID  uint64      `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
	IsDraft bool        `protobuf:"varint,3,opt,name=isDraft,proto3" json:"isDraft,omitempty"`
}

func (x *CreateCutOffTaskRequest) Reset() {
	*x = CreateCutOffTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCutOffTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCutOffTaskRequest) ProtoMessage() {}

func (x *CreateCutOffTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCutOffTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateCutOffTaskRequest) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{8}
}

func (x *CreateCutOffTaskRequest) GetData() *CutOffData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateCutOffTaskRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CreateCutOffTaskRequest) GetIsDraft() bool {
	if x != nil {
		return x.IsDraft
	}
	return false
}

type TaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task       `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Data *CutOffData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TaskData) Reset() {
	*x = TaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskData) ProtoMessage() {}

func (x *TaskData) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskData.ProtoReflect.Descriptor instead.
func (*TaskData) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{9}
}

func (x *TaskData) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *TaskData) GetData() *CutOffData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateCutOffTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool      `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *TaskData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateCutOffTaskResponse) Reset() {
	*x = CreateCutOffTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCutOffTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCutOffTaskResponse) ProtoMessage() {}

func (x *CreateCutOffTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCutOffTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateCutOffTaskResponse) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{10}
}

func (x *CreateCutOffTaskResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *CreateCutOffTaskResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateCutOffTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateCutOffTaskResponse) GetData() *TaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CutOffTaskActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID  uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Action  string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	Reasons string `protobuf:"bytes,4,opt,name=reasons,proto3" json:"reasons,omitempty"`
}

func (x *CutOffTaskActionRequest) Reset() {
	*x = CutOffTaskActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CutOffTaskActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CutOffTaskActionRequest) ProtoMessage() {}

func (x *CutOffTaskActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CutOffTaskActionRequest.ProtoReflect.Descriptor instead.
func (*CutOffTaskActionRequest) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{11}
}

func (x *CutOffTaskActionRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CutOffTaskActionRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *CutOffTaskActionRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *CutOffTaskActionRequest) GetReasons() string {
	if x != nil {
		return x.Reasons
	}
	return ""
}

type CutOffTaskActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool      `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *TaskData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CutOffTaskActionResponse) Reset() {
	*x = CutOffTaskActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CutOffTaskActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CutOffTaskActionResponse) ProtoMessage() {}

func (x *CutOffTaskActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CutOffTaskActionResponse.ProtoReflect.Descriptor instead.
func (*CutOffTaskActionResponse) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{12}
}

func (x *CutOffTaskActionResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *CutOffTaskActionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CutOffTaskActionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CutOffTaskActionResponse) GetData() *TaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCutOffTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     TaskStatus                            `protobuf:"varint,1,opt,name=status,proto3,enum=cut.off.service.v1.TaskStatus" json:"status,omitempty"`
	Step       TaskStep                              `protobuf:"varint,2,opt,name=step,proto3,enum=cut.off.service.v1.TaskStep" json:"step,omitempty"`
	Limit      int32                                 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page       int32                                 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Sort       string                                `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir        SortDirection                         `protobuf:"varint,6,opt,name=dir,proto3,enum=cut.off.service.v1.SortDirection" json:"dir,omitempty"`
	Filter     *ListCutOffTaskRequest_TaskListFilter `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	Search     string                                `protobuf:"bytes,8,opt,name=search,proto3" json:"search,omitempty"`
	In         string                                `protobuf:"bytes,10,opt,name=in,proto3" json:"in,omitempty"`
	MyTaskOnly bool                                  `protobuf:"varint,9,opt,name=myTaskOnly,proto3" json:"myTaskOnly,omitempty"`
}

func (x *ListCutOffTaskRequest) Reset() {
	*x = ListCutOffTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCutOffTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCutOffTaskRequest) ProtoMessage() {}

func (x *ListCutOffTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCutOffTaskRequest.ProtoReflect.Descriptor instead.
func (*ListCutOffTaskRequest) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{13}
}

func (x *ListCutOffTaskRequest) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_AllStatus
}

func (x *ListCutOffTaskRequest) GetStep() TaskStep {
	if x != nil {
		return x.Step
	}
	return TaskStep_AllStep
}

func (x *ListCutOffTaskRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListCutOffTaskRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCutOffTaskRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *ListCutOffTaskRequest) GetDir() SortDirection {
	if x != nil {
		return x.Dir
	}
	return SortDirection_DESC
}

func (x *ListCutOffTaskRequest) GetFilter() *ListCutOffTaskRequest_TaskListFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListCutOffTaskRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListCutOffTaskRequest) GetIn() string {
	if x != nil {
		return x.In
	}
	return ""
}

func (x *ListCutOffTaskRequest) GetMyTaskOnly() bool {
	if x != nil {
		return x.MyTaskOnly
	}
	return false
}

type ListCutOffTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32              `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*TaskData         `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListCutOffTaskResponse) Reset() {
	*x = ListCutOffTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCutOffTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCutOffTaskResponse) ProtoMessage() {}

func (x *ListCutOffTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCutOffTaskResponse.ProtoReflect.Descriptor instead.
func (*ListCutOffTaskResponse) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{14}
}

func (x *ListCutOffTaskResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ListCutOffTaskResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCutOffTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCutOffTaskResponse) GetData() []*TaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListCutOffTaskResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type FileListCutOffTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     TaskStatus                            `protobuf:"varint,1,opt,name=status,proto3,enum=cut.off.service.v1.TaskStatus" json:"status,omitempty"`
	Step       TaskStep                              `protobuf:"varint,2,opt,name=step,proto3,enum=cut.off.service.v1.TaskStep" json:"step,omitempty"`
	Limit      int32                                 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page       int32                                 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Sort       string                                `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir        SortDirection                         `protobuf:"varint,6,opt,name=dir,proto3,enum=cut.off.service.v1.SortDirection" json:"dir,omitempty"`
	Filter     *ListCutOffTaskRequest_TaskListFilter `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	Search     string                                `protobuf:"bytes,8,opt,name=search,proto3" json:"search,omitempty"`
	MyTaskOnly bool                                  `protobuf:"varint,9,opt,name=myTaskOnly,proto3" json:"myTaskOnly,omitempty"`
	FileFormat FileListCutOffTaskRequest_Formats     `protobuf:"varint,25,opt,name=fileFormat,proto3,enum=cut.off.service.v1.FileListCutOffTaskRequest_Formats" json:"fileFormat,omitempty"`
}

func (x *FileListCutOffTaskRequest) Reset() {
	*x = FileListCutOffTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileListCutOffTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileListCutOffTaskRequest) ProtoMessage() {}

func (x *FileListCutOffTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileListCutOffTaskRequest.ProtoReflect.Descriptor instead.
func (*FileListCutOffTaskRequest) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{15}
}

func (x *FileListCutOffTaskRequest) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_AllStatus
}

func (x *FileListCutOffTaskRequest) GetStep() TaskStep {
	if x != nil {
		return x.Step
	}
	return TaskStep_AllStep
}

func (x *FileListCutOffTaskRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FileListCutOffTaskRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FileListCutOffTaskRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *FileListCutOffTaskRequest) GetDir() SortDirection {
	if x != nil {
		return x.Dir
	}
	return SortDirection_DESC
}

func (x *FileListCutOffTaskRequest) GetFilter() *ListCutOffTaskRequest_TaskListFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *FileListCutOffTaskRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *FileListCutOffTaskRequest) GetMyTaskOnly() bool {
	if x != nil {
		return x.MyTaskOnly
	}
	return false
}

func (x *FileListCutOffTaskRequest) GetFileFormat() FileListCutOffTaskRequest_Formats {
	if x != nil {
		return x.FileFormat
	}
	return FileListCutOffTaskRequest_null
}

type GetCutOffTaskByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *GetCutOffTaskByIDRequest) Reset() {
	*x = GetCutOffTaskByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCutOffTaskByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCutOffTaskByIDRequest) ProtoMessage() {}

func (x *GetCutOffTaskByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCutOffTaskByIDRequest.ProtoReflect.Descriptor instead.
func (*GetCutOffTaskByIDRequest) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{16}
}

func (x *GetCutOffTaskByIDRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type GetCutOffTaskByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool      `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *TaskData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCutOffTaskByIDResponse) Reset() {
	*x = GetCutOffTaskByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCutOffTaskByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCutOffTaskByIDResponse) ProtoMessage() {}

func (x *GetCutOffTaskByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCutOffTaskByIDResponse.ProtoReflect.Descriptor instead.
func (*GetCutOffTaskByIDResponse) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{17}
}

func (x *GetCutOffTaskByIDResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *GetCutOffTaskByIDResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCutOffTaskByIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCutOffTaskByIDResponse) GetData() *TaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCutOffDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int32                                 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page   int32                                 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Sort   string                                `protobuf:"bytes,3,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir    SortDirection                         `protobuf:"varint,4,opt,name=dir,proto3,enum=cut.off.service.v1.SortDirection" json:"dir,omitempty"`
	Filter *ListCutOffDataRequest_DataListFilter `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	Search string                                `protobuf:"bytes,6,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *ListCutOffDataRequest) Reset() {
	*x = ListCutOffDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCutOffDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCutOffDataRequest) ProtoMessage() {}

func (x *ListCutOffDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCutOffDataRequest.ProtoReflect.Descriptor instead.
func (*ListCutOffDataRequest) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{18}
}

func (x *ListCutOffDataRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListCutOffDataRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCutOffDataRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *ListCutOffDataRequest) GetDir() SortDirection {
	if x != nil {
		return x.Dir
	}
	return SortDirection_DESC
}

func (x *ListCutOffDataRequest) GetFilter() *ListCutOffDataRequest_DataListFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListCutOffDataRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type ListCutOffDataScheduleTodayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product string `protobuf:"bytes,6,opt,name=Product,proto3" json:"Product,omitempty"`
}

func (x *ListCutOffDataScheduleTodayRequest) Reset() {
	*x = ListCutOffDataScheduleTodayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCutOffDataScheduleTodayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCutOffDataScheduleTodayRequest) ProtoMessage() {}

func (x *ListCutOffDataScheduleTodayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCutOffDataScheduleTodayRequest.ProtoReflect.Descriptor instead.
func (*ListCutOffDataScheduleTodayRequest) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{19}
}

func (x *ListCutOffDataScheduleTodayRequest) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

type ListCutOffDataScheduleTodayRespons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error            bool                   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code             uint32                 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message          string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	TimeExecute      *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=timeExecute,proto3" json:"timeExecute,omitempty"`
	CutOffAvaibility bool                   `protobuf:"varint,6,opt,name=cutOffAvaibility,proto3" json:"cutOffAvaibility,omitempty"`
}

func (x *ListCutOffDataScheduleTodayRespons) Reset() {
	*x = ListCutOffDataScheduleTodayRespons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCutOffDataScheduleTodayRespons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCutOffDataScheduleTodayRespons) ProtoMessage() {}

func (x *ListCutOffDataScheduleTodayRespons) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCutOffDataScheduleTodayRespons.ProtoReflect.Descriptor instead.
func (*ListCutOffDataScheduleTodayRespons) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{20}
}

func (x *ListCutOffDataScheduleTodayRespons) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ListCutOffDataScheduleTodayRespons) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCutOffDataScheduleTodayRespons) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCutOffDataScheduleTodayRespons) GetTimeExecute() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeExecute
	}
	return nil
}

func (x *ListCutOffDataScheduleTodayRespons) GetCutOffAvaibility() bool {
	if x != nil {
		return x.CutOffAvaibility
	}
	return false
}

type ListCutOffDataScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product string `protobuf:"bytes,6,opt,name=Product,proto3" json:"Product,omitempty"`
}

func (x *ListCutOffDataScheduleRequest) Reset() {
	*x = ListCutOffDataScheduleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCutOffDataScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCutOffDataScheduleRequest) ProtoMessage() {}

func (x *ListCutOffDataScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCutOffDataScheduleRequest.ProtoReflect.Descriptor instead.
func (*ListCutOffDataScheduleRequest) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{21}
}

func (x *ListCutOffDataScheduleRequest) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

type Dayproduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ScheduleTime []*ScheduleTime `protobuf:"bytes,2,rep,name=scheduleTime,proto3" json:"scheduleTime,omitempty"`
}

func (x *Dayproduct) Reset() {
	*x = Dayproduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dayproduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dayproduct) ProtoMessage() {}

func (x *Dayproduct) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dayproduct.ProtoReflect.Descriptor instead.
func (*Dayproduct) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{22}
}

func (x *Dayproduct) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Dayproduct) GetScheduleTime() []*ScheduleTime {
	if x != nil {
		return x.ScheduleTime
	}
	return nil
}

type ScheduledCutOff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day     string        `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`
	Product []*Dayproduct `protobuf:"bytes,2,rep,name=product,proto3" json:"product,omitempty"`
}

func (x *ScheduledCutOff) Reset() {
	*x = ScheduledCutOff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledCutOff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledCutOff) ProtoMessage() {}

func (x *ScheduledCutOff) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledCutOff.ProtoReflect.Descriptor instead.
func (*ScheduledCutOff) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{23}
}

func (x *ScheduledCutOff) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *ScheduledCutOff) GetProduct() []*Dayproduct {
	if x != nil {
		return x.Product
	}
	return nil
}

type ListCutOffScheduledDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32              `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*ScheduledCutOff  `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListCutOffScheduledDataResponse) Reset() {
	*x = ListCutOffScheduledDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCutOffScheduledDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCutOffScheduledDataResponse) ProtoMessage() {}

func (x *ListCutOffScheduledDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCutOffScheduledDataResponse.ProtoReflect.Descriptor instead.
func (*ListCutOffScheduledDataResponse) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{24}
}

func (x *ListCutOffScheduledDataResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ListCutOffScheduledDataResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCutOffScheduledDataResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCutOffScheduledDataResponse) GetData() []*ScheduledCutOff {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListCutOffScheduledDataResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ScheduleTimeByTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime string   `protobuf:"bytes,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   string   `protobuf:"bytes,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Module    []string `protobuf:"bytes,3,rep,name=module,proto3" json:"module,omitempty"`
}

func (x *ScheduleTimeByTime) Reset() {
	*x = ScheduleTimeByTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleTimeByTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleTimeByTime) ProtoMessage() {}

func (x *ScheduleTimeByTime) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleTimeByTime.ProtoReflect.Descriptor instead.
func (*ScheduleTimeByTime) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{25}
}

func (x *ScheduleTimeByTime) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ScheduleTimeByTime) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ScheduleTimeByTime) GetModule() []string {
	if x != nil {
		return x.Module
	}
	return nil
}

type ScheduledCutOffByTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day     string                `protobuf:"bytes,1,opt,name=day,proto3" json:"day,omitempty"`
	TimeDay []*ScheduleTimeByTime `protobuf:"bytes,2,rep,name=timeDay,proto3" json:"timeDay,omitempty"`
}

func (x *ScheduledCutOffByTime) Reset() {
	*x = ScheduledCutOffByTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledCutOffByTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledCutOffByTime) ProtoMessage() {}

func (x *ScheduledCutOffByTime) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledCutOffByTime.ProtoReflect.Descriptor instead.
func (*ScheduledCutOffByTime) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{26}
}

func (x *ScheduledCutOffByTime) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *ScheduledCutOffByTime) GetTimeDay() []*ScheduleTimeByTime {
	if x != nil {
		return x.TimeDay
	}
	return nil
}

type ListCutOffScheduledDataByTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                     `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32                   `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string                   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*ScheduledCutOffByTime `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *PaginationResponse      `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListCutOffScheduledDataByTimeResponse) Reset() {
	*x = ListCutOffScheduledDataByTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCutOffScheduledDataByTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCutOffScheduledDataByTimeResponse) ProtoMessage() {}

func (x *ListCutOffScheduledDataByTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCutOffScheduledDataByTimeResponse.ProtoReflect.Descriptor instead.
func (*ListCutOffScheduledDataByTimeResponse) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{27}
}

func (x *ListCutOffScheduledDataByTimeResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ListCutOffScheduledDataByTimeResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCutOffScheduledDataByTimeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCutOffScheduledDataByTimeResponse) GetData() []*ScheduledCutOffByTime {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListCutOffScheduledDataByTimeResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListCutOffDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32              `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*CutOffData       `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListCutOffDataResponse) Reset() {
	*x = ListCutOffDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCutOffDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCutOffDataResponse) ProtoMessage() {}

func (x *ListCutOffDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCutOffDataResponse.ProtoReflect.Descriptor instead.
func (*ListCutOffDataResponse) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{28}
}

func (x *ListCutOffDataResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ListCutOffDataResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCutOffDataResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCutOffDataResponse) GetData() []*CutOffData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListCutOffDataResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type CutOffTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleID   uint64 `protobuf:"varint,1,opt,name=scheduleID,proto3" json:"scheduleID,omitempty"`
	ScheduleName string `protobuf:"bytes,2,opt,name=scheduleName,proto3" json:"scheduleName,omitempty"`
}

func (x *CutOffTemplate) Reset() {
	*x = CutOffTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CutOffTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CutOffTemplate) ProtoMessage() {}

func (x *CutOffTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CutOffTemplate.ProtoReflect.Descriptor instead.
func (*CutOffTemplate) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{29}
}

func (x *CutOffTemplate) GetScheduleID() uint64 {
	if x != nil {
		return x.ScheduleID
	}
	return 0
}

func (x *CutOffTemplate) GetScheduleName() string {
	if x != nil {
		return x.ScheduleName
	}
	return ""
}

type ListCutOffDataTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32              `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*CutOffTemplate   `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListCutOffDataTemplateResponse) Reset() {
	*x = ListCutOffDataTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCutOffDataTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCutOffDataTemplateResponse) ProtoMessage() {}

func (x *ListCutOffDataTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCutOffDataTemplateResponse.ProtoReflect.Descriptor instead.
func (*ListCutOffDataTemplateResponse) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{30}
}

func (x *ListCutOffDataTemplateResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ListCutOffDataTemplateResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCutOffDataTemplateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCutOffDataTemplateResponse) GetData() []*CutOffTemplate {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListCutOffDataTemplateResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetCutOffDataByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleID uint64 `protobuf:"varint,1,opt,name=ScheduleID,proto3" json:"ScheduleID,omitempty"`
}

func (x *GetCutOffDataByIDRequest) Reset() {
	*x = GetCutOffDataByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCutOffDataByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCutOffDataByIDRequest) ProtoMessage() {}

func (x *GetCutOffDataByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCutOffDataByIDRequest.ProtoReflect.Descriptor instead.
func (*GetCutOffDataByIDRequest) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{31}
}

func (x *GetCutOffDataByIDRequest) GetScheduleID() uint64 {
	if x != nil {
		return x.ScheduleID
	}
	return 0
}

type GetCutOffDataByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool        `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32      `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string      `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *CutOffData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCutOffDataByIDResponse) Reset() {
	*x = GetCutOffDataByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCutOffDataByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCutOffDataByIDResponse) ProtoMessage() {}

func (x *GetCutOffDataByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCutOffDataByIDResponse.ProtoReflect.Descriptor instead.
func (*GetCutOffDataByIDResponse) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{32}
}

func (x *GetCutOffDataByIDResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *GetCutOffDataByIDResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCutOffDataByIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCutOffDataByIDResponse) GetData() *CutOffData {
	if x != nil {
		return x.Data
	}
	return nil
}

type SaveCutOffDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *CutOffData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SaveCutOffDataRequest) Reset() {
	*x = SaveCutOffDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveCutOffDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveCutOffDataRequest) ProtoMessage() {}

func (x *SaveCutOffDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveCutOffDataRequest.ProtoReflect.Descriptor instead.
func (*SaveCutOffDataRequest) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{33}
}

func (x *SaveCutOffDataRequest) GetData() *CutOffData {
	if x != nil {
		return x.Data
	}
	return nil
}

type SaveCutOffDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool    `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string  `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *CutOff `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SaveCutOffDataResponse) Reset() {
	*x = SaveCutOffDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveCutOffDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveCutOffDataResponse) ProtoMessage() {}

func (x *SaveCutOffDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveCutOffDataResponse.ProtoReflect.Descriptor instead.
func (*SaveCutOffDataResponse) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{34}
}

func (x *SaveCutOffDataResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *SaveCutOffDataResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SaveCutOffDataResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SaveCutOffDataResponse) GetData() *CutOff {
	if x != nil {
		return x.Data
	}
	return nil
}

type ArrayString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool     `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32   `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    []string `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ArrayString) Reset() {
	*x = ArrayString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrayString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayString) ProtoMessage() {}

func (x *ArrayString) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayString.ProtoReflect.Descriptor instead.
func (*ArrayString) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{35}
}

func (x *ArrayString) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ArrayString) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ArrayString) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ArrayString) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

type HolidaySchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date    string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Label   string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Pattern string `protobuf:"bytes,3,opt,name=pattern,proto3" json:"pattern,omitempty"`
}

func (x *HolidaySchedule) Reset() {
	*x = HolidaySchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HolidaySchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HolidaySchedule) ProtoMessage() {}

func (x *HolidaySchedule) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HolidaySchedule.ProtoReflect.Descriptor instead.
func (*HolidaySchedule) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{36}
}

func (x *HolidaySchedule) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *HolidaySchedule) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *HolidaySchedule) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

type HolidayModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleID uint64 `protobuf:"varint,1,opt,name=moduleID,proto3" json:"moduleID,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *HolidayModule) Reset() {
	*x = HolidayModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HolidayModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HolidayModule) ProtoMessage() {}

func (x *HolidayModule) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HolidayModule.ProtoReflect.Descriptor instead.
func (*HolidayModule) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{37}
}

func (x *HolidayModule) GetModuleID() uint64 {
	if x != nil {
		return x.ModuleID
	}
	return 0
}

func (x *HolidayModule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetHolidayDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleID          uint64                 `protobuf:"varint,1,opt,name=scheduleID,proto3" json:"scheduleID,omitempty"`
	ScheduleName        string                 `protobuf:"bytes,2,opt,name=scheduleName,proto3" json:"scheduleName,omitempty"`
	ScheduleDescription string                 `protobuf:"bytes,3,opt,name=scheduleDescription,proto3" json:"scheduleDescription,omitempty"`
	ScheduleDate        string                 `protobuf:"bytes,4,opt,name=scheduleDate,proto3" json:"scheduleDate,omitempty"`
	ScheduleLabel       string                 `protobuf:"bytes,8,opt,name=scheduleLabel,proto3" json:"scheduleLabel,omitempty"`
	SchedulePattern     string                 `protobuf:"bytes,9,opt,name=schedulePattern,proto3" json:"schedulePattern,omitempty"`
	ModuleID            uint64                 `protobuf:"varint,5,opt,name=moduleID,proto3" json:"moduleID,omitempty"`
	ModuleName          string                 `protobuf:"bytes,10,opt,name=moduleName,proto3" json:"moduleName,omitempty"`
	Saved               bool                   `protobuf:"varint,6,opt,name=saved,proto3" json:"saved,omitempty"`
	Status              string                 `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	TaskID              uint64                 `protobuf:"varint,11,opt,name=taskID,proto3" json:"taskID,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CreatedByID         uint64                 `protobuf:"varint,17,opt,name=createdByID,proto3" json:"createdByID,omitempty"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	UpdatedByID         uint64                 `protobuf:"varint,19,opt,name=updatedByID,proto3" json:"updatedByID,omitempty"`
	DeletedAt           *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	DeletedByID         uint64                 `protobuf:"varint,21,opt,name=deletedByID,proto3" json:"deletedByID,omitempty"`
}

func (x *GetHolidayDataRes) Reset() {
	*x = GetHolidayDataRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHolidayDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHolidayDataRes) ProtoMessage() {}

func (x *GetHolidayDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHolidayDataRes.ProtoReflect.Descriptor instead.
func (*GetHolidayDataRes) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{38}
}

func (x *GetHolidayDataRes) GetScheduleID() uint64 {
	if x != nil {
		return x.ScheduleID
	}
	return 0
}

func (x *GetHolidayDataRes) GetScheduleName() string {
	if x != nil {
		return x.ScheduleName
	}
	return ""
}

func (x *GetHolidayDataRes) GetScheduleDescription() string {
	if x != nil {
		return x.ScheduleDescription
	}
	return ""
}

func (x *GetHolidayDataRes) GetScheduleDate() string {
	if x != nil {
		return x.ScheduleDate
	}
	return ""
}

func (x *GetHolidayDataRes) GetScheduleLabel() string {
	if x != nil {
		return x.ScheduleLabel
	}
	return ""
}

func (x *GetHolidayDataRes) GetSchedulePattern() string {
	if x != nil {
		return x.SchedulePattern
	}
	return ""
}

func (x *GetHolidayDataRes) GetModuleID() uint64 {
	if x != nil {
		return x.ModuleID
	}
	return 0
}

func (x *GetHolidayDataRes) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *GetHolidayDataRes) GetSaved() bool {
	if x != nil {
		return x.Saved
	}
	return false
}

func (x *GetHolidayDataRes) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetHolidayDataRes) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *GetHolidayDataRes) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetHolidayDataRes) GetCreatedByID() uint64 {
	if x != nil {
		return x.CreatedByID
	}
	return 0
}

func (x *GetHolidayDataRes) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GetHolidayDataRes) GetUpdatedByID() uint64 {
	if x != nil {
		return x.UpdatedByID
	}
	return 0
}

func (x *GetHolidayDataRes) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *GetHolidayDataRes) GetDeletedByID() uint64 {
	if x != nil {
		return x.DeletedByID
	}
	return 0
}

type HolidayData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleID          uint64                 `protobuf:"varint,1,opt,name=scheduleID,proto3" json:"scheduleID,omitempty"`
	ScheduleName        string                 `protobuf:"bytes,2,opt,name=scheduleName,proto3" json:"scheduleName,omitempty"`
	ScheduleDescription string                 `protobuf:"bytes,3,opt,name=scheduleDescription,proto3" json:"scheduleDescription,omitempty"`
	ScheduleDates       []*HolidaySchedule     `protobuf:"bytes,4,rep,name=scheduleDates,proto3" json:"scheduleDates,omitempty"`
	Modules             []*HolidayModule       `protobuf:"bytes,5,rep,name=modules,proto3" json:"modules,omitempty"`
	Saved               bool                   `protobuf:"varint,6,opt,name=saved,proto3" json:"saved,omitempty"`
	Status              string                 `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CreatedByID         uint64                 `protobuf:"varint,17,opt,name=createdByID,proto3" json:"createdByID,omitempty"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	UpdatedByID         uint64                 `protobuf:"varint,19,opt,name=updatedByID,proto3" json:"updatedByID,omitempty"`
	DeletedAt           *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	DeletedByID         uint64                 `protobuf:"varint,21,opt,name=deletedByID,proto3" json:"deletedByID,omitempty"`
}

func (x *HolidayData) Reset() {
	*x = HolidayData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HolidayData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HolidayData) ProtoMessage() {}

func (x *HolidayData) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HolidayData.ProtoReflect.Descriptor instead.
func (*HolidayData) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{39}
}

func (x *HolidayData) GetScheduleID() uint64 {
	if x != nil {
		return x.ScheduleID
	}
	return 0
}

func (x *HolidayData) GetScheduleName() string {
	if x != nil {
		return x.ScheduleName
	}
	return ""
}

func (x *HolidayData) GetScheduleDescription() string {
	if x != nil {
		return x.ScheduleDescription
	}
	return ""
}

func (x *HolidayData) GetScheduleDates() []*HolidaySchedule {
	if x != nil {
		return x.ScheduleDates
	}
	return nil
}

func (x *HolidayData) GetModules() []*HolidayModule {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *HolidayData) GetSaved() bool {
	if x != nil {
		return x.Saved
	}
	return false
}

func (x *HolidayData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HolidayData) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *HolidayData) GetCreatedByID() uint64 {
	if x != nil {
		return x.CreatedByID
	}
	return 0
}

func (x *HolidayData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *HolidayData) GetUpdatedByID() uint64 {
	if x != nil {
		return x.UpdatedByID
	}
	return 0
}

func (x *HolidayData) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *HolidayData) GetDeletedByID() uint64 {
	if x != nil {
		return x.DeletedByID
	}
	return 0
}

type HolidayTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task        `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Data *HolidayData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *HolidayTaskData) Reset() {
	*x = HolidayTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HolidayTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HolidayTaskData) ProtoMessage() {}

func (x *HolidayTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HolidayTaskData.ProtoReflect.Descriptor instead.
func (*HolidayTaskData) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{40}
}

func (x *HolidayTaskData) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *HolidayTaskData) GetData() *HolidayData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateHolidayTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data    *HolidayData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	TaskID  uint64       `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
	IsDraft bool         `protobuf:"varint,3,opt,name=isDraft,proto3" json:"isDraft,omitempty"`
}

func (x *CreateHolidayTaskRequest) Reset() {
	*x = CreateHolidayTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHolidayTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHolidayTaskRequest) ProtoMessage() {}

func (x *CreateHolidayTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHolidayTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateHolidayTaskRequest) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{41}
}

func (x *CreateHolidayTaskRequest) GetData() *HolidayData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateHolidayTaskRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CreateHolidayTaskRequest) GetIsDraft() bool {
	if x != nil {
		return x.IsDraft
	}
	return false
}

type CreateHolidayTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateHolidayTaskResponse) Reset() {
	*x = CreateHolidayTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHolidayTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHolidayTaskResponse) ProtoMessage() {}

func (x *CreateHolidayTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHolidayTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateHolidayTaskResponse) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{42}
}

func (x *CreateHolidayTaskResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *CreateHolidayTaskResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateHolidayTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetHolidayTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status TaskStatus    `protobuf:"varint,1,opt,name=status,proto3,enum=cut.off.service.v1.TaskStatus" json:"status,omitempty"`
	Step   TaskStep      `protobuf:"varint,2,opt,name=step,proto3,enum=cut.off.service.v1.TaskStep" json:"step,omitempty"`
	Limit  int32         `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page   int32         `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Sort   string        `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir    SortDirection `protobuf:"varint,6,opt,name=dir,proto3,enum=cut.off.service.v1.SortDirection" json:"dir,omitempty"`
	Filter string        `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	Query  string        `protobuf:"bytes,8,opt,name=query,proto3" json:"query,omitempty"`
	Search string        `protobuf:"bytes,9,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *GetHolidayTaskRequest) Reset() {
	*x = GetHolidayTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHolidayTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHolidayTaskRequest) ProtoMessage() {}

func (x *GetHolidayTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHolidayTaskRequest.ProtoReflect.Descriptor instead.
func (*GetHolidayTaskRequest) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{43}
}

func (x *GetHolidayTaskRequest) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_AllStatus
}

func (x *GetHolidayTaskRequest) GetStep() TaskStep {
	if x != nil {
		return x.Step
	}
	return TaskStep_AllStep
}

func (x *GetHolidayTaskRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetHolidayTaskRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetHolidayTaskRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *GetHolidayTaskRequest) GetDir() SortDirection {
	if x != nil {
		return x.Dir
	}
	return SortDirection_DESC
}

func (x *GetHolidayTaskRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *GetHolidayTaskRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetHolidayTaskRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type GetHolidayTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32              `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*HolidayTaskData  `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetHolidayTaskResponse) Reset() {
	*x = GetHolidayTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHolidayTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHolidayTaskResponse) ProtoMessage() {}

func (x *GetHolidayTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHolidayTaskResponse.ProtoReflect.Descriptor instead.
func (*GetHolidayTaskResponse) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{44}
}

func (x *GetHolidayTaskResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *GetHolidayTaskResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetHolidayTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetHolidayTaskResponse) GetData() []*HolidayTaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetHolidayTaskResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetHolidayTaskByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *GetHolidayTaskByIDRequest) Reset() {
	*x = GetHolidayTaskByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHolidayTaskByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHolidayTaskByIDRequest) ProtoMessage() {}

func (x *GetHolidayTaskByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHolidayTaskByIDRequest.ProtoReflect.Descriptor instead.
func (*GetHolidayTaskByIDRequest) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{45}
}

func (x *GetHolidayTaskByIDRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type GetHolidayTaskByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool             `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32           `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string           `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *HolidayTaskData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetHolidayTaskByIDResponse) Reset() {
	*x = GetHolidayTaskByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHolidayTaskByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHolidayTaskByIDResponse) ProtoMessage() {}

func (x *GetHolidayTaskByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHolidayTaskByIDResponse.ProtoReflect.Descriptor instead.
func (*GetHolidayTaskByIDResponse) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{46}
}

func (x *GetHolidayTaskByIDResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *GetHolidayTaskByIDResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetHolidayTaskByIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetHolidayTaskByIDResponse) GetData() *HolidayTaskData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetHolidayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Holiday  *Holiday      `protobuf:"bytes,1,opt,name=holiday,proto3" json:"holiday,omitempty"`
	Limit    int32         `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page     int32         `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Sort     string        `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir      SortDirection `protobuf:"varint,5,opt,name=dir,proto3,enum=cut.off.service.v1.SortDirection" json:"dir,omitempty"`
	Filter   string        `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
	Query    string        `protobuf:"bytes,7,opt,name=query,proto3" json:"query,omitempty"`
	FilterOr string        `protobuf:"bytes,8,opt,name=filterOr,proto3" json:"filterOr,omitempty"`
	In       string        `protobuf:"bytes,9,opt,name=in,proto3" json:"in,omitempty"`
}

func (x *GetHolidayRequest) Reset() {
	*x = GetHolidayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHolidayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHolidayRequest) ProtoMessage() {}

func (x *GetHolidayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHolidayRequest.ProtoReflect.Descriptor instead.
func (*GetHolidayRequest) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{47}
}

func (x *GetHolidayRequest) GetHoliday() *Holiday {
	if x != nil {
		return x.Holiday
	}
	return nil
}

func (x *GetHolidayRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetHolidayRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetHolidayRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *GetHolidayRequest) GetDir() SortDirection {
	if x != nil {
		return x.Dir
	}
	return SortDirection_DESC
}

func (x *GetHolidayRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *GetHolidayRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetHolidayRequest) GetFilterOr() string {
	if x != nil {
		return x.FilterOr
	}
	return ""
}

func (x *GetHolidayRequest) GetIn() string {
	if x != nil {
		return x.In
	}
	return ""
}

type GetHolidayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                 `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32               `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string               `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*GetHolidayDataRes `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *PaginationResponse  `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetHolidayResponse) Reset() {
	*x = GetHolidayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHolidayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHolidayResponse) ProtoMessage() {}

func (x *GetHolidayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHolidayResponse.ProtoReflect.Descriptor instead.
func (*GetHolidayResponse) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{48}
}

func (x *GetHolidayResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *GetHolidayResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetHolidayResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetHolidayResponse) GetData() []*GetHolidayDataRes {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetHolidayResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetHolidayByFeatureIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeatureID uint64 `protobuf:"varint,1,opt,name=featureID,proto3" json:"featureID,omitempty"`
}

func (x *GetHolidayByFeatureIDRequest) Reset() {
	*x = GetHolidayByFeatureIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHolidayByFeatureIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHolidayByFeatureIDRequest) ProtoMessage() {}

func (x *GetHolidayByFeatureIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHolidayByFeatureIDRequest.ProtoReflect.Descriptor instead.
func (*GetHolidayByFeatureIDRequest) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{49}
}

func (x *GetHolidayByFeatureIDRequest) GetFeatureID() uint64 {
	if x != nil {
		return x.FeatureID
	}
	return 0
}

type GetHolidayByFeatureIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool         `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32       `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string       `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *HolidayData `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetHolidayByFeatureIDResponse) Reset() {
	*x = GetHolidayByFeatureIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHolidayByFeatureIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHolidayByFeatureIDResponse) ProtoMessage() {}

func (x *GetHolidayByFeatureIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHolidayByFeatureIDResponse.ProtoReflect.Descriptor instead.
func (*GetHolidayByFeatureIDResponse) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{50}
}

func (x *GetHolidayByFeatureIDResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *GetHolidayByFeatureIDResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetHolidayByFeatureIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetHolidayByFeatureIDResponse) GetData() *HolidayData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateHolidayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   *HolidayData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	TaskID uint64       `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *CreateHolidayRequest) Reset() {
	*x = CreateHolidayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHolidayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHolidayRequest) ProtoMessage() {}

func (x *CreateHolidayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHolidayRequest.ProtoReflect.Descriptor instead.
func (*CreateHolidayRequest) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{51}
}

func (x *CreateHolidayRequest) GetData() *HolidayData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateHolidayRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type CreateHolidayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateHolidayResponse) Reset() {
	*x = CreateHolidayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateHolidayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHolidayResponse) ProtoMessage() {}

func (x *CreateHolidayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHolidayResponse.ProtoReflect.Descriptor instead.
func (*CreateHolidayResponse) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{52}
}

func (x *CreateHolidayResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *CreateHolidayResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateHolidayResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteHolidayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID uint64 `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *DeleteHolidayRequest) Reset() {
	*x = DeleteHolidayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteHolidayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteHolidayRequest) ProtoMessage() {}

func (x *DeleteHolidayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteHolidayRequest.ProtoReflect.Descriptor instead.
func (*DeleteHolidayRequest) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{53}
}

func (x *DeleteHolidayRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type HolidayTaskActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID  uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Action  string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	Reasons string `protobuf:"bytes,4,opt,name=reasons,proto3" json:"reasons,omitempty"`
}

func (x *HolidayTaskActionRequest) Reset() {
	*x = HolidayTaskActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HolidayTaskActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HolidayTaskActionRequest) ProtoMessage() {}

func (x *HolidayTaskActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HolidayTaskActionRequest.ProtoReflect.Descriptor instead.
func (*HolidayTaskActionRequest) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{54}
}

func (x *HolidayTaskActionRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *HolidayTaskActionRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *HolidayTaskActionRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *HolidayTaskActionRequest) GetReasons() string {
	if x != nil {
		return x.Reasons
	}
	return ""
}

type HolidayTaskActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Task  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *HolidayTaskActionResponse) Reset() {
	*x = HolidayTaskActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HolidayTaskActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HolidayTaskActionResponse) ProtoMessage() {}

func (x *HolidayTaskActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HolidayTaskActionResponse.ProtoReflect.Descriptor instead.
func (*HolidayTaskActionResponse) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{55}
}

func (x *HolidayTaskActionResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *HolidayTaskActionResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *HolidayTaskActionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HolidayTaskActionResponse) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetHolidaySchedulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit    int32         `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page     int32         `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Sort     string        `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir      SortDirection `protobuf:"varint,5,opt,name=dir,proto3,enum=cut.off.service.v1.SortDirection" json:"dir,omitempty"`
	Filter   string        `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
	Query    string        `protobuf:"bytes,7,opt,name=query,proto3" json:"query,omitempty"`
	FilterOr string        `protobuf:"bytes,8,opt,name=filterOr,proto3" json:"filterOr,omitempty"`
	In       string        `protobuf:"bytes,9,opt,name=in,proto3" json:"in,omitempty"`
}

func (x *GetHolidaySchedulesRequest) Reset() {
	*x = GetHolidaySchedulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHolidaySchedulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHolidaySchedulesRequest) ProtoMessage() {}

func (x *GetHolidaySchedulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHolidaySchedulesRequest.ProtoReflect.Descriptor instead.
func (*GetHolidaySchedulesRequest) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{56}
}

func (x *GetHolidaySchedulesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetHolidaySchedulesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetHolidaySchedulesRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *GetHolidaySchedulesRequest) GetDir() SortDirection {
	if x != nil {
		return x.Dir
	}
	return SortDirection_DESC
}

func (x *GetHolidaySchedulesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *GetHolidaySchedulesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetHolidaySchedulesRequest) GetFilterOr() string {
	if x != nil {
		return x.FilterOr
	}
	return ""
}

func (x *GetHolidaySchedulesRequest) GetIn() string {
	if x != nil {
		return x.In
	}
	return ""
}

type GetHolidaySchedulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                  `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32                `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string                `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*HolidayScheduleRes `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *PaginationResponse   `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *GetHolidaySchedulesResponse) Reset() {
	*x = GetHolidaySchedulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHolidaySchedulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHolidaySchedulesResponse) ProtoMessage() {}

func (x *GetHolidaySchedulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHolidaySchedulesResponse.ProtoReflect.Descriptor instead.
func (*GetHolidaySchedulesResponse) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{57}
}

func (x *GetHolidaySchedulesResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *GetHolidaySchedulesResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetHolidaySchedulesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetHolidaySchedulesResponse) GetData() []*HolidayScheduleRes {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetHolidaySchedulesResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type HolidayScheduleRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date       string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Label      string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Pattern    string `protobuf:"bytes,3,opt,name=pattern,proto3" json:"pattern,omitempty"`
	ModuleID   uint64 `protobuf:"varint,4,opt,name=moduleID,proto3" json:"moduleID,omitempty"`
	ModuleName string `protobuf:"bytes,5,opt,name=moduleName,proto3" json:"moduleName,omitempty"`
}

func (x *HolidayScheduleRes) Reset() {
	*x = HolidayScheduleRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HolidayScheduleRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HolidayScheduleRes) ProtoMessage() {}

func (x *HolidayScheduleRes) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HolidayScheduleRes.ProtoReflect.Descriptor instead.
func (*HolidayScheduleRes) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{58}
}

func (x *HolidayScheduleRes) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *HolidayScheduleRes) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *HolidayScheduleRes) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *HolidayScheduleRes) GetModuleID() uint64 {
	if x != nil {
		return x.ModuleID
	}
	return 0
}

func (x *HolidayScheduleRes) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

type DownloadListHolidayTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileFormat DownloadListHolidayTaskRequest_Formats `protobuf:"varint,1,opt,name=fileFormat,proto3,enum=cut.off.service.v1.DownloadListHolidayTaskRequest_Formats" json:"fileFormat,omitempty"`
	Status     TaskStatus                             `protobuf:"varint,2,opt,name=status,proto3,enum=cut.off.service.v1.TaskStatus" json:"status,omitempty"`
	Step       TaskStep                               `protobuf:"varint,3,opt,name=step,proto3,enum=cut.off.service.v1.TaskStep" json:"step,omitempty"`
	Search     string                                 `protobuf:"bytes,10,opt,name=search,proto3" json:"search,omitempty"`
	Limit      int32                                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Page       int32                                  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	Sort       string                                 `protobuf:"bytes,6,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir        SortDirection                          `protobuf:"varint,7,opt,name=dir,proto3,enum=cut.off.service.v1.SortDirection" json:"dir,omitempty"`
	Filter     string                                 `protobuf:"bytes,8,opt,name=filter,proto3" json:"filter,omitempty"`
	Query      string                                 `protobuf:"bytes,9,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *DownloadListHolidayTaskRequest) Reset() {
	*x = DownloadListHolidayTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadListHolidayTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadListHolidayTaskRequest) ProtoMessage() {}

func (x *DownloadListHolidayTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadListHolidayTaskRequest.ProtoReflect.Descriptor instead.
func (*DownloadListHolidayTaskRequest) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{59}
}

func (x *DownloadListHolidayTaskRequest) GetFileFormat() DownloadListHolidayTaskRequest_Formats {
	if x != nil {
		return x.FileFormat
	}
	return DownloadListHolidayTaskRequest_null
}

func (x *DownloadListHolidayTaskRequest) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_AllStatus
}

func (x *DownloadListHolidayTaskRequest) GetStep() TaskStep {
	if x != nil {
		return x.Step
	}
	return TaskStep_AllStep
}

func (x *DownloadListHolidayTaskRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *DownloadListHolidayTaskRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *DownloadListHolidayTaskRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *DownloadListHolidayTaskRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *DownloadListHolidayTaskRequest) GetDir() SortDirection {
	if x != nil {
		return x.Dir
	}
	return SortDirection_DESC
}

func (x *DownloadListHolidayTaskRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *DownloadListHolidayTaskRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type HolidayNotificationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	USERNAME_MAKER       string `protobuf:"bytes,1,opt,name=USERNAME_MAKER,proto3" json:"USERNAME_MAKER,omitempty"`
	USERNAME_APPROVER    string `protobuf:"bytes,2,opt,name=USERNAME_APPROVER,proto3" json:"USERNAME_APPROVER,omitempty"`
	CREATED_DATETIME     string `protobuf:"bytes,3,opt,name=CREATED_DATETIME,proto3" json:"CREATED_DATETIME,omitempty"`
	CREATED_DATE         string `protobuf:"bytes,4,opt,name=CREATED_DATE,proto3" json:"CREATED_DATE,omitempty"`
	CREATED_TIME         string `protobuf:"bytes,5,opt,name=CREATED_TIME,proto3" json:"CREATED_TIME,omitempty"`
	EVENT_DATETIME       string `protobuf:"bytes,6,opt,name=EVENT_DATETIME,proto3" json:"EVENT_DATETIME,omitempty"`
	EVENT_DATE           string `protobuf:"bytes,7,opt,name=EVENT_DATE,proto3" json:"EVENT_DATE,omitempty"`
	EVENT_TIME           string `protobuf:"bytes,8,opt,name=EVENT_TIME,proto3" json:"EVENT_TIME,omitempty"`
	SCHEDULE_NAME        string `protobuf:"bytes,9,opt,name=SCHEDULE_NAME,proto3" json:"SCHEDULE_NAME,omitempty"`
	SCHEDULE_DESCRIPTION string `protobuf:"bytes,10,opt,name=SCHEDULE_DESCRIPTION,proto3" json:"SCHEDULE_DESCRIPTION,omitempty"`
	SCHEDULE_MODULES     string `protobuf:"bytes,11,opt,name=SCHEDULE_MODULES,proto3" json:"SCHEDULE_MODULES,omitempty"`
	SCHEDULE_DATES       string `protobuf:"bytes,12,opt,name=SCHEDULE_DATES,proto3" json:"SCHEDULE_DATES,omitempty"`
	// string CURRENCY_NAME = 13 [json_name='CURRENCY_NAME'];
	TASK_ID               string `protobuf:"bytes,14,opt,name=TASK_ID,proto3" json:"TASK_ID,omitempty"`
	USERNAME_REJECTOR     string `protobuf:"bytes,15,opt,name=USERNAME_REJECTOR,proto3" json:"USERNAME_REJECTOR,omitempty"`
	COMPANY_NAME          string `protobuf:"bytes,16,opt,name=COMPANY_NAME,proto3" json:"COMPANY_NAME,omitempty"`
	USERNAME_CHECKER      string `protobuf:"bytes,17,opt,name=USERNAME_CHECKER,proto3" json:"USERNAME_CHECKER,omitempty"`
	USERNAME_RELEASER     string `protobuf:"bytes,18,opt,name=USERNAME_RELEASER,proto3" json:"USERNAME_RELEASER,omitempty"`
	MODULE                string `protobuf:"bytes,19,opt,name=MODULE,proto3" json:"MODULE,omitempty"`
	MESSAGE               string `protobuf:"bytes,20,opt,name=MESSAGE,proto3" json:"MESSAGE,omitempty"`
	TEMPLATE              string `protobuf:"bytes,21,opt,name=TEMPLATE,proto3" json:"TEMPLATE,omitempty"`
	STATUS_SEND           string `protobuf:"bytes,22,opt,name=STATUS_SEND,proto3" json:"STATUS_SEND,omitempty"`
	STATUS_ACTION         string `protobuf:"bytes,23,opt,name=STATUS_ACTION,proto3" json:"STATUS_ACTION,omitempty"`
	STATUS_REQUEST_DELETE string `protobuf:"bytes,24,opt,name=STATUS_REQUEST_DELETE,proto3" json:"STATUS_REQUEST_DELETE,omitempty"`
	REASON                string `protobuf:"bytes,25,opt,name=REASON,proto3" json:"REASON,omitempty"`
	COMMENT               string `protobuf:"bytes,26,opt,name=COMMENT,proto3" json:"COMMENT,omitempty"`
}

func (x *HolidayNotificationData) Reset() {
	*x = HolidayNotificationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HolidayNotificationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HolidayNotificationData) ProtoMessage() {}

func (x *HolidayNotificationData) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HolidayNotificationData.ProtoReflect.Descriptor instead.
func (*HolidayNotificationData) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{60}
}

func (x *HolidayNotificationData) GetUSERNAME_MAKER() string {
	if x != nil {
		return x.USERNAME_MAKER
	}
	return ""
}

func (x *HolidayNotificationData) GetUSERNAME_APPROVER() string {
	if x != nil {
		return x.USERNAME_APPROVER
	}
	return ""
}

func (x *HolidayNotificationData) GetCREATED_DATETIME() string {
	if x != nil {
		return x.CREATED_DATETIME
	}
	return ""
}

func (x *HolidayNotificationData) GetCREATED_DATE() string {
	if x != nil {
		return x.CREATED_DATE
	}
	return ""
}

func (x *HolidayNotificationData) GetCREATED_TIME() string {
	if x != nil {
		return x.CREATED_TIME
	}
	return ""
}

func (x *HolidayNotificationData) GetEVENT_DATETIME() string {
	if x != nil {
		return x.EVENT_DATETIME
	}
	return ""
}

func (x *HolidayNotificationData) GetEVENT_DATE() string {
	if x != nil {
		return x.EVENT_DATE
	}
	return ""
}

func (x *HolidayNotificationData) GetEVENT_TIME() string {
	if x != nil {
		return x.EVENT_TIME
	}
	return ""
}

func (x *HolidayNotificationData) GetSCHEDULE_NAME() string {
	if x != nil {
		return x.SCHEDULE_NAME
	}
	return ""
}

func (x *HolidayNotificationData) GetSCHEDULE_DESCRIPTION() string {
	if x != nil {
		return x.SCHEDULE_DESCRIPTION
	}
	return ""
}

func (x *HolidayNotificationData) GetSCHEDULE_MODULES() string {
	if x != nil {
		return x.SCHEDULE_MODULES
	}
	return ""
}

func (x *HolidayNotificationData) GetSCHEDULE_DATES() string {
	if x != nil {
		return x.SCHEDULE_DATES
	}
	return ""
}

func (x *HolidayNotificationData) GetTASK_ID() string {
	if x != nil {
		return x.TASK_ID
	}
	return ""
}

func (x *HolidayNotificationData) GetUSERNAME_REJECTOR() string {
	if x != nil {
		return x.USERNAME_REJECTOR
	}
	return ""
}

func (x *HolidayNotificationData) GetCOMPANY_NAME() string {
	if x != nil {
		return x.COMPANY_NAME
	}
	return ""
}

func (x *HolidayNotificationData) GetUSERNAME_CHECKER() string {
	if x != nil {
		return x.USERNAME_CHECKER
	}
	return ""
}

func (x *HolidayNotificationData) GetUSERNAME_RELEASER() string {
	if x != nil {
		return x.USERNAME_RELEASER
	}
	return ""
}

func (x *HolidayNotificationData) GetMODULE() string {
	if x != nil {
		return x.MODULE
	}
	return ""
}

func (x *HolidayNotificationData) GetMESSAGE() string {
	if x != nil {
		return x.MESSAGE
	}
	return ""
}

func (x *HolidayNotificationData) GetTEMPLATE() string {
	if x != nil {
		return x.TEMPLATE
	}
	return ""
}

func (x *HolidayNotificationData) GetSTATUS_SEND() string {
	if x != nil {
		return x.STATUS_SEND
	}
	return ""
}

func (x *HolidayNotificationData) GetSTATUS_ACTION() string {
	if x != nil {
		return x.STATUS_ACTION
	}
	return ""
}

func (x *HolidayNotificationData) GetSTATUS_REQUEST_DELETE() string {
	if x != nil {
		return x.STATUS_REQUEST_DELETE
	}
	return ""
}

func (x *HolidayNotificationData) GetREASON() string {
	if x != nil {
		return x.REASON
	}
	return ""
}

func (x *HolidayNotificationData) GetCOMMENT() string {
	if x != nil {
		return x.COMMENT
	}
	return ""
}

type CutOffNotificationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	USERNAME_MAKER       string `protobuf:"bytes,1,opt,name=USERNAME_MAKER,proto3" json:"USERNAME_MAKER,omitempty"`
	USERNAME_APPROVER    string `protobuf:"bytes,2,opt,name=USERNAME_APPROVER,proto3" json:"USERNAME_APPROVER,omitempty"`
	CREATED_DATETIME     string `protobuf:"bytes,3,opt,name=CREATED_DATETIME,proto3" json:"CREATED_DATETIME,omitempty"`
	CREATED_DATE         string `protobuf:"bytes,4,opt,name=CREATED_DATE,proto3" json:"CREATED_DATE,omitempty"`
	CREATED_TIME         string `protobuf:"bytes,5,opt,name=CREATED_TIME,proto3" json:"CREATED_TIME,omitempty"`
	EVENT_DATETIME       string `protobuf:"bytes,6,opt,name=EVENT_DATETIME,proto3" json:"EVENT_DATETIME,omitempty"`
	EVENT_DATE           string `protobuf:"bytes,7,opt,name=EVENT_DATE,proto3" json:"EVENT_DATE,omitempty"`
	EVENT_TIME           string `protobuf:"bytes,8,opt,name=EVENT_TIME,proto3" json:"EVENT_TIME,omitempty"`
	SCHEDULE_NAME        string `protobuf:"bytes,9,opt,name=SCHEDULE_NAME,proto3" json:"SCHEDULE_NAME,omitempty"`
	SCHEDULE_DESCRIPTION string `protobuf:"bytes,10,opt,name=SCHEDULE_DESCRIPTION,proto3" json:"SCHEDULE_DESCRIPTION,omitempty"`
	SCHEDULE_MODULES     string `protobuf:"bytes,11,opt,name=SCHEDULE_MODULES,proto3" json:"SCHEDULE_MODULES,omitempty"`
	SCHEDULE_TIME        string `protobuf:"bytes,12,opt,name=SCHEDULE_TIME,proto3" json:"SCHEDULE_TIME,omitempty"`
	SCHEDULE_DAY         string `protobuf:"bytes,13,opt,name=SCHEDULE_DAY,proto3" json:"SCHEDULE_DAY,omitempty"`
	// string CURRENCY_NAME = 13 [json_name='CURRENCY_NAME'];
	TASK_ID               string `protobuf:"bytes,14,opt,name=TASK_ID,proto3" json:"TASK_ID,omitempty"`
	USERNAME_REJECTOR     string `protobuf:"bytes,15,opt,name=USERNAME_REJECTOR,proto3" json:"USERNAME_REJECTOR,omitempty"`
	COMPANY_NAME          string `protobuf:"bytes,16,opt,name=COMPANY_NAME,proto3" json:"COMPANY_NAME,omitempty"`
	USERNAME_CHECKER      string `protobuf:"bytes,17,opt,name=USERNAME_CHECKER,proto3" json:"USERNAME_CHECKER,omitempty"`
	USERNAME_RELEASER     string `protobuf:"bytes,18,opt,name=USERNAME_RELEASER,proto3" json:"USERNAME_RELEASER,omitempty"`
	MODULE                string `protobuf:"bytes,19,opt,name=MODULE,proto3" json:"MODULE,omitempty"`
	MESSAGE               string `protobuf:"bytes,20,opt,name=MESSAGE,proto3" json:"MESSAGE,omitempty"`
	TEMPLATE              string `protobuf:"bytes,21,opt,name=TEMPLATE,proto3" json:"TEMPLATE,omitempty"`
	STATUS_SEND           string `protobuf:"bytes,22,opt,name=STATUS_SEND,proto3" json:"STATUS_SEND,omitempty"`
	STATUS_ACTION         string `protobuf:"bytes,23,opt,name=STATUS_ACTION,proto3" json:"STATUS_ACTION,omitempty"`
	STATUS_REQUEST_DELETE string `protobuf:"bytes,24,opt,name=STATUS_REQUEST_DELETE,proto3" json:"STATUS_REQUEST_DELETE,omitempty"`
	REASON                string `protobuf:"bytes,25,opt,name=REASON,proto3" json:"REASON,omitempty"`
	COMMENT               string `protobuf:"bytes,26,opt,name=COMMENT,proto3" json:"COMMENT,omitempty"`
}

func (x *CutOffNotificationData) Reset() {
	*x = CutOffNotificationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CutOffNotificationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CutOffNotificationData) ProtoMessage() {}

func (x *CutOffNotificationData) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CutOffNotificationData.ProtoReflect.Descriptor instead.
func (*CutOffNotificationData) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{61}
}

func (x *CutOffNotificationData) GetUSERNAME_MAKER() string {
	if x != nil {
		return x.USERNAME_MAKER
	}
	return ""
}

func (x *CutOffNotificationData) GetUSERNAME_APPROVER() string {
	if x != nil {
		return x.USERNAME_APPROVER
	}
	return ""
}

func (x *CutOffNotificationData) GetCREATED_DATETIME() string {
	if x != nil {
		return x.CREATED_DATETIME
	}
	return ""
}

func (x *CutOffNotificationData) GetCREATED_DATE() string {
	if x != nil {
		return x.CREATED_DATE
	}
	return ""
}

func (x *CutOffNotificationData) GetCREATED_TIME() string {
	if x != nil {
		return x.CREATED_TIME
	}
	return ""
}

func (x *CutOffNotificationData) GetEVENT_DATETIME() string {
	if x != nil {
		return x.EVENT_DATETIME
	}
	return ""
}

func (x *CutOffNotificationData) GetEVENT_DATE() string {
	if x != nil {
		return x.EVENT_DATE
	}
	return ""
}

func (x *CutOffNotificationData) GetEVENT_TIME() string {
	if x != nil {
		return x.EVENT_TIME
	}
	return ""
}

func (x *CutOffNotificationData) GetSCHEDULE_NAME() string {
	if x != nil {
		return x.SCHEDULE_NAME
	}
	return ""
}

func (x *CutOffNotificationData) GetSCHEDULE_DESCRIPTION() string {
	if x != nil {
		return x.SCHEDULE_DESCRIPTION
	}
	return ""
}

func (x *CutOffNotificationData) GetSCHEDULE_MODULES() string {
	if x != nil {
		return x.SCHEDULE_MODULES
	}
	return ""
}

func (x *CutOffNotificationData) GetSCHEDULE_TIME() string {
	if x != nil {
		return x.SCHEDULE_TIME
	}
	return ""
}

func (x *CutOffNotificationData) GetSCHEDULE_DAY() string {
	if x != nil {
		return x.SCHEDULE_DAY
	}
	return ""
}

func (x *CutOffNotificationData) GetTASK_ID() string {
	if x != nil {
		return x.TASK_ID
	}
	return ""
}

func (x *CutOffNotificationData) GetUSERNAME_REJECTOR() string {
	if x != nil {
		return x.USERNAME_REJECTOR
	}
	return ""
}

func (x *CutOffNotificationData) GetCOMPANY_NAME() string {
	if x != nil {
		return x.COMPANY_NAME
	}
	return ""
}

func (x *CutOffNotificationData) GetUSERNAME_CHECKER() string {
	if x != nil {
		return x.USERNAME_CHECKER
	}
	return ""
}

func (x *CutOffNotificationData) GetUSERNAME_RELEASER() string {
	if x != nil {
		return x.USERNAME_RELEASER
	}
	return ""
}

func (x *CutOffNotificationData) GetMODULE() string {
	if x != nil {
		return x.MODULE
	}
	return ""
}

func (x *CutOffNotificationData) GetMESSAGE() string {
	if x != nil {
		return x.MESSAGE
	}
	return ""
}

func (x *CutOffNotificationData) GetTEMPLATE() string {
	if x != nil {
		return x.TEMPLATE
	}
	return ""
}

func (x *CutOffNotificationData) GetSTATUS_SEND() string {
	if x != nil {
		return x.STATUS_SEND
	}
	return ""
}

func (x *CutOffNotificationData) GetSTATUS_ACTION() string {
	if x != nil {
		return x.STATUS_ACTION
	}
	return ""
}

func (x *CutOffNotificationData) GetSTATUS_REQUEST_DELETE() string {
	if x != nil {
		return x.STATUS_REQUEST_DELETE
	}
	return ""
}

func (x *CutOffNotificationData) GetREASON() string {
	if x != nil {
		return x.REASON
	}
	return ""
}

func (x *CutOffNotificationData) GetCOMMENT() string {
	if x != nil {
		return x.COMMENT
	}
	return ""
}

type GetAvailableTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time    string `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	ModulID uint64 `protobuf:"varint,2,opt,name=modulID,proto3" json:"modulID,omitempty"`
}

func (x *GetAvailableTimeRequest) Reset() {
	*x = GetAvailableTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableTimeRequest) ProtoMessage() {}

func (x *GetAvailableTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableTimeRequest.ProtoReflect.Descriptor instead.
func (*GetAvailableTimeRequest) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{62}
}

func (x *GetAvailableTimeRequest) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *GetAvailableTimeRequest) GetModulID() uint64 {
	if x != nil {
		return x.ModulID
	}
	return 0
}

type GetAvailableTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool           `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32         `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Availabletime `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAvailableTimeResponse) Reset() {
	*x = GetAvailableTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAvailableTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableTimeResponse) ProtoMessage() {}

func (x *GetAvailableTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableTimeResponse.ProtoReflect.Descriptor instead.
func (*GetAvailableTimeResponse) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{63}
}

func (x *GetAvailableTimeResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *GetAvailableTimeResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetAvailableTimeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetAvailableTimeResponse) GetData() *Availabletime {
	if x != nil {
		return x.Data
	}
	return nil
}

type Availabletime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid              bool   `protobuf:"varint,1,opt,name=isValid,proto3" json:"isValid,omitempty"`
	IsCutOff             bool   `protobuf:"varint,2,opt,name=isCutOff,proto3" json:"isCutOff,omitempty"`
	IsHoliday            bool   `protobuf:"varint,3,opt,name=isHoliday,proto3" json:"isHoliday,omitempty"`
	FastestAvailableTime string `protobuf:"bytes,4,opt,name=fastestAvailableTime,proto3" json:"fastestAvailableTime,omitempty"`
}

func (x *Availabletime) Reset() {
	*x = Availabletime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Availabletime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Availabletime) ProtoMessage() {}

func (x *Availabletime) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Availabletime.ProtoReflect.Descriptor instead.
func (*Availabletime) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{64}
}

func (x *Availabletime) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *Availabletime) GetIsCutOff() bool {
	if x != nil {
		return x.IsCutOff
	}
	return false
}

func (x *Availabletime) GetIsHoliday() bool {
	if x != nil {
		return x.IsHoliday
	}
	return false
}

func (x *Availabletime) GetFastestAvailableTime() string {
	if x != nil {
		return x.FastestAvailableTime
	}
	return ""
}

type ListCutOffTaskRequest_TaskListFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScheduleName string `protobuf:"bytes,2,opt,name=scheduleName,proto3" json:"scheduleName,omitempty"`
	Module       string `protobuf:"bytes,3,opt,name=module,proto3" json:"module,omitempty"`
	CreatedBy    string `protobuf:"bytes,4,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	ReviewedBy   string `protobuf:"bytes,5,opt,name=reviewedBy,proto3" json:"reviewedBy,omitempty"`
	DateCreated  string `protobuf:"bytes,6,opt,name=dateCreated,proto3" json:"dateCreated,omitempty"`
	DateModified string `protobuf:"bytes,7,opt,name=dateModified,proto3" json:"dateModified,omitempty"`
	Status       string `protobuf:"bytes,50,opt,name=status,proto3" json:"status,omitempty"`
	Custom       string `protobuf:"bytes,51,opt,name=custom,proto3" json:"custom,omitempty"`
}

func (x *ListCutOffTaskRequest_TaskListFilter) Reset() {
	*x = ListCutOffTaskRequest_TaskListFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCutOffTaskRequest_TaskListFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCutOffTaskRequest_TaskListFilter) ProtoMessage() {}

func (x *ListCutOffTaskRequest_TaskListFilter) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCutOffTaskRequest_TaskListFilter.ProtoReflect.Descriptor instead.
func (*ListCutOffTaskRequest_TaskListFilter) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ListCutOffTaskRequest_TaskListFilter) GetScheduleName() string {
	if x != nil {
		return x.ScheduleName
	}
	return ""
}

func (x *ListCutOffTaskRequest_TaskListFilter) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *ListCutOffTaskRequest_TaskListFilter) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ListCutOffTaskRequest_TaskListFilter) GetReviewedBy() string {
	if x != nil {
		return x.ReviewedBy
	}
	return ""
}

func (x *ListCutOffTaskRequest_TaskListFilter) GetDateCreated() string {
	if x != nil {
		return x.DateCreated
	}
	return ""
}

func (x *ListCutOffTaskRequest_TaskListFilter) GetDateModified() string {
	if x != nil {
		return x.DateModified
	}
	return ""
}

func (x *ListCutOffTaskRequest_TaskListFilter) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListCutOffTaskRequest_TaskListFilter) GetCustom() string {
	if x != nil {
		return x.Custom
	}
	return ""
}

type ListCutOffDataRequest_DataListFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Custom string `protobuf:"bytes,50,opt,name=custom,proto3" json:"custom,omitempty"`
}

func (x *ListCutOffDataRequest_DataListFilter) Reset() {
	*x = ListCutOffDataRequest_DataListFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cut_off_payload_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCutOffDataRequest_DataListFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCutOffDataRequest_DataListFilter) ProtoMessage() {}

func (x *ListCutOffDataRequest_DataListFilter) ProtoReflect() protoreflect.Message {
	mi := &file_cut_off_payload_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCutOffDataRequest_DataListFilter.ProtoReflect.Descriptor instead.
func (*ListCutOffDataRequest_DataListFilter) Descriptor() ([]byte, []int) {
	return file_cut_off_payload_proto_rawDescGZIP(), []int{18, 0}
}

func (x *ListCutOffDataRequest_DataListFilter) GetCustom() string {
	if x != nil {
		return x.Custom
	}
	return ""
}

var File_cut_off_payload_proto protoreflect.FileDescriptor

var file_cut_off_payload_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x15, 0x63, 0x75, 0x74,
	0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x67, 0x6f, 0x72, 0x6d, 0x5f, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7c, 0x0a, 0x12, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f,
	0x77, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67,
	0x65, 0x73, 0x22, 0xec, 0x04, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x61, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x2a, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49,
	0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x3c, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x38, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x73,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x73, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x38, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x46,
	0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x84, 0x05, 0x0a, 0x0a, 0x43, 0x75, 0x74, 0x4f, 0x66,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x46, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f,
	0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x4f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x4f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x61, 0x76, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x22, 0x7f, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x74, 0x4f,
	0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74, 0x22, 0x6c,
	0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f,
	0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x74, 0x4f,
	0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x90, 0x01, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x75,
	0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xb3, 0x01, 0x0a, 0x17, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x20, 0x27, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x27, 0x2c, 0x20, 0x27, 0x72, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x27, 0x2c, 0x20, 0x27, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x27, 0x2c,
	0x20, 0x27, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x27, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x18, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66,
	0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x94, 0x06, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f,
	0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x54, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b,
	0x32, 0x39, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x65, 0x72,
	0x20, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d,
	0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x0a,
	0x03, 0x64, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x75, 0x74,
	0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64,
	0x69, 0x72, 0x12, 0x50, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x74, 0x4f,
	0x66, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x6d, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x6e, 0x6c, 0x79, 0x1a, 0x80, 0x02, 0x0a,
	0x0e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x64, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x42, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22,
	0xd6, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x05, 0x0a, 0x19, 0x46, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63,
	0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x12, 0x54, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0x70, 0x61, 0x67, 0x65, 0x20,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x12, 0x33, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x50, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x55, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x66, 0x69, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x2e, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x70, 0x64, 0x66, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x78, 0x6c, 0x73, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x63, 0x73, 0x76, 0x10, 0x03, 0x22, 0x32, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x74, 0x4f, 0x66, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x91, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x75,
	0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xa1, 0x03, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61,
	0x67, 0x65, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x55, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92,
	0x41, 0x3e, 0x32, 0x3c, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x64, 0x69,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66,
	0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72,
	0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12,
	0x50, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x28, 0x0a, 0x0e, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x22, 0x3e, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x74, 0x4f, 0x66,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x64,
	0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x22, 0xd2, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x74, 0x4f,
	0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f,
	0x64, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c,
	0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x41, 0x76, 0x61, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x41, 0x76,
	0x61, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x39, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x22, 0x66, 0x0a, 0x0a, 0x64, 0x61, 0x79, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x75,
	0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0c, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x0f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79,
	0x12, 0x38, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x64, 0x61, 0x79, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x1f, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43,
	0x75, 0x74, 0x4f, 0x66, 0x66, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x6b, 0x0a, 0x15, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x42, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x64, 0x61, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x44, 0x61, 0x79, 0x22, 0xf2, 0x01, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x75, 0x74, 0x4f, 0x66, 0x66, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66,
	0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd8, 0x01, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f,
	0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x74, 0x4f, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x46,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x0e, 0x63, 0x75, 0x74, 0x4f, 0x66, 0x66,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe4, 0x01, 0x0a,
	0x1e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x22,
	0x93, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4b, 0x0a, 0x15, 0x53, 0x61, 0x76, 0x65, 0x43, 0x75, 0x74,
	0x4f, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x8c, 0x01, 0x0a, 0x16, 0x53, 0x61, 0x76, 0x65, 0x43, 0x75, 0x74, 0x4f, 0x66,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x65, 0x0a, 0x0b, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a, 0x0f, 0x48, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22,
	0x3f, 0x0a, 0x0d, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x93, 0x05, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x61, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x61, 0x76,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x38,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x22, 0xcd, 0x04, 0x0a, 0x0b, 0x48, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0d,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f,
	0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x61, 0x76, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x38,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x22, 0x74, 0x0a, 0x0f, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x61, 0x73,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66,
	0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x81, 0x01, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66,
	0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x22, 0x5f, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xb1, 0x0a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x75,
	0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x20,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d,
	0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c,
	0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x67,
	0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x8e, 0x04, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0xf5, 0x03, 0x92,
	0x41, 0xf1, 0x03, 0x32, 0xee, 0x03, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x41, 0x4e,
	0x44, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2c,
	0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3d, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x31, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72,
	0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x20, 0x3d, 0x20, 0x31, 0x20, 0x41, 0x4e,
	0x44, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20,
	0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20,
	0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d,
	0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27,
	0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x32, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x20, 0x3e, 0x3d, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x6b, 0x65, 0x79, 0x32, 0x20, 0x3c,
	0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45,
	0x4e, 0x20, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e,
	0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x27, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0xee, 0x02, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0xd7, 0x02, 0x92,
	0x41, 0xd3, 0x02, 0x32, 0xd0, 0x02, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x4f, 0x52,
	0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x2c, 0x6b,
	0x65, 0x79, 0x33, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3d, 0x6e, 0x61, 0x6d, 0x65,
	0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x27, 0x20, 0x4f, 0x52, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49,
	0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31,
	0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31,
	0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0xdd, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x99, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x75,
	0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x0a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07,
	0x68, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x52, 0x07, 0x68, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x20, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0x70, 0x61,
	0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0x92, 0x41, 0x1b, 0x32, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20,
	0x62, 0x79, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x8e, 0x04, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0xf5, 0x03, 0x92, 0x41, 0xf1,
	0x03, 0x32, 0xee, 0x03, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x41, 0x4e, 0x44, 0x27,
	0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x6b, 0x65,
	0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x3a, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3d, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x3a, 0x31, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x20, 0x3d, 0x20, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20,
	0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25,
	0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20,
	0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20,
	0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a,
	0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a,
	0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27,
	0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x6b, 0x65, 0x79, 0x32, 0x20, 0x3c, 0x3d, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x20,
	0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x27, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0xee, 0x02, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0xd7, 0x02, 0x92, 0x41, 0xd3,
	0x02, 0x32, 0xd0, 0x02, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x4f, 0x52, 0x27, 0x20,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x2c, 0x6b, 0x65, 0x79,
	0x33, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x3a, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3d, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x74,
	0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x3d,
	0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20,
	0x4f, 0x52, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20,
	0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27,
	0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45,
	0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e,
	0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x27, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6e, 0x22, 0xdb, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x48,
	0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x42, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x44, 0x22, 0x98, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x6c, 0x69, 0x64,
	0x61, 0x79, 0x42, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66,
	0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x63,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x22, 0x5b, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x6c,
	0x69, 0x64, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x2e, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x22, 0xb4, 0x01, 0x0a, 0x18, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x20, 0x27, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x27, 0x2c, 0x20, 0x27,
	0x72, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x27, 0x2c, 0x20, 0x27, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x27, 0x2c, 0x20, 0x27, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x27, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x19, 0x48, 0x6f, 0x6c, 0x69,
	0x64, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66,
	0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe0, 0x09, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x48,
	0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2e,
	0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27,
	0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32,
	0x3c, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20,
	0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x8e, 0x04, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0xf5, 0x03,
	0x92, 0x41, 0xf1, 0x03, 0x32, 0xee, 0x03, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x41,
	0x4e, 0x44, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2c, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3d, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x31, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65,
	0x72, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x20, 0x3d, 0x20, 0x31, 0x20, 0x41,
	0x4e, 0x44, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20,
	0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27,
	0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45,
	0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20,
	0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x3a, 0x3e, 0x3d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x32, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x20, 0x3e, 0x3d, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x6b, 0x65, 0x79, 0x32, 0x20,
	0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x42, 0x45, 0x54, 0x57, 0x45,
	0x45, 0x4e, 0x20, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d,
	0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0xee, 0x02,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0xd7, 0x02,
	0x92, 0x41, 0xd3, 0x02, 0x32, 0xd0, 0x02, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x4f,
	0x52, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x2c,
	0x6b, 0x65, 0x79, 0x33, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3d, 0x6e, 0x61, 0x6d,
	0x65, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x27, 0x20, 0x4f, 0x52, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e,
	0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c,
	0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6e, 0x22, 0xe5, 0x01, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc6, 0x0b, 0x0a, 0x1e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3a, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x66, 0x69,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f,
	0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x30, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70,
	0x61, 0x67, 0x65, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x55, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41,
	0x92, 0x41, 0x3e, 0x32, 0x3c, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x33, 0x0a, 0x03, 0x64,
	0x69, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f,
	0x66, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x69, 0x72,
	0x12, 0x8e, 0x04, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0xf5, 0x03, 0x92, 0x41, 0xf1, 0x03, 0x32, 0xee, 0x03, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x27, 0x41, 0x4e, 0x44, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20,
	0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x3a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2c, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20,
	0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x3d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x31, 0x2c, 0x74, 0x79, 0x70, 0x65,
	0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e,
	0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x20, 0x3d,
	0x20, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d,
	0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49,
	0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20,
	0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x3a,
	0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x3a, 0x3c, 0x3d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31,
	0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x6b,
	0x65, 0x79, 0x32, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x42,
	0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x20, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x20, 0x0a,
	0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31,
	0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0xee, 0x02, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0xd7, 0x02, 0x92, 0x41, 0xd3, 0x02, 0x32, 0xd0, 0x02, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x27, 0x4f, 0x52, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a,
	0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x31, 0x2c, 0x6b,
	0x65, 0x79, 0x32, 0x2c, 0x6b, 0x65, 0x79, 0x33, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20,
	0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x3d, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72, 0x65,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x4f, 0x52, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d,
	0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20,
	0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a,
	0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d,
	0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27,
	0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x22, 0x2e, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x08, 0x0a,
	0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x70, 0x64, 0x66, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x78, 0x6c, 0x73, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x63, 0x73, 0x76,
	0x10, 0x03, 0x22, 0xbd, 0x07, 0x0a, 0x17, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26,
	0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x52,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x52, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x45, 0x52, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45,
	0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x12, 0x24, 0x0a, 0x0d, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x44,
	0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x53, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x53, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x53, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x53, 0x12, 0x18,
	0x0a, 0x07, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e,
	0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x4e, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x53,
	0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x45, 0x52, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x45, 0x52, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x52, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x45,
	0x41, 0x53, 0x45, 0x52, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41,
	0x54, 0x45, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41,
	0x54, 0x45, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x4e,
	0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x45, 0x4e, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x4e, 0x54, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x4f, 0x4d, 0x4d, 0x45,
	0x4e, 0x54, 0x22, 0xde, 0x07, 0x0a, 0x16, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a,
	0x0e, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x52, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x4d, 0x41, 0x4b, 0x45, 0x52, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f,
	0x56, 0x45, 0x52, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x12,
	0x24, 0x0a, 0x0d, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x44, 0x45,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x53, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x53, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x12, 0x22, 0x0a, 0x0c, 0x53,
	0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x12,
	0x18, 0x0a, 0x07, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x53, 0x45,
	0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x4f, 0x4d, 0x50, 0x41,
	0x4e, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43,
	0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x12, 0x2a, 0x0a, 0x10, 0x55,
	0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x45, 0x52, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x45, 0x52, 0x12, 0x2c, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x4e,
	0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x52, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x4c,
	0x45, 0x41, 0x53, 0x45, 0x52, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x45, 0x4d, 0x50, 0x4c,
	0x41, 0x54, 0x45, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x45, 0x4d, 0x50, 0x4c,
	0x41, 0x54, 0x45, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45,
	0x4e, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x45, 0x4e, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x12, 0x34, 0x0a, 0x15, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x4f, 0x4d,
	0x4d, 0x45, 0x4e, 0x54, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x4e, 0x54, 0x22, 0x5e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41,
	0x12, 0x32, 0x10, 0x59, 0x59, 0x59, 0x59, 0x2d, 0x4d, 0x4d, 0x2d, 0x44, 0x44, 0x20, 0x68, 0x68,
	0x2d, 0x6d, 0x6d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x49, 0x44, 0x22, 0x95, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x75, 0x74, 0x2e, 0x6f, 0x66, 0x66, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x97, 0x01, 0x0a, 0x0d,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x43, 0x75, 0x74,
	0x4f, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x75, 0x74,
	0x4f, 0x66, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x6f, 0x6c, 0x69, 0x64, 0x61,
	0x79, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x66, 0x61, 0x73, 0x74, 0x65, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x80, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x44, 0x72, 0x61, 0x66, 0x74, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x46, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x07, 0x2a, 0x49, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x65, 0x70, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x72, 0x10, 0x04, 0x2a, 0x22, 0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x01, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cut_off_payload_proto_rawDescOnce sync.Once
	file_cut_off_payload_proto_rawDescData = file_cut_off_payload_proto_rawDesc
)

func file_cut_off_payload_proto_rawDescGZIP() []byte {
	file_cut_off_payload_proto_rawDescOnce.Do(func() {
		file_cut_off_payload_proto_rawDescData = protoimpl.X.CompressGZIP(file_cut_off_payload_proto_rawDescData)
	})
	return file_cut_off_payload_proto_rawDescData
}

var file_cut_off_payload_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_cut_off_payload_proto_msgTypes = make([]protoimpl.MessageInfo, 67)
var file_cut_off_payload_proto_goTypes = []interface{}{
	(TaskStatus)(0),                               // 0: cut.off.service.v1.TaskStatus
	(TaskStep)(0),                                 // 1: cut.off.service.v1.TaskStep
	(SortDirection)(0),                            // 2: cut.off.service.v1.SortDirection
	(FileListCutOffTaskRequest_Formats)(0),        // 3: cut.off.service.v1.FileListCutOffTaskRequest.Formats
	(DownloadListHolidayTaskRequest_Formats)(0),   // 4: cut.off.service.v1.DownloadListHolidayTaskRequest.Formats
	(*PaginationResponse)(nil),                    // 5: cut.off.service.v1.PaginationResponse
	(*Task)(nil),                                  // 6: cut.off.service.v1.Task
	(*Sort)(nil),                                  // 7: cut.off.service.v1.Sort
	(*ListProductUsedReq)(nil),                    // 8: cut.off.service.v1.ListProductUsedReq
	(*ListProductUsedRes)(nil),                    // 9: cut.off.service.v1.ListProductUsedRes
	(*Module)(nil),                                // 10: cut.off.service.v1.module
	(*ScheduleTime)(nil),                          // 11: cut.off.service.v1.scheduleTime
	(*CutOffData)(nil),                            // 12: cut.off.service.v1.CutOffData
	(*CreateCutOffTaskRequest)(nil),               // 13: cut.off.service.v1.CreateCutOffTaskRequest
	(*TaskData)(nil),                              // 14: cut.off.service.v1.TaskData
	(*CreateCutOffTaskResponse)(nil),              // 15: cut.off.service.v1.CreateCutOffTaskResponse
	(*CutOffTaskActionRequest)(nil),               // 16: cut.off.service.v1.CutOffTaskActionRequest
	(*CutOffTaskActionResponse)(nil),              // 17: cut.off.service.v1.CutOffTaskActionResponse
	(*ListCutOffTaskRequest)(nil),                 // 18: cut.off.service.v1.ListCutOffTaskRequest
	(*ListCutOffTaskResponse)(nil),                // 19: cut.off.service.v1.ListCutOffTaskResponse
	(*FileListCutOffTaskRequest)(nil),             // 20: cut.off.service.v1.FileListCutOffTaskRequest
	(*GetCutOffTaskByIDRequest)(nil),              // 21: cut.off.service.v1.GetCutOffTaskByIDRequest
	(*GetCutOffTaskByIDResponse)(nil),             // 22: cut.off.service.v1.GetCutOffTaskByIDResponse
	(*ListCutOffDataRequest)(nil),                 // 23: cut.off.service.v1.ListCutOffDataRequest
	(*ListCutOffDataScheduleTodayRequest)(nil),    // 24: cut.off.service.v1.ListCutOffDataScheduleTodayRequest
	(*ListCutOffDataScheduleTodayRespons)(nil),    // 25: cut.off.service.v1.ListCutOffDataScheduleTodayRespons
	(*ListCutOffDataScheduleRequest)(nil),         // 26: cut.off.service.v1.ListCutOffDataScheduleRequest
	(*Dayproduct)(nil),                            // 27: cut.off.service.v1.dayproduct
	(*ScheduledCutOff)(nil),                       // 28: cut.off.service.v1.scheduledCutOff
	(*ListCutOffScheduledDataResponse)(nil),       // 29: cut.off.service.v1.ListCutOffScheduledDataResponse
	(*ScheduleTimeByTime)(nil),                    // 30: cut.off.service.v1.scheduleTimeByTime
	(*ScheduledCutOffByTime)(nil),                 // 31: cut.off.service.v1.scheduledCutOffByTime
	(*ListCutOffScheduledDataByTimeResponse)(nil), // 32: cut.off.service.v1.ListCutOffScheduledDataByTimeResponse
	(*ListCutOffDataResponse)(nil),                // 33: cut.off.service.v1.ListCutOffDataResponse
	(*CutOffTemplate)(nil),                        // 34: cut.off.service.v1.cutOffTemplate
	(*ListCutOffDataTemplateResponse)(nil),        // 35: cut.off.service.v1.ListCutOffDataTemplateResponse
	(*GetCutOffDataByIDRequest)(nil),              // 36: cut.off.service.v1.GetCutOffDataByIDRequest
	(*GetCutOffDataByIDResponse)(nil),             // 37: cut.off.service.v1.GetCutOffDataByIDResponse
	(*SaveCutOffDataRequest)(nil),                 // 38: cut.off.service.v1.SaveCutOffDataRequest
	(*SaveCutOffDataResponse)(nil),                // 39: cut.off.service.v1.SaveCutOffDataResponse
	(*ArrayString)(nil),                           // 40: cut.off.service.v1.ArrayString
	(*HolidaySchedule)(nil),                       // 41: cut.off.service.v1.HolidaySchedule
	(*HolidayModule)(nil),                         // 42: cut.off.service.v1.HolidayModule
	(*GetHolidayDataRes)(nil),                     // 43: cut.off.service.v1.GetHolidayDataRes
	(*HolidayData)(nil),                           // 44: cut.off.service.v1.HolidayData
	(*HolidayTaskData)(nil),                       // 45: cut.off.service.v1.HolidayTaskData
	(*CreateHolidayTaskRequest)(nil),              // 46: cut.off.service.v1.CreateHolidayTaskRequest
	(*CreateHolidayTaskResponse)(nil),             // 47: cut.off.service.v1.CreateHolidayTaskResponse
	(*GetHolidayTaskRequest)(nil),                 // 48: cut.off.service.v1.GetHolidayTaskRequest
	(*GetHolidayTaskResponse)(nil),                // 49: cut.off.service.v1.GetHolidayTaskResponse
	(*GetHolidayTaskByIDRequest)(nil),             // 50: cut.off.service.v1.GetHolidayTaskByIDRequest
	(*GetHolidayTaskByIDResponse)(nil),            // 51: cut.off.service.v1.GetHolidayTaskByIDResponse
	(*GetHolidayRequest)(nil),                     // 52: cut.off.service.v1.GetHolidayRequest
	(*GetHolidayResponse)(nil),                    // 53: cut.off.service.v1.GetHolidayResponse
	(*GetHolidayByFeatureIDRequest)(nil),          // 54: cut.off.service.v1.GetHolidayByFeatureIDRequest
	(*GetHolidayByFeatureIDResponse)(nil),         // 55: cut.off.service.v1.GetHolidayByFeatureIDResponse
	(*CreateHolidayRequest)(nil),                  // 56: cut.off.service.v1.CreateHolidayRequest
	(*CreateHolidayResponse)(nil),                 // 57: cut.off.service.v1.CreateHolidayResponse
	(*DeleteHolidayRequest)(nil),                  // 58: cut.off.service.v1.DeleteHolidayRequest
	(*HolidayTaskActionRequest)(nil),              // 59: cut.off.service.v1.HolidayTaskActionRequest
	(*HolidayTaskActionResponse)(nil),             // 60: cut.off.service.v1.HolidayTaskActionResponse
	(*GetHolidaySchedulesRequest)(nil),            // 61: cut.off.service.v1.GetHolidaySchedulesRequest
	(*GetHolidaySchedulesResponse)(nil),           // 62: cut.off.service.v1.GetHolidaySchedulesResponse
	(*HolidayScheduleRes)(nil),                    // 63: cut.off.service.v1.HolidayScheduleRes
	(*DownloadListHolidayTaskRequest)(nil),        // 64: cut.off.service.v1.DownloadListHolidayTaskRequest
	(*HolidayNotificationData)(nil),               // 65: cut.off.service.v1.HolidayNotificationData
	(*CutOffNotificationData)(nil),                // 66: cut.off.service.v1.CutOffNotificationData
	(*GetAvailableTimeRequest)(nil),               // 67: cut.off.service.v1.GetAvailableTimeRequest
	(*GetAvailableTimeResponse)(nil),              // 68: cut.off.service.v1.GetAvailableTimeResponse
	(*Availabletime)(nil),                         // 69: cut.off.service.v1.Availabletime
	(*ListCutOffTaskRequest_TaskListFilter)(nil),  // 70: cut.off.service.v1.ListCutOffTaskRequest.TaskListFilter
	(*ListCutOffDataRequest_DataListFilter)(nil),  // 71: cut.off.service.v1.ListCutOffDataRequest.DataListFilter
	(*timestamppb.Timestamp)(nil),                 // 72: google.protobuf.Timestamp
	(*CutOff)(nil),                                // 73: cut.off.service.v1.CutOff
	(*Holiday)(nil),                               // 74: cut.off.service.v1.Holiday
}
var file_cut_off_payload_proto_depIdxs = []int32{
	72, // 0: cut.off.service.v1.Task.createdAt:type_name -> google.protobuf.Timestamp
	72, // 1: cut.off.service.v1.Task.updatedAt:type_name -> google.protobuf.Timestamp
	10, // 2: cut.off.service.v1.ListProductUsedRes.data:type_name -> cut.off.service.v1.module
	10, // 3: cut.off.service.v1.CutOffData.modules:type_name -> cut.off.service.v1.module
	11, // 4: cut.off.service.v1.CutOffData.scheduleTimes:type_name -> cut.off.service.v1.scheduleTime
	72, // 5: cut.off.service.v1.CutOffData.createdAt:type_name -> google.protobuf.Timestamp
	72, // 6: cut.off.service.v1.CutOffData.updatedAt:type_name -> google.protobuf.Timestamp
	72, // 7: cut.off.service.v1.CutOffData.deletedAt:type_name -> google.protobuf.Timestamp
	12, // 8: cut.off.service.v1.CreateCutOffTaskRequest.data:type_name -> cut.off.service.v1.CutOffData
	6,  // 9: cut.off.service.v1.TaskData.task:type_name -> cut.off.service.v1.Task
	12, // 10: cut.off.service.v1.TaskData.data:type_name -> cut.off.service.v1.CutOffData
	14, // 11: cut.off.service.v1.CreateCutOffTaskResponse.data:type_name -> cut.off.service.v1.TaskData
	14, // 12: cut.off.service.v1.CutOffTaskActionResponse.data:type_name -> cut.off.service.v1.TaskData
	0,  // 13: cut.off.service.v1.ListCutOffTaskRequest.status:type_name -> cut.off.service.v1.TaskStatus
	1,  // 14: cut.off.service.v1.ListCutOffTaskRequest.step:type_name -> cut.off.service.v1.TaskStep
	2,  // 15: cut.off.service.v1.ListCutOffTaskRequest.dir:type_name -> cut.off.service.v1.SortDirection
	70, // 16: cut.off.service.v1.ListCutOffTaskRequest.filter:type_name -> cut.off.service.v1.ListCutOffTaskRequest.TaskListFilter
	14, // 17: cut.off.service.v1.ListCutOffTaskResponse.data:type_name -> cut.off.service.v1.TaskData
	5,  // 18: cut.off.service.v1.ListCutOffTaskResponse.pagination:type_name -> cut.off.service.v1.PaginationResponse
	0,  // 19: cut.off.service.v1.FileListCutOffTaskRequest.status:type_name -> cut.off.service.v1.TaskStatus
	1,  // 20: cut.off.service.v1.FileListCutOffTaskRequest.step:type_name -> cut.off.service.v1.TaskStep
	2,  // 21: cut.off.service.v1.FileListCutOffTaskRequest.dir:type_name -> cut.off.service.v1.SortDirection
	70, // 22: cut.off.service.v1.FileListCutOffTaskRequest.filter:type_name -> cut.off.service.v1.ListCutOffTaskRequest.TaskListFilter
	3,  // 23: cut.off.service.v1.FileListCutOffTaskRequest.fileFormat:type_name -> cut.off.service.v1.FileListCutOffTaskRequest.Formats
	14, // 24: cut.off.service.v1.GetCutOffTaskByIDResponse.data:type_name -> cut.off.service.v1.TaskData
	2,  // 25: cut.off.service.v1.ListCutOffDataRequest.dir:type_name -> cut.off.service.v1.SortDirection
	71, // 26: cut.off.service.v1.ListCutOffDataRequest.filter:type_name -> cut.off.service.v1.ListCutOffDataRequest.DataListFilter
	72, // 27: cut.off.service.v1.ListCutOffDataScheduleTodayRespons.timeExecute:type_name -> google.protobuf.Timestamp
	11, // 28: cut.off.service.v1.dayproduct.scheduleTime:type_name -> cut.off.service.v1.scheduleTime
	27, // 29: cut.off.service.v1.scheduledCutOff.product:type_name -> cut.off.service.v1.dayproduct
	28, // 30: cut.off.service.v1.ListCutOffScheduledDataResponse.data:type_name -> cut.off.service.v1.scheduledCutOff
	5,  // 31: cut.off.service.v1.ListCutOffScheduledDataResponse.pagination:type_name -> cut.off.service.v1.PaginationResponse
	30, // 32: cut.off.service.v1.scheduledCutOffByTime.timeDay:type_name -> cut.off.service.v1.scheduleTimeByTime
	31, // 33: cut.off.service.v1.ListCutOffScheduledDataByTimeResponse.data:type_name -> cut.off.service.v1.scheduledCutOffByTime
	5,  // 34: cut.off.service.v1.ListCutOffScheduledDataByTimeResponse.pagination:type_name -> cut.off.service.v1.PaginationResponse
	12, // 35: cut.off.service.v1.ListCutOffDataResponse.data:type_name -> cut.off.service.v1.CutOffData
	5,  // 36: cut.off.service.v1.ListCutOffDataResponse.pagination:type_name -> cut.off.service.v1.PaginationResponse
	34, // 37: cut.off.service.v1.ListCutOffDataTemplateResponse.data:type_name -> cut.off.service.v1.cutOffTemplate
	5,  // 38: cut.off.service.v1.ListCutOffDataTemplateResponse.pagination:type_name -> cut.off.service.v1.PaginationResponse
	12, // 39: cut.off.service.v1.GetCutOffDataByIDResponse.data:type_name -> cut.off.service.v1.CutOffData
	12, // 40: cut.off.service.v1.SaveCutOffDataRequest.data:type_name -> cut.off.service.v1.CutOffData
	73, // 41: cut.off.service.v1.SaveCutOffDataResponse.data:type_name -> cut.off.service.v1.CutOff
	72, // 42: cut.off.service.v1.GetHolidayDataRes.createdAt:type_name -> google.protobuf.Timestamp
	72, // 43: cut.off.service.v1.GetHolidayDataRes.updatedAt:type_name -> google.protobuf.Timestamp
	72, // 44: cut.off.service.v1.GetHolidayDataRes.deletedAt:type_name -> google.protobuf.Timestamp
	41, // 45: cut.off.service.v1.HolidayData.scheduleDates:type_name -> cut.off.service.v1.HolidaySchedule
	42, // 46: cut.off.service.v1.HolidayData.modules:type_name -> cut.off.service.v1.HolidayModule
	72, // 47: cut.off.service.v1.HolidayData.createdAt:type_name -> google.protobuf.Timestamp
	72, // 48: cut.off.service.v1.HolidayData.updatedAt:type_name -> google.protobuf.Timestamp
	72, // 49: cut.off.service.v1.HolidayData.deletedAt:type_name -> google.protobuf.Timestamp
	6,  // 50: cut.off.service.v1.HolidayTaskData.task:type_name -> cut.off.service.v1.Task
	44, // 51: cut.off.service.v1.HolidayTaskData.data:type_name -> cut.off.service.v1.HolidayData
	44, // 52: cut.off.service.v1.CreateHolidayTaskRequest.data:type_name -> cut.off.service.v1.HolidayData
	0,  // 53: cut.off.service.v1.GetHolidayTaskRequest.status:type_name -> cut.off.service.v1.TaskStatus
	1,  // 54: cut.off.service.v1.GetHolidayTaskRequest.step:type_name -> cut.off.service.v1.TaskStep
	2,  // 55: cut.off.service.v1.GetHolidayTaskRequest.dir:type_name -> cut.off.service.v1.SortDirection
	45, // 56: cut.off.service.v1.GetHolidayTaskResponse.data:type_name -> cut.off.service.v1.HolidayTaskData
	5,  // 57: cut.off.service.v1.GetHolidayTaskResponse.pagination:type_name -> cut.off.service.v1.PaginationResponse
	45, // 58: cut.off.service.v1.GetHolidayTaskByIDResponse.data:type_name -> cut.off.service.v1.HolidayTaskData
	74, // 59: cut.off.service.v1.GetHolidayRequest.holiday:type_name -> cut.off.service.v1.Holiday
	2,  // 60: cut.off.service.v1.GetHolidayRequest.dir:type_name -> cut.off.service.v1.SortDirection
	43, // 61: cut.off.service.v1.GetHolidayResponse.data:type_name -> cut.off.service.v1.GetHolidayDataRes
	5,  // 62: cut.off.service.v1.GetHolidayResponse.pagination:type_name -> cut.off.service.v1.PaginationResponse
	44, // 63: cut.off.service.v1.GetHolidayByFeatureIDResponse.data:type_name -> cut.off.service.v1.HolidayData
	44, // 64: cut.off.service.v1.CreateHolidayRequest.data:type_name -> cut.off.service.v1.HolidayData
	6,  // 65: cut.off.service.v1.HolidayTaskActionResponse.data:type_name -> cut.off.service.v1.Task
	2,  // 66: cut.off.service.v1.GetHolidaySchedulesRequest.dir:type_name -> cut.off.service.v1.SortDirection
	63, // 67: cut.off.service.v1.GetHolidaySchedulesResponse.data:type_name -> cut.off.service.v1.HolidayScheduleRes
	5,  // 68: cut.off.service.v1.GetHolidaySchedulesResponse.pagination:type_name -> cut.off.service.v1.PaginationResponse
	4,  // 69: cut.off.service.v1.DownloadListHolidayTaskRequest.fileFormat:type_name -> cut.off.service.v1.DownloadListHolidayTaskRequest.Formats
	0,  // 70: cut.off.service.v1.DownloadListHolidayTaskRequest.status:type_name -> cut.off.service.v1.TaskStatus
	1,  // 71: cut.off.service.v1.DownloadListHolidayTaskRequest.step:type_name -> cut.off.service.v1.TaskStep
	2,  // 72: cut.off.service.v1.DownloadListHolidayTaskRequest.dir:type_name -> cut.off.service.v1.SortDirection
	69, // 73: cut.off.service.v1.GetAvailableTimeResponse.data:type_name -> cut.off.service.v1.Availabletime
	74, // [74:74] is the sub-list for method output_type
	74, // [74:74] is the sub-list for method input_type
	74, // [74:74] is the sub-list for extension type_name
	74, // [74:74] is the sub-list for extension extendee
	0,  // [0:74] is the sub-list for field type_name
}

func init() { file_cut_off_payload_proto_init() }
func file_cut_off_payload_proto_init() {
	if File_cut_off_payload_proto != nil {
		return
	}
	file_cut_off_gorm_db_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cut_off_payload_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProductUsedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProductUsedRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Module); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CutOffData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCutOffTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCutOffTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CutOffTaskActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CutOffTaskActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCutOffTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCutOffTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileListCutOffTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCutOffTaskByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCutOffTaskByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCutOffDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCutOffDataScheduleTodayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCutOffDataScheduleTodayRespons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCutOffDataScheduleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dayproduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledCutOff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCutOffScheduledDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleTimeByTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledCutOffByTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCutOffScheduledDataByTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCutOffDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CutOffTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCutOffDataTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCutOffDataByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCutOffDataByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveCutOffDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveCutOffDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrayString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HolidaySchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HolidayModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHolidayDataRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HolidayData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HolidayTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHolidayTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHolidayTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHolidayTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHolidayTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHolidayTaskByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHolidayTaskByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHolidayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHolidayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHolidayByFeatureIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHolidayByFeatureIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHolidayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateHolidayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteHolidayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HolidayTaskActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HolidayTaskActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHolidaySchedulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHolidaySchedulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HolidayScheduleRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadListHolidayTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HolidayNotificationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CutOffNotificationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAvailableTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Availabletime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCutOffTaskRequest_TaskListFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cut_off_payload_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCutOffDataRequest_DataListFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cut_off_payload_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   67,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cut_off_payload_proto_goTypes,
		DependencyIndexes: file_cut_off_payload_proto_depIdxs,
		EnumInfos:         file_cut_off_payload_proto_enumTypes,
		MessageInfos:      file_cut_off_payload_proto_msgTypes,
	}.Build()
	File_cut_off_payload_proto = out.File
	file_cut_off_payload_proto_rawDesc = nil
	file_cut_off_payload_proto_goTypes = nil
	file_cut_off_payload_proto_depIdxs = nil
}
