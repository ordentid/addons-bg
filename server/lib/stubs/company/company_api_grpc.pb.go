// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: company_api.proto

package pb

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	DownloadListCompanyTasks(ctx context.Context, in *FileListCompanyTaskRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	CreateCompanyTask(ctx context.Context, in *CreateCompanyTaskReq, opts ...grpc.CallOption) (*CreateCompanyTaskRes, error)
	DeleteCompany(ctx context.Context, in *CreateCompanyTaskReq, opts ...grpc.CallOption) (*DeleteCompanyRes, error)
	DeleteCompanyTask(ctx context.Context, in *GetCompanyTaskByIDReq, opts ...grpc.CallOption) (*GetCompanyTaskByIDRes, error)
	CreateCompany(ctx context.Context, in *CreateCompanyReq, opts ...grpc.CallOption) (*CreateCompanyRes, error)
	ListCompanyTask(ctx context.Context, in *ListCompanyTaskReq, opts ...grpc.CallOption) (*ListCompanyTaskRes, error)
	GetCompanyTaskByID(ctx context.Context, in *GetCompanyTaskByIDReq, opts ...grpc.CallOption) (*GetCompanyTaskByIDRes, error)
	ListCompanyData(ctx context.Context, in *ListCompanyDataReq, opts ...grpc.CallOption) (*ListCompanyDataRes, error)
	ListGroupLimit(ctx context.Context, in *ListGroupLimitReq, opts ...grpc.CallOption) (*ListGroupLimitRes, error)
	ListLimit(ctx context.Context, in *ListLimitReq, opts ...grpc.CallOption) (*ListLimitRes, error)
	ListCurrency(ctx context.Context, in *ListCurrencyReq, opts ...grpc.CallOption) (*ListCurrencyRes, error)
	BRICaMSgetCustomer(ctx context.Context, in *BricamsGetCustomerReq, opts ...grpc.CallOption) (*BricamsResponseDatas, error)
	BRICaMSgetCustomerByID(ctx context.Context, in *BricamsGetCustomerByIdReq, opts ...grpc.CallOption) (*BricamsResponseData, error)
	BRICaMSgetCustomerByUser(ctx context.Context, in *BricamsGetCustomerByUserReq, opts ...grpc.CallOption) (*BricamsResponseData, error)
	BRICaMSgetCustomerV2(ctx context.Context, in *BricamsGetCustomerReq, opts ...grpc.CallOption) (*BRICaMSSvcMultipleResV2, error)
	BRICaMSgetCustomerByIDV2(ctx context.Context, in *BricamsGetCustomerByIdReq, opts ...grpc.CallOption) (*BRICaMSSvcSingleResV2, error)
	BRICaMSgetCustomerByUserV2(ctx context.Context, in *BricamsGetCustomerByUserReq, opts ...grpc.CallOption) (*BRICaMSSvcSingleResV2, error)
	CekCompanyIDAvaibility(ctx context.Context, in *CekCompanyIDAvaibilityReq, opts ...grpc.CallOption) (*CekCompanyIDAvaibilityRes, error)
	BRICaMSCustomerMapping(ctx context.Context, in *BricamsGetCustomerReq, opts ...grpc.CallOption) (*BRICaMSSvcMultipleResV2, error)
	CompanySubsidiaryValidation(ctx context.Context, in *CompanySubsidiaryValidationReq, opts ...grpc.CallOption) (*CompanySubsidiaryValidationRes, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) DownloadListCompanyTasks(ctx context.Context, in *FileListCompanyTaskRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/company.service.v1.ApiService/DownloadListCompanyTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateCompanyTask(ctx context.Context, in *CreateCompanyTaskReq, opts ...grpc.CallOption) (*CreateCompanyTaskRes, error) {
	out := new(CreateCompanyTaskRes)
	err := c.cc.Invoke(ctx, "/company.service.v1.ApiService/CreateCompanyTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteCompany(ctx context.Context, in *CreateCompanyTaskReq, opts ...grpc.CallOption) (*DeleteCompanyRes, error) {
	out := new(DeleteCompanyRes)
	err := c.cc.Invoke(ctx, "/company.service.v1.ApiService/DeleteCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteCompanyTask(ctx context.Context, in *GetCompanyTaskByIDReq, opts ...grpc.CallOption) (*GetCompanyTaskByIDRes, error) {
	out := new(GetCompanyTaskByIDRes)
	err := c.cc.Invoke(ctx, "/company.service.v1.ApiService/DeleteCompanyTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateCompany(ctx context.Context, in *CreateCompanyReq, opts ...grpc.CallOption) (*CreateCompanyRes, error) {
	out := new(CreateCompanyRes)
	err := c.cc.Invoke(ctx, "/company.service.v1.ApiService/CreateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListCompanyTask(ctx context.Context, in *ListCompanyTaskReq, opts ...grpc.CallOption) (*ListCompanyTaskRes, error) {
	out := new(ListCompanyTaskRes)
	err := c.cc.Invoke(ctx, "/company.service.v1.ApiService/ListCompanyTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetCompanyTaskByID(ctx context.Context, in *GetCompanyTaskByIDReq, opts ...grpc.CallOption) (*GetCompanyTaskByIDRes, error) {
	out := new(GetCompanyTaskByIDRes)
	err := c.cc.Invoke(ctx, "/company.service.v1.ApiService/GetCompanyTaskByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListCompanyData(ctx context.Context, in *ListCompanyDataReq, opts ...grpc.CallOption) (*ListCompanyDataRes, error) {
	out := new(ListCompanyDataRes)
	err := c.cc.Invoke(ctx, "/company.service.v1.ApiService/ListCompanyData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListGroupLimit(ctx context.Context, in *ListGroupLimitReq, opts ...grpc.CallOption) (*ListGroupLimitRes, error) {
	out := new(ListGroupLimitRes)
	err := c.cc.Invoke(ctx, "/company.service.v1.ApiService/ListGroupLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListLimit(ctx context.Context, in *ListLimitReq, opts ...grpc.CallOption) (*ListLimitRes, error) {
	out := new(ListLimitRes)
	err := c.cc.Invoke(ctx, "/company.service.v1.ApiService/ListLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListCurrency(ctx context.Context, in *ListCurrencyReq, opts ...grpc.CallOption) (*ListCurrencyRes, error) {
	out := new(ListCurrencyRes)
	err := c.cc.Invoke(ctx, "/company.service.v1.ApiService/ListCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BRICaMSgetCustomer(ctx context.Context, in *BricamsGetCustomerReq, opts ...grpc.CallOption) (*BricamsResponseDatas, error) {
	out := new(BricamsResponseDatas)
	err := c.cc.Invoke(ctx, "/company.service.v1.ApiService/BRICaMSgetCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BRICaMSgetCustomerByID(ctx context.Context, in *BricamsGetCustomerByIdReq, opts ...grpc.CallOption) (*BricamsResponseData, error) {
	out := new(BricamsResponseData)
	err := c.cc.Invoke(ctx, "/company.service.v1.ApiService/BRICaMSgetCustomerByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BRICaMSgetCustomerByUser(ctx context.Context, in *BricamsGetCustomerByUserReq, opts ...grpc.CallOption) (*BricamsResponseData, error) {
	out := new(BricamsResponseData)
	err := c.cc.Invoke(ctx, "/company.service.v1.ApiService/BRICaMSgetCustomerByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BRICaMSgetCustomerV2(ctx context.Context, in *BricamsGetCustomerReq, opts ...grpc.CallOption) (*BRICaMSSvcMultipleResV2, error) {
	out := new(BRICaMSSvcMultipleResV2)
	err := c.cc.Invoke(ctx, "/company.service.v1.ApiService/BRICaMSgetCustomerV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BRICaMSgetCustomerByIDV2(ctx context.Context, in *BricamsGetCustomerByIdReq, opts ...grpc.CallOption) (*BRICaMSSvcSingleResV2, error) {
	out := new(BRICaMSSvcSingleResV2)
	err := c.cc.Invoke(ctx, "/company.service.v1.ApiService/BRICaMSgetCustomerByIDV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BRICaMSgetCustomerByUserV2(ctx context.Context, in *BricamsGetCustomerByUserReq, opts ...grpc.CallOption) (*BRICaMSSvcSingleResV2, error) {
	out := new(BRICaMSSvcSingleResV2)
	err := c.cc.Invoke(ctx, "/company.service.v1.ApiService/BRICaMSgetCustomerByUserV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CekCompanyIDAvaibility(ctx context.Context, in *CekCompanyIDAvaibilityReq, opts ...grpc.CallOption) (*CekCompanyIDAvaibilityRes, error) {
	out := new(CekCompanyIDAvaibilityRes)
	err := c.cc.Invoke(ctx, "/company.service.v1.ApiService/CekCompanyIDAvaibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BRICaMSCustomerMapping(ctx context.Context, in *BricamsGetCustomerReq, opts ...grpc.CallOption) (*BRICaMSSvcMultipleResV2, error) {
	out := new(BRICaMSSvcMultipleResV2)
	err := c.cc.Invoke(ctx, "/company.service.v1.ApiService/BRICaMSCustomerMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CompanySubsidiaryValidation(ctx context.Context, in *CompanySubsidiaryValidationReq, opts ...grpc.CallOption) (*CompanySubsidiaryValidationRes, error) {
	out := new(CompanySubsidiaryValidationRes)
	err := c.cc.Invoke(ctx, "/company.service.v1.ApiService/CompanySubsidiaryValidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	DownloadListCompanyTasks(context.Context, *FileListCompanyTaskRequest) (*httpbody.HttpBody, error)
	CreateCompanyTask(context.Context, *CreateCompanyTaskReq) (*CreateCompanyTaskRes, error)
	DeleteCompany(context.Context, *CreateCompanyTaskReq) (*DeleteCompanyRes, error)
	DeleteCompanyTask(context.Context, *GetCompanyTaskByIDReq) (*GetCompanyTaskByIDRes, error)
	CreateCompany(context.Context, *CreateCompanyReq) (*CreateCompanyRes, error)
	ListCompanyTask(context.Context, *ListCompanyTaskReq) (*ListCompanyTaskRes, error)
	GetCompanyTaskByID(context.Context, *GetCompanyTaskByIDReq) (*GetCompanyTaskByIDRes, error)
	ListCompanyData(context.Context, *ListCompanyDataReq) (*ListCompanyDataRes, error)
	ListGroupLimit(context.Context, *ListGroupLimitReq) (*ListGroupLimitRes, error)
	ListLimit(context.Context, *ListLimitReq) (*ListLimitRes, error)
	ListCurrency(context.Context, *ListCurrencyReq) (*ListCurrencyRes, error)
	BRICaMSgetCustomer(context.Context, *BricamsGetCustomerReq) (*BricamsResponseDatas, error)
	BRICaMSgetCustomerByID(context.Context, *BricamsGetCustomerByIdReq) (*BricamsResponseData, error)
	BRICaMSgetCustomerByUser(context.Context, *BricamsGetCustomerByUserReq) (*BricamsResponseData, error)
	BRICaMSgetCustomerV2(context.Context, *BricamsGetCustomerReq) (*BRICaMSSvcMultipleResV2, error)
	BRICaMSgetCustomerByIDV2(context.Context, *BricamsGetCustomerByIdReq) (*BRICaMSSvcSingleResV2, error)
	BRICaMSgetCustomerByUserV2(context.Context, *BricamsGetCustomerByUserReq) (*BRICaMSSvcSingleResV2, error)
	CekCompanyIDAvaibility(context.Context, *CekCompanyIDAvaibilityReq) (*CekCompanyIDAvaibilityRes, error)
	BRICaMSCustomerMapping(context.Context, *BricamsGetCustomerReq) (*BRICaMSSvcMultipleResV2, error)
	CompanySubsidiaryValidation(context.Context, *CompanySubsidiaryValidationReq) (*CompanySubsidiaryValidationRes, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) DownloadListCompanyTasks(context.Context, *FileListCompanyTaskRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadListCompanyTasks not implemented")
}
func (UnimplementedApiServiceServer) CreateCompanyTask(context.Context, *CreateCompanyTaskReq) (*CreateCompanyTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompanyTask not implemented")
}
func (UnimplementedApiServiceServer) DeleteCompany(context.Context, *CreateCompanyTaskReq) (*DeleteCompanyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompany not implemented")
}
func (UnimplementedApiServiceServer) DeleteCompanyTask(context.Context, *GetCompanyTaskByIDReq) (*GetCompanyTaskByIDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompanyTask not implemented")
}
func (UnimplementedApiServiceServer) CreateCompany(context.Context, *CreateCompanyReq) (*CreateCompanyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompany not implemented")
}
func (UnimplementedApiServiceServer) ListCompanyTask(context.Context, *ListCompanyTaskReq) (*ListCompanyTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanyTask not implemented")
}
func (UnimplementedApiServiceServer) GetCompanyTaskByID(context.Context, *GetCompanyTaskByIDReq) (*GetCompanyTaskByIDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyTaskByID not implemented")
}
func (UnimplementedApiServiceServer) ListCompanyData(context.Context, *ListCompanyDataReq) (*ListCompanyDataRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanyData not implemented")
}
func (UnimplementedApiServiceServer) ListGroupLimit(context.Context, *ListGroupLimitReq) (*ListGroupLimitRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupLimit not implemented")
}
func (UnimplementedApiServiceServer) ListLimit(context.Context, *ListLimitReq) (*ListLimitRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLimit not implemented")
}
func (UnimplementedApiServiceServer) ListCurrency(context.Context, *ListCurrencyReq) (*ListCurrencyRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrency not implemented")
}
func (UnimplementedApiServiceServer) BRICaMSgetCustomer(context.Context, *BricamsGetCustomerReq) (*BricamsResponseDatas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BRICaMSgetCustomer not implemented")
}
func (UnimplementedApiServiceServer) BRICaMSgetCustomerByID(context.Context, *BricamsGetCustomerByIdReq) (*BricamsResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BRICaMSgetCustomerByID not implemented")
}
func (UnimplementedApiServiceServer) BRICaMSgetCustomerByUser(context.Context, *BricamsGetCustomerByUserReq) (*BricamsResponseData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BRICaMSgetCustomerByUser not implemented")
}
func (UnimplementedApiServiceServer) BRICaMSgetCustomerV2(context.Context, *BricamsGetCustomerReq) (*BRICaMSSvcMultipleResV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BRICaMSgetCustomerV2 not implemented")
}
func (UnimplementedApiServiceServer) BRICaMSgetCustomerByIDV2(context.Context, *BricamsGetCustomerByIdReq) (*BRICaMSSvcSingleResV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BRICaMSgetCustomerByIDV2 not implemented")
}
func (UnimplementedApiServiceServer) BRICaMSgetCustomerByUserV2(context.Context, *BricamsGetCustomerByUserReq) (*BRICaMSSvcSingleResV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BRICaMSgetCustomerByUserV2 not implemented")
}
func (UnimplementedApiServiceServer) CekCompanyIDAvaibility(context.Context, *CekCompanyIDAvaibilityReq) (*CekCompanyIDAvaibilityRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CekCompanyIDAvaibility not implemented")
}
func (UnimplementedApiServiceServer) BRICaMSCustomerMapping(context.Context, *BricamsGetCustomerReq) (*BRICaMSSvcMultipleResV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BRICaMSCustomerMapping not implemented")
}
func (UnimplementedApiServiceServer) CompanySubsidiaryValidation(context.Context, *CompanySubsidiaryValidationReq) (*CompanySubsidiaryValidationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanySubsidiaryValidation not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_DownloadListCompanyTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileListCompanyTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DownloadListCompanyTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.service.v1.ApiService/DownloadListCompanyTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DownloadListCompanyTasks(ctx, req.(*FileListCompanyTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateCompanyTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateCompanyTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.service.v1.ApiService/CreateCompanyTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateCompanyTask(ctx, req.(*CreateCompanyTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.service.v1.ApiService/DeleteCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteCompany(ctx, req.(*CreateCompanyTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteCompanyTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyTaskByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteCompanyTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.service.v1.ApiService/DeleteCompanyTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteCompanyTask(ctx, req.(*GetCompanyTaskByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.service.v1.ApiService/CreateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateCompany(ctx, req.(*CreateCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListCompanyTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompanyTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListCompanyTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.service.v1.ApiService/ListCompanyTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListCompanyTask(ctx, req.(*ListCompanyTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetCompanyTaskByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyTaskByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetCompanyTaskByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.service.v1.ApiService/GetCompanyTaskByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetCompanyTaskByID(ctx, req.(*GetCompanyTaskByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListCompanyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompanyDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListCompanyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.service.v1.ApiService/ListCompanyData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListCompanyData(ctx, req.(*ListCompanyDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListGroupLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupLimitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListGroupLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.service.v1.ApiService/ListGroupLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListGroupLimit(ctx, req.(*ListGroupLimitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLimitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.service.v1.ApiService/ListLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListLimit(ctx, req.(*ListLimitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCurrencyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.service.v1.ApiService/ListCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListCurrency(ctx, req.(*ListCurrencyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BRICaMSgetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BricamsGetCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BRICaMSgetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.service.v1.ApiService/BRICaMSgetCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BRICaMSgetCustomer(ctx, req.(*BricamsGetCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BRICaMSgetCustomerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BricamsGetCustomerByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BRICaMSgetCustomerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.service.v1.ApiService/BRICaMSgetCustomerByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BRICaMSgetCustomerByID(ctx, req.(*BricamsGetCustomerByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BRICaMSgetCustomerByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BricamsGetCustomerByUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BRICaMSgetCustomerByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.service.v1.ApiService/BRICaMSgetCustomerByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BRICaMSgetCustomerByUser(ctx, req.(*BricamsGetCustomerByUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BRICaMSgetCustomerV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BricamsGetCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BRICaMSgetCustomerV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.service.v1.ApiService/BRICaMSgetCustomerV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BRICaMSgetCustomerV2(ctx, req.(*BricamsGetCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BRICaMSgetCustomerByIDV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BricamsGetCustomerByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BRICaMSgetCustomerByIDV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.service.v1.ApiService/BRICaMSgetCustomerByIDV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BRICaMSgetCustomerByIDV2(ctx, req.(*BricamsGetCustomerByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BRICaMSgetCustomerByUserV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BricamsGetCustomerByUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BRICaMSgetCustomerByUserV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.service.v1.ApiService/BRICaMSgetCustomerByUserV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BRICaMSgetCustomerByUserV2(ctx, req.(*BricamsGetCustomerByUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CekCompanyIDAvaibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CekCompanyIDAvaibilityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CekCompanyIDAvaibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.service.v1.ApiService/CekCompanyIDAvaibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CekCompanyIDAvaibility(ctx, req.(*CekCompanyIDAvaibilityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BRICaMSCustomerMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BricamsGetCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BRICaMSCustomerMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.service.v1.ApiService/BRICaMSCustomerMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BRICaMSCustomerMapping(ctx, req.(*BricamsGetCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CompanySubsidiaryValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanySubsidiaryValidationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CompanySubsidiaryValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.service.v1.ApiService/CompanySubsidiaryValidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CompanySubsidiaryValidation(ctx, req.(*CompanySubsidiaryValidationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.service.v1.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadListCompanyTasks",
			Handler:    _ApiService_DownloadListCompanyTasks_Handler,
		},
		{
			MethodName: "CreateCompanyTask",
			Handler:    _ApiService_CreateCompanyTask_Handler,
		},
		{
			MethodName: "DeleteCompany",
			Handler:    _ApiService_DeleteCompany_Handler,
		},
		{
			MethodName: "DeleteCompanyTask",
			Handler:    _ApiService_DeleteCompanyTask_Handler,
		},
		{
			MethodName: "CreateCompany",
			Handler:    _ApiService_CreateCompany_Handler,
		},
		{
			MethodName: "ListCompanyTask",
			Handler:    _ApiService_ListCompanyTask_Handler,
		},
		{
			MethodName: "GetCompanyTaskByID",
			Handler:    _ApiService_GetCompanyTaskByID_Handler,
		},
		{
			MethodName: "ListCompanyData",
			Handler:    _ApiService_ListCompanyData_Handler,
		},
		{
			MethodName: "ListGroupLimit",
			Handler:    _ApiService_ListGroupLimit_Handler,
		},
		{
			MethodName: "ListLimit",
			Handler:    _ApiService_ListLimit_Handler,
		},
		{
			MethodName: "ListCurrency",
			Handler:    _ApiService_ListCurrency_Handler,
		},
		{
			MethodName: "BRICaMSgetCustomer",
			Handler:    _ApiService_BRICaMSgetCustomer_Handler,
		},
		{
			MethodName: "BRICaMSgetCustomerByID",
			Handler:    _ApiService_BRICaMSgetCustomerByID_Handler,
		},
		{
			MethodName: "BRICaMSgetCustomerByUser",
			Handler:    _ApiService_BRICaMSgetCustomerByUser_Handler,
		},
		{
			MethodName: "BRICaMSgetCustomerV2",
			Handler:    _ApiService_BRICaMSgetCustomerV2_Handler,
		},
		{
			MethodName: "BRICaMSgetCustomerByIDV2",
			Handler:    _ApiService_BRICaMSgetCustomerByIDV2_Handler,
		},
		{
			MethodName: "BRICaMSgetCustomerByUserV2",
			Handler:    _ApiService_BRICaMSgetCustomerByUserV2_Handler,
		},
		{
			MethodName: "CekCompanyIDAvaibility",
			Handler:    _ApiService_CekCompanyIDAvaibility_Handler,
		},
		{
			MethodName: "BRICaMSCustomerMapping",
			Handler:    _ApiService_BRICaMSCustomerMapping_Handler,
		},
		{
			MethodName: "CompanySubsidiaryValidation",
			Handler:    _ApiService_CompanySubsidiaryValidation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company_api.proto",
}
