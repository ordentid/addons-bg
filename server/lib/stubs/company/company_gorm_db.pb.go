// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: company_gorm_db.proto

package pb

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Example User
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username  string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password  string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Role      string                 `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_gorm_db_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_company_gorm_db_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_company_gorm_db_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *User) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *User) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type Company struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyID           uint64                 `protobuf:"varint,1,opt,name=companyID,proto3" json:"companyID,omitempty"`
	HoldingID           uint64                 `protobuf:"varint,2,opt,name=holdingID,proto3" json:"holdingID,omitempty"`
	GroupName           string                 `protobuf:"bytes,3,opt,name=groupName,proto3" json:"groupName,omitempty"`
	CompanyName         string                 `protobuf:"bytes,4,opt,name=companyName,proto3" json:"companyName,omitempty"`
	HoldingCompanyName  string                 `protobuf:"bytes,5,opt,name=holdingCompanyName,proto3" json:"holdingCompanyName,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,50,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CreatedByID         uint64                 `protobuf:"varint,51,opt,name=createdByID,proto3" json:"createdByID,omitempty"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,52,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	UpdatedByID         uint64                 `protobuf:"varint,53,opt,name=updatedByID,proto3" json:"updatedByID,omitempty"`
	CompanyLimits       []*CompanyLimit        `protobuf:"bytes,102,rep,name=companyLimits,proto3" json:"companyLimits,omitempty"`
	CompanyGroupLimits  []*CompanyGroupLimit   `protobuf:"bytes,103,rep,name=companyGroupLimits,proto3" json:"companyGroupLimits,omitempty"`
	SubsidiaryCompanies []*Company             `protobuf:"bytes,104,rep,name=subsidiaryCompanies,proto3" json:"subsidiaryCompanies,omitempty"`
}

func (x *Company) Reset() {
	*x = Company{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_gorm_db_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Company) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Company) ProtoMessage() {}

func (x *Company) ProtoReflect() protoreflect.Message {
	mi := &file_company_gorm_db_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Company.ProtoReflect.Descriptor instead.
func (*Company) Descriptor() ([]byte, []int) {
	return file_company_gorm_db_proto_rawDescGZIP(), []int{1}
}

func (x *Company) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *Company) GetHoldingID() uint64 {
	if x != nil {
		return x.HoldingID
	}
	return 0
}

func (x *Company) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Company) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *Company) GetHoldingCompanyName() string {
	if x != nil {
		return x.HoldingCompanyName
	}
	return ""
}

func (x *Company) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Company) GetCreatedByID() uint64 {
	if x != nil {
		return x.CreatedByID
	}
	return 0
}

func (x *Company) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Company) GetUpdatedByID() uint64 {
	if x != nil {
		return x.UpdatedByID
	}
	return 0
}

func (x *Company) GetCompanyLimits() []*CompanyLimit {
	if x != nil {
		return x.CompanyLimits
	}
	return nil
}

func (x *Company) GetCompanyGroupLimits() []*CompanyGroupLimit {
	if x != nil {
		return x.CompanyGroupLimits
	}
	return nil
}

func (x *Company) GetSubsidiaryCompanies() []*Company {
	if x != nil {
		return x.SubsidiaryCompanies
	}
	return nil
}

type CompanyGroupLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HoldingCompanyID uint64                 `protobuf:"varint,1,opt,name=holdingCompanyID,proto3" json:"holdingCompanyID,omitempty"`
	CurrencyID       uint64                 `protobuf:"varint,2,opt,name=currencyID,proto3" json:"currencyID,omitempty"`
	Currency         *Currency              `protobuf:"bytes,101,opt,name=currency,proto3" json:"currency,omitempty"`
	Limit            uint64                 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,50,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CreatedByID      uint64                 `protobuf:"varint,51,opt,name=createdByID,proto3" json:"createdByID,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,52,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	UpdatedByID      uint64                 `protobuf:"varint,53,opt,name=updatedByID,proto3" json:"updatedByID,omitempty"`
}

func (x *CompanyGroupLimit) Reset() {
	*x = CompanyGroupLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_gorm_db_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyGroupLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyGroupLimit) ProtoMessage() {}

func (x *CompanyGroupLimit) ProtoReflect() protoreflect.Message {
	mi := &file_company_gorm_db_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyGroupLimit.ProtoReflect.Descriptor instead.
func (*CompanyGroupLimit) Descriptor() ([]byte, []int) {
	return file_company_gorm_db_proto_rawDescGZIP(), []int{2}
}

func (x *CompanyGroupLimit) GetHoldingCompanyID() uint64 {
	if x != nil {
		return x.HoldingCompanyID
	}
	return 0
}

func (x *CompanyGroupLimit) GetCurrencyID() uint64 {
	if x != nil {
		return x.CurrencyID
	}
	return 0
}

func (x *CompanyGroupLimit) GetCurrency() *Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *CompanyGroupLimit) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CompanyGroupLimit) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CompanyGroupLimit) GetCreatedByID() uint64 {
	if x != nil {
		return x.CreatedByID
	}
	return 0
}

func (x *CompanyGroupLimit) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CompanyGroupLimit) GetUpdatedByID() uint64 {
	if x != nil {
		return x.UpdatedByID
	}
	return 0
}

type CompanyLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyID   uint64                 `protobuf:"varint,1,opt,name=companyID,proto3" json:"companyID,omitempty"`
	CurrencyID  uint64                 `protobuf:"varint,2,opt,name=currencyID,proto3" json:"currencyID,omitempty"`
	Currency    *Currency              `protobuf:"bytes,101,opt,name=currency,proto3" json:"currency,omitempty"`
	Limit       uint64                 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,50,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CreatedByID uint64                 `protobuf:"varint,51,opt,name=createdByID,proto3" json:"createdByID,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,52,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	UpdatedByID uint64                 `protobuf:"varint,53,opt,name=updatedByID,proto3" json:"updatedByID,omitempty"`
}

func (x *CompanyLimit) Reset() {
	*x = CompanyLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_gorm_db_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyLimit) ProtoMessage() {}

func (x *CompanyLimit) ProtoReflect() protoreflect.Message {
	mi := &file_company_gorm_db_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyLimit.ProtoReflect.Descriptor instead.
func (*CompanyLimit) Descriptor() ([]byte, []int) {
	return file_company_gorm_db_proto_rawDescGZIP(), []int{3}
}

func (x *CompanyLimit) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *CompanyLimit) GetCurrencyID() uint64 {
	if x != nil {
		return x.CurrencyID
	}
	return 0
}

func (x *CompanyLimit) GetCurrency() *Currency {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *CompanyLimit) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CompanyLimit) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CompanyLimit) GetCreatedByID() uint64 {
	if x != nil {
		return x.CreatedByID
	}
	return 0
}

func (x *CompanyLimit) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CompanyLimit) GetUpdatedByID() uint64 {
	if x != nil {
		return x.UpdatedByID
	}
	return 0
}

type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyID  uint64                 `protobuf:"varint,1,opt,name=currencyID,proto3" json:"currencyID,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code        string                 `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,50,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	CreatedByID uint64                 `protobuf:"varint,51,opt,name=createdByID,proto3" json:"createdByID,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,52,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	UpdatedByID uint64                 `protobuf:"varint,53,opt,name=updatedByID,proto3" json:"updatedByID,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_gorm_db_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_company_gorm_db_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_company_gorm_db_proto_rawDescGZIP(), []int{4}
}

func (x *Currency) GetCurrencyID() uint64 {
	if x != nil {
		return x.CurrencyID
	}
	return 0
}

func (x *Currency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Currency) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Currency) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Currency) GetCreatedByID() uint64 {
	if x != nil {
		return x.CreatedByID
	}
	return 0
}

func (x *Currency) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Currency) GetUpdatedByID() uint64 {
	if x != nil {
		return x.UpdatedByID
	}
	return 0
}

type GroupIDStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyID uint64 `protobuf:"varint,1,opt,name=companyID,proto3" json:"companyID,omitempty"`
	Ids       string `protobuf:"bytes,8,opt,name=ids,proto3" json:"ids,omitempty"`
}

func (x *GroupIDStore) Reset() {
	*x = GroupIDStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_gorm_db_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupIDStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupIDStore) ProtoMessage() {}

func (x *GroupIDStore) ProtoReflect() protoreflect.Message {
	mi := &file_company_gorm_db_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupIDStore.ProtoReflect.Descriptor instead.
func (*GroupIDStore) Descriptor() ([]byte, []int) {
	return file_company_gorm_db_proto_rawDescGZIP(), []int{5}
}

func (x *GroupIDStore) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *GroupIDStore) GetIds() string {
	if x != nil {
		return x.Ids
	}
	return ""
}

var File_company_gorm_db_proto protoreflect.FileDescriptor

var file_company_gorm_db_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x67, 0x6f, 0x72, 0x6d, 0x5f, 0x64,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2b, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfe,
	0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x0d, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19, 0x06, 0x0a, 0x04, 0x28, 0x01,
	0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xe0, 0x41, 0x02, 0xe2, 0xdf, 0x1f,
	0x02, 0x20, 0x01, 0xba, 0xb9, 0x19, 0x06, 0x0a, 0x04, 0x30, 0x01, 0x40, 0x01, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe0, 0x41, 0x02, 0xe2, 0xdf,
	0x1f, 0x02, 0x20, 0x01, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0xba, 0xb9, 0x19, 0x0a,
	0x0a, 0x08, 0x3a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x40, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x3a, 0x0d, 0xba, 0xb9, 0x19, 0x09, 0x08, 0x01, 0x1a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22,
	0xdf, 0x07, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x3c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1e,
	0xba, 0xb9, 0x19, 0x13, 0x0a, 0x11, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x44, 0x28, 0x01, 0x40, 0x01, 0x48, 0x01, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x68, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1a, 0xba, 0xb9,
	0x19, 0x0f, 0x0a, 0x0d, 0x0a, 0x09, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x40,
	0x01, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xba, 0xb9, 0x19, 0x1b, 0x0a, 0x19, 0x0a, 0x09,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0c, 0x76, 0x61, 0x72, 0x63, 0x68,
	0x61, 0x72, 0x28, 0x32, 0x35, 0x35, 0x29, 0x92, 0x41, 0x00, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xba, 0xb9, 0x19, 0x1d,
	0x0a, 0x1b, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x0c, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x28, 0x32, 0x35, 0x35, 0x29, 0x92, 0x41, 0x00,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a,
	0x12, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xba, 0xb9, 0x19, 0x14, 0x0a,
	0x12, 0x0a, 0x0e, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x40, 0x01, 0x52, 0x12, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01,
	0xe0, 0x41, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x41,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x1f, 0xba, 0xb9, 0x19, 0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x40, 0x01, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x45, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0b, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1f, 0xba,
	0xb9, 0x19, 0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x49, 0x44, 0x40, 0x01, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x68, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x66, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x42, 0x20, 0xba, 0xb9, 0x19, 0x1c, 0x2a, 0x1a, 0x0a, 0x09, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x44, 0x40, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x67, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x2e, 0xba, 0xb9, 0x19, 0x2a, 0x2a,
	0x28, 0x0a, 0x10, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x40, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x6f, 0x0a,
	0x13, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x69, 0x65, 0x73, 0x18, 0x68, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x20, 0xba, 0xb9, 0x19, 0x1c, 0x2a, 0x1a, 0x0a,
	0x09, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x6f,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x40, 0x01, 0x52, 0x13, 0x73, 0x75, 0x62, 0x73, 0x69,
	0x64, 0x69, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x3a, 0x11,
	0xba, 0xb9, 0x19, 0x0d, 0x08, 0x01, 0x1a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65,
	0x73, 0x22, 0xee, 0x04, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4f, 0x0a, 0x10, 0x68, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x23, 0xba, 0xb9, 0x19, 0x18, 0x0a, 0x16, 0x0a, 0x10, 0x48, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x28, 0x01, 0x40, 0x01, 0x92,
	0x41, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x10, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1d, 0xba, 0xb9,
	0x19, 0x12, 0x0a, 0x10, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44,
	0x28, 0x01, 0x40, 0x01, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x61, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x27, 0xba, 0xb9, 0x19, 0x20, 0x22, 0x1e, 0x0a,
	0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x40, 0x01, 0x38, 0x01, 0xe0, 0x41, 0x03,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1e, 0xba, 0xb9, 0x19, 0x13, 0x0a,
	0x11, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x06, 0x62, 0x69, 0x67, 0x69, 0x6e, 0x74,
	0x40, 0x01, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x45, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x0b, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1f, 0xba, 0xb9,
	0x19, 0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49,
	0x44, 0x40, 0x01, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xba, 0xb9, 0x19, 0x04, 0x0a,
	0x02, 0x40, 0x01, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1f, 0xba, 0xb9, 0x19, 0x11, 0x0a, 0x0f, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x40, 0x01, 0x92, 0x41, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x44, 0x3a, 0x1c, 0xba, 0xb9, 0x19, 0x18, 0x08, 0x01, 0x1a, 0x14, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x22, 0xce, 0x04, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1c, 0xba, 0xb9, 0x19, 0x11, 0x0a, 0x0f, 0x0a, 0x09,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x28, 0x01, 0x40, 0x01, 0x92, 0x41, 0x04,
	0x9a, 0x02, 0x01, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12,
	0x3d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x1d, 0xba, 0xb9, 0x19, 0x12, 0x0a, 0x10, 0x0a, 0x0a, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x28, 0x01, 0x40, 0x01, 0x92, 0x41, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x61,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x27,
	0xba, 0xb9, 0x19, 0x20, 0x22, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x44, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44,
	0x40, 0x01, 0x38, 0x01, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x34, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x1e, 0xba, 0xb9, 0x19, 0x13, 0x0a, 0x11, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x06, 0x62, 0x69, 0x67, 0x69, 0x6e, 0x74, 0x40, 0x01, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01,
	0xe0, 0x41, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x41,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x33, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x1f, 0xba, 0xb9, 0x19, 0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x40, 0x01, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x45, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x0b, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1f, 0xba,
	0xb9, 0x19, 0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x49, 0x44, 0x40, 0x01, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x3a, 0x16, 0xba, 0xb9, 0x19,
	0x12, 0x08, 0x01, 0x1a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x22, 0xdf, 0x03, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x1b, 0xba, 0xb9, 0x19, 0x14, 0x0a, 0x12, 0x0a, 0x0a, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x28, 0x01, 0x40, 0x01, 0x48, 0x01, 0xe0, 0x41,
	0x03, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x36, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xe2, 0xdf, 0x1f,
	0x02, 0x20, 0x01, 0xba, 0xb9, 0x19, 0x18, 0x0a, 0x16, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x0c, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x28, 0x32, 0x35, 0x35, 0x29, 0x40, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x22, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0xba, 0xb9, 0x19, 0x18, 0x0a,
	0x16, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72,
	0x28, 0x32, 0x35, 0x35, 0x29, 0x40, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xba, 0xb9,
	0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x49, 0x44, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1f, 0xba, 0xb9, 0x19, 0x11, 0x0a,
	0x0f, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x40, 0x01,
	0x92, 0x41, 0x04, 0x9a, 0x02, 0x01, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01,
	0xe0, 0x41, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x41,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x1f, 0xba, 0xb9, 0x19, 0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x40, 0x01, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49,
	0x44, 0x3a, 0x12, 0xba, 0xb9, 0x19, 0x0e, 0x08, 0x01, 0x1a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1e, 0xba, 0xb9, 0x19, 0x13, 0x0a,
	0x11, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x28, 0x01, 0x40, 0x01,
	0x48, 0x01, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x12, 0xba, 0xb9, 0x19, 0x0e, 0x0a, 0x0c, 0x0a, 0x03, 0x49, 0x44, 0x53, 0x12, 0x05,
	0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x52, 0x03, 0x69, 0x64, 0x73, 0x3a, 0x16, 0xba, 0xb9, 0x19, 0x12,
	0x08, 0x01, 0x1a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_company_gorm_db_proto_rawDescOnce sync.Once
	file_company_gorm_db_proto_rawDescData = file_company_gorm_db_proto_rawDesc
)

func file_company_gorm_db_proto_rawDescGZIP() []byte {
	file_company_gorm_db_proto_rawDescOnce.Do(func() {
		file_company_gorm_db_proto_rawDescData = protoimpl.X.CompressGZIP(file_company_gorm_db_proto_rawDescData)
	})
	return file_company_gorm_db_proto_rawDescData
}

var file_company_gorm_db_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_company_gorm_db_proto_goTypes = []interface{}{
	(*User)(nil),                  // 0: company.service.v1.User
	(*Company)(nil),               // 1: company.service.v1.Company
	(*CompanyGroupLimit)(nil),     // 2: company.service.v1.CompanyGroupLimit
	(*CompanyLimit)(nil),          // 3: company.service.v1.CompanyLimit
	(*Currency)(nil),              // 4: company.service.v1.Currency
	(*GroupIDStore)(nil),          // 5: company.service.v1.GroupIDStore
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_company_gorm_db_proto_depIdxs = []int32{
	6,  // 0: company.service.v1.User.created_at:type_name -> google.protobuf.Timestamp
	6,  // 1: company.service.v1.User.updated_at:type_name -> google.protobuf.Timestamp
	6,  // 2: company.service.v1.User.deleted_at:type_name -> google.protobuf.Timestamp
	6,  // 3: company.service.v1.Company.createdAt:type_name -> google.protobuf.Timestamp
	6,  // 4: company.service.v1.Company.updatedAt:type_name -> google.protobuf.Timestamp
	3,  // 5: company.service.v1.Company.companyLimits:type_name -> company.service.v1.CompanyLimit
	2,  // 6: company.service.v1.Company.companyGroupLimits:type_name -> company.service.v1.CompanyGroupLimit
	1,  // 7: company.service.v1.Company.subsidiaryCompanies:type_name -> company.service.v1.Company
	4,  // 8: company.service.v1.CompanyGroupLimit.currency:type_name -> company.service.v1.Currency
	6,  // 9: company.service.v1.CompanyGroupLimit.createdAt:type_name -> google.protobuf.Timestamp
	6,  // 10: company.service.v1.CompanyGroupLimit.updatedAt:type_name -> google.protobuf.Timestamp
	4,  // 11: company.service.v1.CompanyLimit.currency:type_name -> company.service.v1.Currency
	6,  // 12: company.service.v1.CompanyLimit.createdAt:type_name -> google.protobuf.Timestamp
	6,  // 13: company.service.v1.CompanyLimit.updatedAt:type_name -> google.protobuf.Timestamp
	6,  // 14: company.service.v1.Currency.createdAt:type_name -> google.protobuf.Timestamp
	6,  // 15: company.service.v1.Currency.updatedAt:type_name -> google.protobuf.Timestamp
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_company_gorm_db_proto_init() }
func file_company_gorm_db_proto_init() {
	if File_company_gorm_db_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_company_gorm_db_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_gorm_db_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Company); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_gorm_db_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyGroupLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_gorm_db_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_gorm_db_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_gorm_db_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupIDStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_company_gorm_db_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_company_gorm_db_proto_goTypes,
		DependencyIndexes: file_company_gorm_db_proto_depIdxs,
		MessageInfos:      file_company_gorm_db_proto_msgTypes,
	}.Build()
	File_company_gorm_db_proto = out.File
	file_company_gorm_db_proto_rawDesc = nil
	file_company_gorm_db_proto_goTypes = nil
	file_company_gorm_db_proto_depIdxs = nil
}
