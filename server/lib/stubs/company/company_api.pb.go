// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: company_api.proto

package pb

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TempGenToken_Role int32

const (
	TempGenToken_bankadmin    TempGenToken_Role = 0
	TempGenToken_companyadmin TempGenToken_Role = 1
	TempGenToken_companyuser  TempGenToken_Role = 2
)

// Enum value maps for TempGenToken_Role.
var (
	TempGenToken_Role_name = map[int32]string{
		0: "bankadmin",
		1: "companyadmin",
		2: "companyuser",
	}
	TempGenToken_Role_value = map[string]int32{
		"bankadmin":    0,
		"companyadmin": 1,
		"companyuser":  2,
	}
)

func (x TempGenToken_Role) Enum() *TempGenToken_Role {
	p := new(TempGenToken_Role)
	*p = x
	return p
}

func (x TempGenToken_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TempGenToken_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_company_api_proto_enumTypes[0].Descriptor()
}

func (TempGenToken_Role) Type() protoreflect.EnumType {
	return &file_company_api_proto_enumTypes[0]
}

func (x TempGenToken_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TempGenToken_Role.Descriptor instead.
func (TempGenToken_Role) EnumDescriptor() ([]byte, []int) {
	return file_company_api_proto_rawDescGZIP(), []int{6, 0}
}

type DeleteCompanyRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteCompanyRes) Reset() {
	*x = DeleteCompanyRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCompanyRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCompanyRes) ProtoMessage() {}

func (x *DeleteCompanyRes) ProtoReflect() protoreflect.Message {
	mi := &file_company_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCompanyRes.ProtoReflect.Descriptor instead.
func (*DeleteCompanyRes) Descriptor() ([]byte, []int) {
	return file_company_api_proto_rawDescGZIP(), []int{0}
}

func (x *DeleteCompanyRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CekCompanyIDAvaibilityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyID uint64 `protobuf:"varint,1,opt,name=companyID,proto3" json:"companyID,omitempty"`
	TaskID    uint64 `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
	HoldingID uint64 `protobuf:"varint,3,opt,name=holdingID,proto3" json:"holdingID,omitempty"`
}

func (x *CekCompanyIDAvaibilityReq) Reset() {
	*x = CekCompanyIDAvaibilityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CekCompanyIDAvaibilityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CekCompanyIDAvaibilityReq) ProtoMessage() {}

func (x *CekCompanyIDAvaibilityReq) ProtoReflect() protoreflect.Message {
	mi := &file_company_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CekCompanyIDAvaibilityReq.ProtoReflect.Descriptor instead.
func (*CekCompanyIDAvaibilityReq) Descriptor() ([]byte, []int) {
	return file_company_api_proto_rawDescGZIP(), []int{1}
}

func (x *CekCompanyIDAvaibilityReq) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *CekCompanyIDAvaibilityReq) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CekCompanyIDAvaibilityReq) GetHoldingID() uint64 {
	if x != nil {
		return x.HoldingID
	}
	return 0
}

type CompanySubsidiaryValidationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyID uint64 `protobuf:"varint,1,opt,name=companyID,proto3" json:"companyID,omitempty"`
	TaskID    uint64 `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
	HoldingID uint64 `protobuf:"varint,3,opt,name=holdingID,proto3" json:"holdingID,omitempty"`
}

func (x *CompanySubsidiaryValidationReq) Reset() {
	*x = CompanySubsidiaryValidationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanySubsidiaryValidationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanySubsidiaryValidationReq) ProtoMessage() {}

func (x *CompanySubsidiaryValidationReq) ProtoReflect() protoreflect.Message {
	mi := &file_company_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanySubsidiaryValidationReq.ProtoReflect.Descriptor instead.
func (*CompanySubsidiaryValidationReq) Descriptor() ([]byte, []int) {
	return file_company_api_proto_rawDescGZIP(), []int{2}
}

func (x *CompanySubsidiaryValidationReq) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *CompanySubsidiaryValidationReq) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CompanySubsidiaryValidationReq) GetHoldingID() uint64 {
	if x != nil {
		return x.HoldingID
	}
	return 0
}

type CompanySubsidiaryValidationRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid   bool   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CompanySubsidiaryValidationRes) Reset() {
	*x = CompanySubsidiaryValidationRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanySubsidiaryValidationRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanySubsidiaryValidationRes) ProtoMessage() {}

func (x *CompanySubsidiaryValidationRes) ProtoReflect() protoreflect.Message {
	mi := &file_company_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanySubsidiaryValidationRes.ProtoReflect.Descriptor instead.
func (*CompanySubsidiaryValidationRes) Descriptor() ([]byte, []int) {
	return file_company_api_proto_rawDescGZIP(), []int{3}
}

func (x *CompanySubsidiaryValidationRes) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *CompanySubsidiaryValidationRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CheckCompanyIDTaskAndData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyID uint64 `protobuf:"varint,1,opt,name=companyID,proto3" json:"companyID,omitempty"`
	TaskID    uint64 `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
	HoldingID uint64 `protobuf:"varint,3,opt,name=holdingID,proto3" json:"holdingID,omitempty"`
}

func (x *CheckCompanyIDTaskAndData) Reset() {
	*x = CheckCompanyIDTaskAndData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCompanyIDTaskAndData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCompanyIDTaskAndData) ProtoMessage() {}

func (x *CheckCompanyIDTaskAndData) ProtoReflect() protoreflect.Message {
	mi := &file_company_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCompanyIDTaskAndData.ProtoReflect.Descriptor instead.
func (*CheckCompanyIDTaskAndData) Descriptor() ([]byte, []int) {
	return file_company_api_proto_rawDescGZIP(), []int{4}
}

func (x *CheckCompanyIDTaskAndData) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *CheckCompanyIDTaskAndData) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CheckCompanyIDTaskAndData) GetHoldingID() uint64 {
	if x != nil {
		return x.HoldingID
	}
	return 0
}

type CekCompanyIDAvaibilityRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available bool   `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	Status    string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CekCompanyIDAvaibilityRes) Reset() {
	*x = CekCompanyIDAvaibilityRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CekCompanyIDAvaibilityRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CekCompanyIDAvaibilityRes) ProtoMessage() {}

func (x *CekCompanyIDAvaibilityRes) ProtoReflect() protoreflect.Message {
	mi := &file_company_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CekCompanyIDAvaibilityRes.ProtoReflect.Descriptor instead.
func (*CekCompanyIDAvaibilityRes) Descriptor() ([]byte, []int) {
	return file_company_api_proto_rawDescGZIP(), []int{5}
}

func (x *CekCompanyIDAvaibilityRes) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *CekCompanyIDAvaibilityRes) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type TempGenToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role TempGenToken_Role `protobuf:"varint,1,opt,name=role,proto3,enum=company.service.v1.TempGenToken_Role" json:"role,omitempty"`
}

func (x *TempGenToken) Reset() {
	*x = TempGenToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempGenToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempGenToken) ProtoMessage() {}

func (x *TempGenToken) ProtoReflect() protoreflect.Message {
	mi := &file_company_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempGenToken.ProtoReflect.Descriptor instead.
func (*TempGenToken) Descriptor() ([]byte, []int) {
	return file_company_api_proto_rawDescGZIP(), []int{6}
}

func (x *TempGenToken) GetRole() TempGenToken_Role {
	if x != nil {
		return x.Role
	}
	return TempGenToken_bankadmin
}

var File_company_api_proto protoreflect.FileDescriptor

var file_company_api_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2c, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x6f, 0x0a, 0x19, 0x43, 0x65, 0x6b, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x44, 0x41, 0x76, 0x61, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x68, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x22, 0x74, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x53, 0x75, 0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x22, 0x50, 0x0a, 0x1e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x75, 0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72,
	0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6f,
	0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44,
	0x54, 0x61, 0x73, 0x6b, 0x41, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x22,
	0x51, 0x0a, 0x19, 0x43, 0x65, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x41,
	0x76, 0x61, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x47, 0x65, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x47, 0x65, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x38,
	0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x75, 0x73, 0x65, 0x72, 0x10, 0x02, 0x32, 0xe0, 0x21, 0x0a, 0x0a, 0x41, 0x70, 0x69,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xd9, 0x01, 0x0a, 0x18, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x77, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x7b, 0x66, 0x69, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x7d, 0x92, 0x41, 0x49, 0x12, 0x1c, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x69, 0x65, 0x73, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x29, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41,
	0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x20, 0x74,
	0x61, 0x73, 0x6b, 0x12, 0xdf, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x22, 0x76, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x37, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x3a, 0x01, 0x2a, 0x5a, 0x1f, 0x1a, 0x1a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x74, 0x61, 0x73, 0x6b,
	0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x36, 0x12,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20,
	0x74, 0x61, 0x73, 0x6b, 0x1a, 0x1d, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x74,
	0x61, 0x73, 0x6b, 0x62, 0x00, 0x12, 0x5f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x12, 0xc6, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x29, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x7b, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x7d, 0x92, 0x41, 0x36, 0x12, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x1d,
	0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x62, 0x00, 0x12,
	0x5d, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0xb6,
	0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x92, 0x41, 0x37,
	0x12, 0x12, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20,
	0x74, 0x61, 0x73, 0x6b, 0x1a, 0x1f, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65,
	0x20, 0x74, 0x61, 0x73, 0x6b, 0x62, 0x00, 0x12, 0xc8, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x49, 0x44, 0x12, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f,
	0x7b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x7d, 0x92, 0x41, 0x37, 0x12, 0x12, 0x47, 0x65, 0x74,
	0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x1a,
	0x1f, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65,
	0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b,
	0x62, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x92, 0x41, 0x02, 0x62, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12,
	0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x92, 0x41, 0x02, 0x62, 0x00, 0x12, 0x70,
	0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x20, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x22,
	0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x92, 0x41, 0x02, 0x62, 0x00,
	0x12, 0x7c, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x17, 0x12, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x92, 0x41, 0x02, 0x62, 0x00, 0x12, 0xfd,
	0x01, 0x0a, 0x12, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x67, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x61,
	0x6d, 0x73, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x22, 0x91, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2f, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x92, 0x41, 0x69, 0x12, 0x2b, 0x47, 0x65, 0x74, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x29, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x20, 0x41,
	0x50, 0x49, 0x1a, 0x38, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x67, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x28, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x29, 0x20, 0x66, 0x72, 0x6f, 0x6d,
	0x20, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x20, 0x41, 0x50, 0x49, 0x62, 0x00, 0x12, 0x9c,
	0x02, 0x0a, 0x16, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x67, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72,
	0x69, 0x63, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xa9, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73,
	0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x75, 0x12, 0x31, 0x47, 0x65, 0x74, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x29, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d,
	0x53, 0x20, 0x41, 0x50, 0x49, 0x20, 0x42, 0x79, 0x20, 0x49, 0x44, 0x1a, 0x3e, 0x54, 0x68, 0x69,
	0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x28, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x29, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d,
	0x53, 0x20, 0x41, 0x50, 0x49, 0x20, 0x42, 0x79, 0x20, 0x49, 0x44, 0x62, 0x00, 0x12, 0xc8, 0x02,
	0x0a, 0x18, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x67, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x22, 0xd1, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x62, 0x72, 0x69, 0x63,
	0x61, 0x6d, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x98, 0x01,
	0x12, 0x44, 0x47, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x29, 0x20, 0x66, 0x72, 0x6f,
	0x6d, 0x20, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x20, 0x41, 0x50, 0x49, 0x20, 0x42, 0x79,
	0x20, 0x55, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x20, 0x62,
	0x79, 0x20, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x4e, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x28, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x29, 0x20,
	0x66, 0x72, 0x6f, 0x6d, 0x20, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x55, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x20, 0x62,
	0x79, 0x20, 0x75, 0x73, 0x65, 0x72, 0x62, 0x00, 0x12, 0x86, 0x02, 0x0a, 0x14, 0x42, 0x52, 0x49,
	0x43, 0x61, 0x4d, 0x53, 0x67, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56,
	0x32, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x53, 0x76, 0x63, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x56, 0x32, 0x22, 0x95, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x12, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2f, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x2d, 0x73, 0x76, 0x63, 0x2f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x92, 0x41, 0x69, 0x12, 0x2b, 0x47, 0x65, 0x74, 0x20, 0x4c, 0x69,
	0x73, 0x74, 0x20, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x29, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d,
	0x53, 0x20, 0x41, 0x50, 0x49, 0x1a, 0x38, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x28, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x29, 0x20, 0x66,
	0x72, 0x6f, 0x6d, 0x20, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x20, 0x41, 0x50, 0x49, 0x62,
	0x00, 0x12, 0xa4, 0x02, 0x0a, 0x18, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x67, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x56, 0x32, 0x12, 0x2d,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x53, 0x76, 0x63, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x56, 0x32, 0x22, 0xad, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2f, 0x12, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f,
	0x62, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x2d, 0x73, 0x76, 0x63, 0x2f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x92, 0x41, 0x75, 0x12, 0x31, 0x47, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x29, 0x20,
	0x66, 0x72, 0x6f, 0x6d, 0x20, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x42, 0x79, 0x20, 0x49, 0x44, 0x1a, 0x3e, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x28, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x29, 0x20,
	0x66, 0x72, 0x6f, 0x6d, 0x20, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x42, 0x79, 0x20, 0x49, 0x44, 0x62, 0x00, 0x12, 0xd0, 0x02, 0x0a, 0x1a, 0x42, 0x52, 0x49,
	0x43, 0x61, 0x4d, 0x53, 0x67, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x56, 0x32, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69,
	0x63, 0x61, 0x6d, 0x73, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x52,
	0x49, 0x43, 0x61, 0x4d, 0x53, 0x53, 0x76, 0x63, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x56, 0x32, 0x22, 0xd5, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x62, 0x72, 0x69, 0x63, 0x61,
	0x6d, 0x73, 0x2d, 0x73, 0x76, 0x63, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92,
	0x41, 0x98, 0x01, 0x12, 0x44, 0x47, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x29, 0x20,
	0x66, 0x72, 0x6f, 0x6d, 0x20, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x42, 0x79, 0x20, 0x55, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x77, 0x6e, 0x65,
	0x64, 0x20, 0x62, 0x79, 0x20, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x4e, 0x54, 0x68, 0x69, 0x73, 0x20,
	0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x20, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x28, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x29, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x20,
	0x41, 0x50, 0x49, 0x20, 0x55, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x77, 0x6e, 0x65,
	0x64, 0x20, 0x62, 0x79, 0x20, 0x75, 0x73, 0x65, 0x72, 0x62, 0x00, 0x12, 0xfa, 0x01, 0x0a, 0x16,
	0x43, 0x65, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x41, 0x76, 0x61, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6b, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x41, 0x76, 0x61, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6b, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x41, 0x76, 0x61, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x22, 0x81, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x74, 0x61, 0x73, 0x6b,
	0x2f, 0x61, 0x76, 0x61, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x7b, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x7d, 0x92, 0x41, 0x4e, 0x12, 0x19, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x20, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x2f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x69, 0x66, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69, 0x62, 0x65, 0x6c,
	0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x62, 0x00, 0x12, 0xa7, 0x02, 0x0a, 0x16, 0x42, 0x52, 0x49,
	0x43, 0x61, 0x4d, 0x53, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x2b,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x53, 0x76, 0x63, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x56, 0x32, 0x22, 0xb4, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x92,
	0x41, 0x8f, 0x01, 0x12, 0x3e, 0x47, 0x65, 0x74, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x29, 0x20,
	0x66, 0x72, 0x6f, 0x6d, 0x20, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x1a, 0x4b, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x67, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x28, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x29, 0x20, 0x66, 0x72, 0x6f,
	0x6d, 0x20, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x20, 0x41, 0x50, 0x49, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x62, 0x00, 0x12, 0xf6, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x75,
	0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53,
	0x75, 0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x53, 0x75, 0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x22, 0x6f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2f, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72, 0x79, 0x2d, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x92, 0x41, 0x42, 0x12, 0x1e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x20, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x49, 0x44, 0x20, 0x54, 0x61, 0x73, 0x6b,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x1e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x20, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x49, 0x44, 0x20, 0x54, 0x61, 0x73, 0x6b,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x44, 0x61, 0x74, 0x61, 0x62, 0x00, 0x42, 0x72, 0x5a, 0x04, 0x2e,
	0x2f, 0x70, 0x62, 0x92, 0x41, 0x69, 0x5a, 0x59, 0x0a, 0x57, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72,
	0x65, 0x72, 0x12, 0x4d, 0x08, 0x02, 0x12, 0x38, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x3a, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x20, 0x3c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e,
	0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x02, 0x62, 0x0c, 0x0a, 0x0a, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x00, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_company_api_proto_rawDescOnce sync.Once
	file_company_api_proto_rawDescData = file_company_api_proto_rawDesc
)

func file_company_api_proto_rawDescGZIP() []byte {
	file_company_api_proto_rawDescOnce.Do(func() {
		file_company_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_company_api_proto_rawDescData)
	})
	return file_company_api_proto_rawDescData
}

var file_company_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_company_api_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_company_api_proto_goTypes = []interface{}{
	(TempGenToken_Role)(0),                 // 0: company.service.v1.TempGenToken.Role
	(*DeleteCompanyRes)(nil),               // 1: company.service.v1.DeleteCompanyRes
	(*CekCompanyIDAvaibilityReq)(nil),      // 2: company.service.v1.CekCompanyIDAvaibilityReq
	(*CompanySubsidiaryValidationReq)(nil), // 3: company.service.v1.CompanySubsidiaryValidationReq
	(*CompanySubsidiaryValidationRes)(nil), // 4: company.service.v1.CompanySubsidiaryValidationRes
	(*CheckCompanyIDTaskAndData)(nil),      // 5: company.service.v1.CheckCompanyIDTaskAndData
	(*CekCompanyIDAvaibilityRes)(nil),      // 6: company.service.v1.CekCompanyIDAvaibilityRes
	(*TempGenToken)(nil),                   // 7: company.service.v1.TempGenToken
	(*FileListCompanyTaskRequest)(nil),     // 8: company.service.v1.FileListCompanyTaskRequest
	(*CreateCompanyTaskReq)(nil),           // 9: company.service.v1.CreateCompanyTaskReq
	(*GetCompanyTaskByIDReq)(nil),          // 10: company.service.v1.GetCompanyTaskByIDReq
	(*CreateCompanyReq)(nil),               // 11: company.service.v1.CreateCompanyReq
	(*ListCompanyTaskReq)(nil),             // 12: company.service.v1.ListCompanyTaskReq
	(*ListCompanyDataReq)(nil),             // 13: company.service.v1.ListCompanyDataReq
	(*ListGroupLimitReq)(nil),              // 14: company.service.v1.ListGroupLimitReq
	(*ListLimitReq)(nil),                   // 15: company.service.v1.ListLimitReq
	(*ListCurrencyReq)(nil),                // 16: company.service.v1.ListCurrencyReq
	(*BricamsGetCustomerReq)(nil),          // 17: company.service.v1.BricamsGetCustomerReq
	(*BricamsGetCustomerByIdReq)(nil),      // 18: company.service.v1.BricamsGetCustomerByIdReq
	(*BricamsGetCustomerByUserReq)(nil),    // 19: company.service.v1.BricamsGetCustomerByUserReq
	(*httpbody.HttpBody)(nil),              // 20: google.api.HttpBody
	(*CreateCompanyTaskRes)(nil),           // 21: company.service.v1.CreateCompanyTaskRes
	(*GetCompanyTaskByIDRes)(nil),          // 22: company.service.v1.GetCompanyTaskByIDRes
	(*CreateCompanyRes)(nil),               // 23: company.service.v1.CreateCompanyRes
	(*ListCompanyTaskRes)(nil),             // 24: company.service.v1.ListCompanyTaskRes
	(*ListCompanyDataRes)(nil),             // 25: company.service.v1.ListCompanyDataRes
	(*ListGroupLimitRes)(nil),              // 26: company.service.v1.ListGroupLimitRes
	(*ListLimitRes)(nil),                   // 27: company.service.v1.ListLimitRes
	(*ListCurrencyRes)(nil),                // 28: company.service.v1.ListCurrencyRes
	(*BricamsResponseDatas)(nil),           // 29: company.service.v1.BricamsResponseDatas
	(*BricamsResponseData)(nil),            // 30: company.service.v1.BricamsResponseData
	(*BRICaMSSvcMultipleResV2)(nil),        // 31: company.service.v1.BRICaMSSvcMultipleResV2
	(*BRICaMSSvcSingleResV2)(nil),          // 32: company.service.v1.BRICaMSSvcSingleResV2
}
var file_company_api_proto_depIdxs = []int32{
	0,  // 0: company.service.v1.TempGenToken.role:type_name -> company.service.v1.TempGenToken.Role
	8,  // 1: company.service.v1.ApiService.DownloadListCompanyTasks:input_type -> company.service.v1.FileListCompanyTaskRequest
	9,  // 2: company.service.v1.ApiService.CreateCompanyTask:input_type -> company.service.v1.CreateCompanyTaskReq
	9,  // 3: company.service.v1.ApiService.DeleteCompany:input_type -> company.service.v1.CreateCompanyTaskReq
	10, // 4: company.service.v1.ApiService.DeleteCompanyTask:input_type -> company.service.v1.GetCompanyTaskByIDReq
	11, // 5: company.service.v1.ApiService.CreateCompany:input_type -> company.service.v1.CreateCompanyReq
	12, // 6: company.service.v1.ApiService.ListCompanyTask:input_type -> company.service.v1.ListCompanyTaskReq
	10, // 7: company.service.v1.ApiService.GetCompanyTaskByID:input_type -> company.service.v1.GetCompanyTaskByIDReq
	13, // 8: company.service.v1.ApiService.ListCompanyData:input_type -> company.service.v1.ListCompanyDataReq
	14, // 9: company.service.v1.ApiService.ListGroupLimit:input_type -> company.service.v1.ListGroupLimitReq
	15, // 10: company.service.v1.ApiService.ListLimit:input_type -> company.service.v1.ListLimitReq
	16, // 11: company.service.v1.ApiService.ListCurrency:input_type -> company.service.v1.ListCurrencyReq
	17, // 12: company.service.v1.ApiService.BRICaMSgetCustomer:input_type -> company.service.v1.BricamsGetCustomerReq
	18, // 13: company.service.v1.ApiService.BRICaMSgetCustomerByID:input_type -> company.service.v1.BricamsGetCustomerByIdReq
	19, // 14: company.service.v1.ApiService.BRICaMSgetCustomerByUser:input_type -> company.service.v1.BricamsGetCustomerByUserReq
	17, // 15: company.service.v1.ApiService.BRICaMSgetCustomerV2:input_type -> company.service.v1.BricamsGetCustomerReq
	18, // 16: company.service.v1.ApiService.BRICaMSgetCustomerByIDV2:input_type -> company.service.v1.BricamsGetCustomerByIdReq
	19, // 17: company.service.v1.ApiService.BRICaMSgetCustomerByUserV2:input_type -> company.service.v1.BricamsGetCustomerByUserReq
	2,  // 18: company.service.v1.ApiService.CekCompanyIDAvaibility:input_type -> company.service.v1.CekCompanyIDAvaibilityReq
	17, // 19: company.service.v1.ApiService.BRICaMSCustomerMapping:input_type -> company.service.v1.BricamsGetCustomerReq
	3,  // 20: company.service.v1.ApiService.CompanySubsidiaryValidation:input_type -> company.service.v1.CompanySubsidiaryValidationReq
	20, // 21: company.service.v1.ApiService.DownloadListCompanyTasks:output_type -> google.api.HttpBody
	21, // 22: company.service.v1.ApiService.CreateCompanyTask:output_type -> company.service.v1.CreateCompanyTaskRes
	1,  // 23: company.service.v1.ApiService.DeleteCompany:output_type -> company.service.v1.DeleteCompanyRes
	22, // 24: company.service.v1.ApiService.DeleteCompanyTask:output_type -> company.service.v1.GetCompanyTaskByIDRes
	23, // 25: company.service.v1.ApiService.CreateCompany:output_type -> company.service.v1.CreateCompanyRes
	24, // 26: company.service.v1.ApiService.ListCompanyTask:output_type -> company.service.v1.ListCompanyTaskRes
	22, // 27: company.service.v1.ApiService.GetCompanyTaskByID:output_type -> company.service.v1.GetCompanyTaskByIDRes
	25, // 28: company.service.v1.ApiService.ListCompanyData:output_type -> company.service.v1.ListCompanyDataRes
	26, // 29: company.service.v1.ApiService.ListGroupLimit:output_type -> company.service.v1.ListGroupLimitRes
	27, // 30: company.service.v1.ApiService.ListLimit:output_type -> company.service.v1.ListLimitRes
	28, // 31: company.service.v1.ApiService.ListCurrency:output_type -> company.service.v1.ListCurrencyRes
	29, // 32: company.service.v1.ApiService.BRICaMSgetCustomer:output_type -> company.service.v1.BricamsResponseDatas
	30, // 33: company.service.v1.ApiService.BRICaMSgetCustomerByID:output_type -> company.service.v1.BricamsResponseData
	30, // 34: company.service.v1.ApiService.BRICaMSgetCustomerByUser:output_type -> company.service.v1.BricamsResponseData
	31, // 35: company.service.v1.ApiService.BRICaMSgetCustomerV2:output_type -> company.service.v1.BRICaMSSvcMultipleResV2
	32, // 36: company.service.v1.ApiService.BRICaMSgetCustomerByIDV2:output_type -> company.service.v1.BRICaMSSvcSingleResV2
	32, // 37: company.service.v1.ApiService.BRICaMSgetCustomerByUserV2:output_type -> company.service.v1.BRICaMSSvcSingleResV2
	6,  // 38: company.service.v1.ApiService.CekCompanyIDAvaibility:output_type -> company.service.v1.CekCompanyIDAvaibilityRes
	31, // 39: company.service.v1.ApiService.BRICaMSCustomerMapping:output_type -> company.service.v1.BRICaMSSvcMultipleResV2
	4,  // 40: company.service.v1.ApiService.CompanySubsidiaryValidation:output_type -> company.service.v1.CompanySubsidiaryValidationRes
	21, // [21:41] is the sub-list for method output_type
	1,  // [1:21] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_company_api_proto_init() }
func file_company_api_proto_init() {
	if File_company_api_proto != nil {
		return
	}
	file_company_payload_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_company_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCompanyRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CekCompanyIDAvaibilityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanySubsidiaryValidationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanySubsidiaryValidationRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCompanyIDTaskAndData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CekCompanyIDAvaibilityRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempGenToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_company_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_company_api_proto_goTypes,
		DependencyIndexes: file_company_api_proto_depIdxs,
		EnumInfos:         file_company_api_proto_enumTypes,
		MessageInfos:      file_company_api_proto_msgTypes,
	}.Build()
	File_company_api_proto = out.File
	file_company_api_proto_rawDesc = nil
	file_company_api_proto_goTypes = nil
	file_company_api_proto_depIdxs = nil
}
