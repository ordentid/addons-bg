// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: company_payload.proto

package pb

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListCompanyDataReqDirection int32

const (
	ListCompanyDataReq_DESC ListCompanyDataReqDirection = 0
	ListCompanyDataReq_ASC  ListCompanyDataReqDirection = 1
)

// Enum value maps for ListCompanyDataReqDirection.
var (
	ListCompanyDataReqDirection_name = map[int32]string{
		0: "DESC",
		1: "ASC",
	}
	ListCompanyDataReqDirection_value = map[string]int32{
		"DESC": 0,
		"ASC":  1,
	}
)

func (x ListCompanyDataReqDirection) Enum() *ListCompanyDataReqDirection {
	p := new(ListCompanyDataReqDirection)
	*p = x
	return p
}

func (x ListCompanyDataReqDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListCompanyDataReqDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_company_payload_proto_enumTypes[0].Descriptor()
}

func (ListCompanyDataReqDirection) Type() protoreflect.EnumType {
	return &file_company_payload_proto_enumTypes[0]
}

func (x ListCompanyDataReqDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListCompanyDataReqDirection.Descriptor instead.
func (ListCompanyDataReqDirection) EnumDescriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{12, 0}
}

type ListGroupLimitReqDirection int32

const (
	ListGroupLimitReq_DESC ListGroupLimitReqDirection = 0
	ListGroupLimitReq_ASC  ListGroupLimitReqDirection = 1
)

// Enum value maps for ListGroupLimitReqDirection.
var (
	ListGroupLimitReqDirection_name = map[int32]string{
		0: "DESC",
		1: "ASC",
	}
	ListGroupLimitReqDirection_value = map[string]int32{
		"DESC": 0,
		"ASC":  1,
	}
)

func (x ListGroupLimitReqDirection) Enum() *ListGroupLimitReqDirection {
	p := new(ListGroupLimitReqDirection)
	*p = x
	return p
}

func (x ListGroupLimitReqDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListGroupLimitReqDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_company_payload_proto_enumTypes[1].Descriptor()
}

func (ListGroupLimitReqDirection) Type() protoreflect.EnumType {
	return &file_company_payload_proto_enumTypes[1]
}

func (x ListGroupLimitReqDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListGroupLimitReqDirection.Descriptor instead.
func (ListGroupLimitReqDirection) EnumDescriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{13, 0}
}

type ListLimitReqDirection int32

const (
	ListLimitReq_DESC ListLimitReqDirection = 0
	ListLimitReq_ASC  ListLimitReqDirection = 1
)

// Enum value maps for ListLimitReqDirection.
var (
	ListLimitReqDirection_name = map[int32]string{
		0: "DESC",
		1: "ASC",
	}
	ListLimitReqDirection_value = map[string]int32{
		"DESC": 0,
		"ASC":  1,
	}
)

func (x ListLimitReqDirection) Enum() *ListLimitReqDirection {
	p := new(ListLimitReqDirection)
	*p = x
	return p
}

func (x ListLimitReqDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListLimitReqDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_company_payload_proto_enumTypes[2].Descriptor()
}

func (ListLimitReqDirection) Type() protoreflect.EnumType {
	return &file_company_payload_proto_enumTypes[2]
}

func (x ListLimitReqDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListLimitReqDirection.Descriptor instead.
func (ListLimitReqDirection) EnumDescriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{14, 0}
}

type ListCurrencyReqDirection int32

const (
	ListCurrencyReq_DESC ListCurrencyReqDirection = 0
	ListCurrencyReq_ASC  ListCurrencyReqDirection = 1
)

// Enum value maps for ListCurrencyReqDirection.
var (
	ListCurrencyReqDirection_name = map[int32]string{
		0: "DESC",
		1: "ASC",
	}
	ListCurrencyReqDirection_value = map[string]int32{
		"DESC": 0,
		"ASC":  1,
	}
)

func (x ListCurrencyReqDirection) Enum() *ListCurrencyReqDirection {
	p := new(ListCurrencyReqDirection)
	*p = x
	return p
}

func (x ListCurrencyReqDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListCurrencyReqDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_company_payload_proto_enumTypes[3].Descriptor()
}

func (ListCurrencyReqDirection) Type() protoreflect.EnumType {
	return &file_company_payload_proto_enumTypes[3]
}

func (x ListCurrencyReqDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListCurrencyReqDirection.Descriptor instead.
func (ListCurrencyReqDirection) EnumDescriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{15, 0}
}

type ListCompanyGroupTaskRequestStatuses int32

const (
	ListCompanyGroupTaskRequest_AllStatus ListCompanyGroupTaskRequestStatuses = 0
	ListCompanyGroupTaskRequest_Pending   ListCompanyGroupTaskRequestStatuses = 1
	ListCompanyGroupTaskRequest_Draft     ListCompanyGroupTaskRequestStatuses = 2
	ListCompanyGroupTaskRequest_Returned  ListCompanyGroupTaskRequestStatuses = 3
	ListCompanyGroupTaskRequest_Approved  ListCompanyGroupTaskRequestStatuses = 4
	ListCompanyGroupTaskRequest_Rejected  ListCompanyGroupTaskRequestStatuses = 5
)

// Enum value maps for ListCompanyGroupTaskRequestStatuses.
var (
	ListCompanyGroupTaskRequestStatuses_name = map[int32]string{
		0: "AllStatus",
		1: "Pending",
		2: "Draft",
		3: "Returned",
		4: "Approved",
		5: "Rejected",
	}
	ListCompanyGroupTaskRequestStatuses_value = map[string]int32{
		"AllStatus": 0,
		"Pending":   1,
		"Draft":     2,
		"Returned":  3,
		"Approved":  4,
		"Rejected":  5,
	}
)

func (x ListCompanyGroupTaskRequestStatuses) Enum() *ListCompanyGroupTaskRequestStatuses {
	p := new(ListCompanyGroupTaskRequestStatuses)
	*p = x
	return p
}

func (x ListCompanyGroupTaskRequestStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListCompanyGroupTaskRequestStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_company_payload_proto_enumTypes[4].Descriptor()
}

func (ListCompanyGroupTaskRequestStatuses) Type() protoreflect.EnumType {
	return &file_company_payload_proto_enumTypes[4]
}

func (x ListCompanyGroupTaskRequestStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListCompanyGroupTaskRequestStatuses.Descriptor instead.
func (ListCompanyGroupTaskRequestStatuses) EnumDescriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{25, 0}
}

type ListCompanyGroupTaskRequestSteps int32

const (
	ListCompanyGroupTaskRequest_AllStep  ListCompanyGroupTaskRequestSteps = 0
	ListCompanyGroupTaskRequest_Maker    ListCompanyGroupTaskRequestSteps = 1
	ListCompanyGroupTaskRequest_Checker  ListCompanyGroupTaskRequestSteps = 2
	ListCompanyGroupTaskRequest_Signer   ListCompanyGroupTaskRequestSteps = 3
	ListCompanyGroupTaskRequest_Releaser ListCompanyGroupTaskRequestSteps = 4
)

// Enum value maps for ListCompanyGroupTaskRequestSteps.
var (
	ListCompanyGroupTaskRequestSteps_name = map[int32]string{
		0: "AllStep",
		1: "Maker",
		2: "Checker",
		3: "Signer",
		4: "Releaser",
	}
	ListCompanyGroupTaskRequestSteps_value = map[string]int32{
		"AllStep":  0,
		"Maker":    1,
		"Checker":  2,
		"Signer":   3,
		"Releaser": 4,
	}
)

func (x ListCompanyGroupTaskRequestSteps) Enum() *ListCompanyGroupTaskRequestSteps {
	p := new(ListCompanyGroupTaskRequestSteps)
	*p = x
	return p
}

func (x ListCompanyGroupTaskRequestSteps) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListCompanyGroupTaskRequestSteps) Descriptor() protoreflect.EnumDescriptor {
	return file_company_payload_proto_enumTypes[5].Descriptor()
}

func (ListCompanyGroupTaskRequestSteps) Type() protoreflect.EnumType {
	return &file_company_payload_proto_enumTypes[5]
}

func (x ListCompanyGroupTaskRequestSteps) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListCompanyGroupTaskRequestSteps.Descriptor instead.
func (ListCompanyGroupTaskRequestSteps) EnumDescriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{25, 1}
}

type ListCompanyGroupTaskRequestDirection int32

const (
	ListCompanyGroupTaskRequest_DESC ListCompanyGroupTaskRequestDirection = 0
	ListCompanyGroupTaskRequest_ASC  ListCompanyGroupTaskRequestDirection = 1
)

// Enum value maps for ListCompanyGroupTaskRequestDirection.
var (
	ListCompanyGroupTaskRequestDirection_name = map[int32]string{
		0: "DESC",
		1: "ASC",
	}
	ListCompanyGroupTaskRequestDirection_value = map[string]int32{
		"DESC": 0,
		"ASC":  1,
	}
)

func (x ListCompanyGroupTaskRequestDirection) Enum() *ListCompanyGroupTaskRequestDirection {
	p := new(ListCompanyGroupTaskRequestDirection)
	*p = x
	return p
}

func (x ListCompanyGroupTaskRequestDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListCompanyGroupTaskRequestDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_company_payload_proto_enumTypes[6].Descriptor()
}

func (ListCompanyGroupTaskRequestDirection) Type() protoreflect.EnumType {
	return &file_company_payload_proto_enumTypes[6]
}

func (x ListCompanyGroupTaskRequestDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListCompanyGroupTaskRequestDirection.Descriptor instead.
func (ListCompanyGroupTaskRequestDirection) EnumDescriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{25, 2}
}

type ListCompanyTaskReqStatuses int32

const (
	ListCompanyTaskReq_AllStatus ListCompanyTaskReqStatuses = 0
	ListCompanyTaskReq_Pending   ListCompanyTaskReqStatuses = 1
	ListCompanyTaskReq_Draft     ListCompanyTaskReqStatuses = 2
	ListCompanyTaskReq_Returned  ListCompanyTaskReqStatuses = 3
	ListCompanyTaskReq_Approved  ListCompanyTaskReqStatuses = 4
	ListCompanyTaskReq_Rejected  ListCompanyTaskReqStatuses = 5
)

// Enum value maps for ListCompanyTaskReqStatuses.
var (
	ListCompanyTaskReqStatuses_name = map[int32]string{
		0: "AllStatus",
		1: "Pending",
		2: "Draft",
		3: "Returned",
		4: "Approved",
		5: "Rejected",
	}
	ListCompanyTaskReqStatuses_value = map[string]int32{
		"AllStatus": 0,
		"Pending":   1,
		"Draft":     2,
		"Returned":  3,
		"Approved":  4,
		"Rejected":  5,
	}
)

func (x ListCompanyTaskReqStatuses) Enum() *ListCompanyTaskReqStatuses {
	p := new(ListCompanyTaskReqStatuses)
	*p = x
	return p
}

func (x ListCompanyTaskReqStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListCompanyTaskReqStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_company_payload_proto_enumTypes[7].Descriptor()
}

func (ListCompanyTaskReqStatuses) Type() protoreflect.EnumType {
	return &file_company_payload_proto_enumTypes[7]
}

func (x ListCompanyTaskReqStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListCompanyTaskReqStatuses.Descriptor instead.
func (ListCompanyTaskReqStatuses) EnumDescriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{55, 0}
}

type ListCompanyTaskReqSteps int32

const (
	ListCompanyTaskReq_AllStep  ListCompanyTaskReqSteps = 0
	ListCompanyTaskReq_Maker    ListCompanyTaskReqSteps = 1
	ListCompanyTaskReq_Checker  ListCompanyTaskReqSteps = 2
	ListCompanyTaskReq_Signer   ListCompanyTaskReqSteps = 3
	ListCompanyTaskReq_Releaser ListCompanyTaskReqSteps = 4
)

// Enum value maps for ListCompanyTaskReqSteps.
var (
	ListCompanyTaskReqSteps_name = map[int32]string{
		0: "AllStep",
		1: "Maker",
		2: "Checker",
		3: "Signer",
		4: "Releaser",
	}
	ListCompanyTaskReqSteps_value = map[string]int32{
		"AllStep":  0,
		"Maker":    1,
		"Checker":  2,
		"Signer":   3,
		"Releaser": 4,
	}
)

func (x ListCompanyTaskReqSteps) Enum() *ListCompanyTaskReqSteps {
	p := new(ListCompanyTaskReqSteps)
	*p = x
	return p
}

func (x ListCompanyTaskReqSteps) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListCompanyTaskReqSteps) Descriptor() protoreflect.EnumDescriptor {
	return file_company_payload_proto_enumTypes[8].Descriptor()
}

func (ListCompanyTaskReqSteps) Type() protoreflect.EnumType {
	return &file_company_payload_proto_enumTypes[8]
}

func (x ListCompanyTaskReqSteps) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListCompanyTaskReqSteps.Descriptor instead.
func (ListCompanyTaskReqSteps) EnumDescriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{55, 1}
}

type ListCompanyTaskReqDirection int32

const (
	ListCompanyTaskReq_DESC ListCompanyTaskReqDirection = 0
	ListCompanyTaskReq_ASC  ListCompanyTaskReqDirection = 1
)

// Enum value maps for ListCompanyTaskReqDirection.
var (
	ListCompanyTaskReqDirection_name = map[int32]string{
		0: "DESC",
		1: "ASC",
	}
	ListCompanyTaskReqDirection_value = map[string]int32{
		"DESC": 0,
		"ASC":  1,
	}
)

func (x ListCompanyTaskReqDirection) Enum() *ListCompanyTaskReqDirection {
	p := new(ListCompanyTaskReqDirection)
	*p = x
	return p
}

func (x ListCompanyTaskReqDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListCompanyTaskReqDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_company_payload_proto_enumTypes[9].Descriptor()
}

func (ListCompanyTaskReqDirection) Type() protoreflect.EnumType {
	return &file_company_payload_proto_enumTypes[9]
}

func (x ListCompanyTaskReqDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListCompanyTaskReqDirection.Descriptor instead.
func (ListCompanyTaskReqDirection) EnumDescriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{55, 2}
}

type TempGenToken_Role int32

const (
	TempGenToken_bankadmin    TempGenToken_Role = 0
	TempGenToken_companyadmin TempGenToken_Role = 1
	TempGenToken_companyuser  TempGenToken_Role = 2
)

// Enum value maps for TempGenToken_Role.
var (
	TempGenToken_Role_name = map[int32]string{
		0: "bankadmin",
		1: "companyadmin",
		2: "companyuser",
	}
	TempGenToken_Role_value = map[string]int32{
		"bankadmin":    0,
		"companyadmin": 1,
		"companyuser":  2,
	}
)

func (x TempGenToken_Role) Enum() *TempGenToken_Role {
	p := new(TempGenToken_Role)
	*p = x
	return p
}

func (x TempGenToken_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TempGenToken_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_company_payload_proto_enumTypes[10].Descriptor()
}

func (TempGenToken_Role) Type() protoreflect.EnumType {
	return &file_company_payload_proto_enumTypes[10]
}

func (x TempGenToken_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TempGenToken_Role.Descriptor instead.
func (TempGenToken_Role) EnumDescriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{71, 0}
}

type FileListCompanyTaskRequest_Formats int32

const (
	FileListCompanyTaskRequest_null FileListCompanyTaskRequest_Formats = 0
	FileListCompanyTaskRequest_pdf  FileListCompanyTaskRequest_Formats = 1
	FileListCompanyTaskRequest_xls  FileListCompanyTaskRequest_Formats = 2
	FileListCompanyTaskRequest_csv  FileListCompanyTaskRequest_Formats = 3
)

// Enum value maps for FileListCompanyTaskRequest_Formats.
var (
	FileListCompanyTaskRequest_Formats_name = map[int32]string{
		0: "null",
		1: "pdf",
		2: "xls",
		3: "csv",
	}
	FileListCompanyTaskRequest_Formats_value = map[string]int32{
		"null": 0,
		"pdf":  1,
		"xls":  2,
		"csv":  3,
	}
)

func (x FileListCompanyTaskRequest_Formats) Enum() *FileListCompanyTaskRequest_Formats {
	p := new(FileListCompanyTaskRequest_Formats)
	*p = x
	return p
}

func (x FileListCompanyTaskRequest_Formats) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileListCompanyTaskRequest_Formats) Descriptor() protoreflect.EnumDescriptor {
	return file_company_payload_proto_enumTypes[11].Descriptor()
}

func (FileListCompanyTaskRequest_Formats) Type() protoreflect.EnumType {
	return &file_company_payload_proto_enumTypes[11]
}

func (x FileListCompanyTaskRequest_Formats) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileListCompanyTaskRequest_Formats.Descriptor instead.
func (FileListCompanyTaskRequest_Formats) EnumDescriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{78, 0}
}

type FileListCompanyTaskRequestStatuses int32

const (
	FileListCompanyTaskRequest_AllStatus FileListCompanyTaskRequestStatuses = 0
	FileListCompanyTaskRequest_Pending   FileListCompanyTaskRequestStatuses = 1
	FileListCompanyTaskRequest_Draft     FileListCompanyTaskRequestStatuses = 2
	FileListCompanyTaskRequest_Returned  FileListCompanyTaskRequestStatuses = 3
	FileListCompanyTaskRequest_Approved  FileListCompanyTaskRequestStatuses = 4
	FileListCompanyTaskRequest_Rejected  FileListCompanyTaskRequestStatuses = 5
)

// Enum value maps for FileListCompanyTaskRequestStatuses.
var (
	FileListCompanyTaskRequestStatuses_name = map[int32]string{
		0: "AllStatus",
		1: "Pending",
		2: "Draft",
		3: "Returned",
		4: "Approved",
		5: "Rejected",
	}
	FileListCompanyTaskRequestStatuses_value = map[string]int32{
		"AllStatus": 0,
		"Pending":   1,
		"Draft":     2,
		"Returned":  3,
		"Approved":  4,
		"Rejected":  5,
	}
)

func (x FileListCompanyTaskRequestStatuses) Enum() *FileListCompanyTaskRequestStatuses {
	p := new(FileListCompanyTaskRequestStatuses)
	*p = x
	return p
}

func (x FileListCompanyTaskRequestStatuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileListCompanyTaskRequestStatuses) Descriptor() protoreflect.EnumDescriptor {
	return file_company_payload_proto_enumTypes[12].Descriptor()
}

func (FileListCompanyTaskRequestStatuses) Type() protoreflect.EnumType {
	return &file_company_payload_proto_enumTypes[12]
}

func (x FileListCompanyTaskRequestStatuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileListCompanyTaskRequestStatuses.Descriptor instead.
func (FileListCompanyTaskRequestStatuses) EnumDescriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{78, 1}
}

type FileListCompanyTaskRequestSteps int32

const (
	FileListCompanyTaskRequest_AllStep  FileListCompanyTaskRequestSteps = 0
	FileListCompanyTaskRequest_Maker    FileListCompanyTaskRequestSteps = 1
	FileListCompanyTaskRequest_Checker  FileListCompanyTaskRequestSteps = 2
	FileListCompanyTaskRequest_Signer   FileListCompanyTaskRequestSteps = 3
	FileListCompanyTaskRequest_Releaser FileListCompanyTaskRequestSteps = 4
)

// Enum value maps for FileListCompanyTaskRequestSteps.
var (
	FileListCompanyTaskRequestSteps_name = map[int32]string{
		0: "AllStep",
		1: "Maker",
		2: "Checker",
		3: "Signer",
		4: "Releaser",
	}
	FileListCompanyTaskRequestSteps_value = map[string]int32{
		"AllStep":  0,
		"Maker":    1,
		"Checker":  2,
		"Signer":   3,
		"Releaser": 4,
	}
)

func (x FileListCompanyTaskRequestSteps) Enum() *FileListCompanyTaskRequestSteps {
	p := new(FileListCompanyTaskRequestSteps)
	*p = x
	return p
}

func (x FileListCompanyTaskRequestSteps) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileListCompanyTaskRequestSteps) Descriptor() protoreflect.EnumDescriptor {
	return file_company_payload_proto_enumTypes[13].Descriptor()
}

func (FileListCompanyTaskRequestSteps) Type() protoreflect.EnumType {
	return &file_company_payload_proto_enumTypes[13]
}

func (x FileListCompanyTaskRequestSteps) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileListCompanyTaskRequestSteps.Descriptor instead.
func (FileListCompanyTaskRequestSteps) EnumDescriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{78, 2}
}

type FileListCompanyTaskRequestDirection int32

const (
	FileListCompanyTaskRequest_DESC FileListCompanyTaskRequestDirection = 0
	FileListCompanyTaskRequest_ASC  FileListCompanyTaskRequestDirection = 1
)

// Enum value maps for FileListCompanyTaskRequestDirection.
var (
	FileListCompanyTaskRequestDirection_name = map[int32]string{
		0: "DESC",
		1: "ASC",
	}
	FileListCompanyTaskRequestDirection_value = map[string]int32{
		"DESC": 0,
		"ASC":  1,
	}
)

func (x FileListCompanyTaskRequestDirection) Enum() *FileListCompanyTaskRequestDirection {
	p := new(FileListCompanyTaskRequestDirection)
	*p = x
	return p
}

func (x FileListCompanyTaskRequestDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileListCompanyTaskRequestDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_company_payload_proto_enumTypes[14].Descriptor()
}

func (FileListCompanyTaskRequestDirection) Type() protoreflect.EnumType {
	return &file_company_payload_proto_enumTypes[14]
}

func (x FileListCompanyTaskRequestDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileListCompanyTaskRequestDirection.Descriptor instead.
func (FileListCompanyTaskRequestDirection) EnumDescriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{78, 3}
}

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{0}
}

func (x *LoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{1}
}

func (x *LoginResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{2}
}

func (x *HealthCheckResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{3}
}

type InvalidKeyError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *InvalidKeyError) Reset() {
	*x = InvalidKeyError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvalidKeyError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvalidKeyError) ProtoMessage() {}

func (x *InvalidKeyError) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvalidKeyError.ProtoReflect.Descriptor instead.
func (*InvalidKeyError) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{4}
}

func (x *InvalidKeyError) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *InvalidKeyError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type JWTTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ExpiredAt int64  `protobuf:"varint,2,opt,name=expiredAt,proto3" json:"expiredAt,omitempty"`
}

func (x *JWTTokenResponse) Reset() {
	*x = JWTTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTTokenResponse) ProtoMessage() {}

func (x *JWTTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTTokenResponse.ProtoReflect.Descriptor instead.
func (*JWTTokenResponse) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{5}
}

func (x *JWTTokenResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *JWTTokenResponse) GetExpiredAt() int64 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{6}
}

type DetailCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DetailCurrencyRequest) Reset() {
	*x = DetailCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailCurrencyRequest) ProtoMessage() {}

func (x *DetailCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailCurrencyRequest.ProtoReflect.Descriptor instead.
func (*DetailCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{7}
}

func (x *DetailCurrencyRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DetailCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool      `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string    `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Currency `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DetailCurrencyResponse) Reset() {
	*x = DetailCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetailCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetailCurrencyResponse) ProtoMessage() {}

func (x *DetailCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetailCurrencyResponse.ProtoReflect.Descriptor instead.
func (*DetailCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{8}
}

func (x *DetailCurrencyResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *DetailCurrencyResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DetailCurrencyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DetailCurrencyResponse) GetData() *Currency {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCompanyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool               `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32             `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string             `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*CompanyResponse `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCompanyResponse) Reset() {
	*x = ListCompanyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompanyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyResponse) ProtoMessage() {}

func (x *ListCompanyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyResponse.ProtoReflect.Descriptor instead.
func (*ListCompanyResponse) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{9}
}

func (x *ListCompanyResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ListCompanyResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCompanyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCompanyResponse) GetData() []*CompanyResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type CompanyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BranchCode string `protobuf:"bytes,3,opt,name=branchCode,proto3" json:"branchCode,omitempty"`
	ShortName  string `protobuf:"bytes,4,opt,name=shortName,proto3" json:"shortName,omitempty"`
}

func (x *CompanyResponse) Reset() {
	*x = CompanyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyResponse) ProtoMessage() {}

func (x *CompanyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyResponse.ProtoReflect.Descriptor instead.
func (*CompanyResponse) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{10}
}

func (x *CompanyResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CompanyResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompanyResponse) GetBranchCode() string {
	if x != nil {
		return x.BranchCode
	}
	return ""
}

func (x *CompanyResponse) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

type ListCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool        `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32      `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string      `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Currency `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListCurrencyResponse) Reset() {
	*x = ListCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCurrencyResponse) ProtoMessage() {}

func (x *ListCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCurrencyResponse.ProtoReflect.Descriptor instead.
func (*ListCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{11}
}

func (x *ListCurrencyResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ListCurrencyResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCurrencyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCurrencyResponse) GetData() []*Currency {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCompanyDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyID   uint64                      `protobuf:"varint,1,opt,name=companyID,proto3" json:"companyID,omitempty"`
	HoldingID   uint64                      `protobuf:"varint,2,opt,name=holdingID,proto3" json:"holdingID,omitempty"`
	Limit       int32                       `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page        int32                       `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Sort        string                      `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir         ListCompanyDataReqDirection `protobuf:"varint,6,opt,name=dir,proto3,enum=company.service.v1.ListCompanyDataReqDirection" json:"dir,omitempty"`
	Filter      string                      `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	Query       string                      `protobuf:"bytes,8,opt,name=query,proto3" json:"query,omitempty"`
	CustomOrder string                      `protobuf:"bytes,9,opt,name=customOrder,proto3" json:"customOrder,omitempty"`
	CompanyName string                      `protobuf:"bytes,10,opt,name=companyName,proto3" json:"companyName,omitempty"`
}

func (x *ListCompanyDataReq) Reset() {
	*x = ListCompanyDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompanyDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyDataReq) ProtoMessage() {}

func (x *ListCompanyDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyDataReq.ProtoReflect.Descriptor instead.
func (*ListCompanyDataReq) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{12}
}

func (x *ListCompanyDataReq) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *ListCompanyDataReq) GetHoldingID() uint64 {
	if x != nil {
		return x.HoldingID
	}
	return 0
}

func (x *ListCompanyDataReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListCompanyDataReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCompanyDataReq) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *ListCompanyDataReq) GetDir() ListCompanyDataReqDirection {
	if x != nil {
		return x.Dir
	}
	return ListCompanyDataReq_DESC
}

func (x *ListCompanyDataReq) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListCompanyDataReq) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListCompanyDataReq) GetCustomOrder() string {
	if x != nil {
		return x.CustomOrder
	}
	return ""
}

func (x *ListCompanyDataReq) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

type ListGroupLimitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HoldingID uint64                     `protobuf:"varint,1,opt,name=holdingID,proto3" json:"holdingID,omitempty"`
	Limit     int32                      `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page      int32                      `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Sort      string                     `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir       ListGroupLimitReqDirection `protobuf:"varint,5,opt,name=dir,proto3,enum=company.service.v1.ListGroupLimitReqDirection" json:"dir,omitempty"`
	Filter    string                     `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
	Query     string                     `protobuf:"bytes,7,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ListGroupLimitReq) Reset() {
	*x = ListGroupLimitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGroupLimitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupLimitReq) ProtoMessage() {}

func (x *ListGroupLimitReq) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupLimitReq.ProtoReflect.Descriptor instead.
func (*ListGroupLimitReq) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{13}
}

func (x *ListGroupLimitReq) GetHoldingID() uint64 {
	if x != nil {
		return x.HoldingID
	}
	return 0
}

func (x *ListGroupLimitReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListGroupLimitReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListGroupLimitReq) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *ListGroupLimitReq) GetDir() ListGroupLimitReqDirection {
	if x != nil {
		return x.Dir
	}
	return ListGroupLimitReq_DESC
}

func (x *ListGroupLimitReq) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListGroupLimitReq) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type ListLimitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyID uint64                `protobuf:"varint,1,opt,name=companyID,proto3" json:"companyID,omitempty"`
	Limit     int32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page      int32                 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Sort      string                `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir       ListLimitReqDirection `protobuf:"varint,5,opt,name=dir,proto3,enum=company.service.v1.ListLimitReqDirection" json:"dir,omitempty"`
	Filter    string                `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
	Query     string                `protobuf:"bytes,7,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ListLimitReq) Reset() {
	*x = ListLimitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLimitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLimitReq) ProtoMessage() {}

func (x *ListLimitReq) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLimitReq.ProtoReflect.Descriptor instead.
func (*ListLimitReq) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{14}
}

func (x *ListLimitReq) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *ListLimitReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListLimitReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListLimitReq) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *ListLimitReq) GetDir() ListLimitReqDirection {
	if x != nil {
		return x.Dir
	}
	return ListLimitReq_DESC
}

func (x *ListLimitReq) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListLimitReq) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type ListCurrencyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyID uint64                   `protobuf:"varint,1,opt,name=currencyID,proto3" json:"currencyID,omitempty"`
	Limit      int32                    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page       int32                    `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Sort       string                   `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir        ListCurrencyReqDirection `protobuf:"varint,5,opt,name=dir,proto3,enum=company.service.v1.ListCurrencyReqDirection" json:"dir,omitempty"`
	Filter     string                   `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
	Query      string                   `protobuf:"bytes,7,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ListCurrencyReq) Reset() {
	*x = ListCurrencyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCurrencyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCurrencyReq) ProtoMessage() {}

func (x *ListCurrencyReq) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCurrencyReq.ProtoReflect.Descriptor instead.
func (*ListCurrencyReq) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{15}
}

func (x *ListCurrencyReq) GetCurrencyID() uint64 {
	if x != nil {
		return x.CurrencyID
	}
	return 0
}

func (x *ListCurrencyReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListCurrencyReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCurrencyReq) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *ListCurrencyReq) GetDir() ListCurrencyReqDirection {
	if x != nil {
		return x.Dir
	}
	return ListCurrencyReq_DESC
}

func (x *ListCurrencyReq) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListCurrencyReq) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type Sort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column    string `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Direction string `protobuf:"bytes,2,opt,name=direction,proto3" json:"direction,omitempty"`
}

func (x *Sort) Reset() {
	*x = Sort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sort) ProtoMessage() {}

func (x *Sort) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sort.ProtoReflect.Descriptor instead.
func (*Sort) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{16}
}

func (x *Sort) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *Sort) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

type ListGroupLimitRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                 `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32               `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string               `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*CompanyGroupLimit `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *PaginationResponse  `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListGroupLimitRes) Reset() {
	*x = ListGroupLimitRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGroupLimitRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupLimitRes) ProtoMessage() {}

func (x *ListGroupLimitRes) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupLimitRes.ProtoReflect.Descriptor instead.
func (*ListGroupLimitRes) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{17}
}

func (x *ListGroupLimitRes) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ListGroupLimitRes) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListGroupLimitRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListGroupLimitRes) GetData() []*CompanyGroupLimit {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListGroupLimitRes) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListCompanyDataRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32              `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*Company          `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListCompanyDataRes) Reset() {
	*x = ListCompanyDataRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompanyDataRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyDataRes) ProtoMessage() {}

func (x *ListCompanyDataRes) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyDataRes.ProtoReflect.Descriptor instead.
func (*ListCompanyDataRes) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{18}
}

func (x *ListCompanyDataRes) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ListCompanyDataRes) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCompanyDataRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCompanyDataRes) GetData() []*Company {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListCompanyDataRes) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListLimitRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32              `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*CompanyLimit     `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListLimitRes) Reset() {
	*x = ListLimitRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLimitRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLimitRes) ProtoMessage() {}

func (x *ListLimitRes) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLimitRes.ProtoReflect.Descriptor instead.
func (*ListLimitRes) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{19}
}

func (x *ListLimitRes) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ListLimitRes) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListLimitRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListLimitRes) GetData() []*CompanyLimit {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListLimitRes) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListCurrencyRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32              `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*Currency         `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListCurrencyRes) Reset() {
	*x = ListCurrencyRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCurrencyRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCurrencyRes) ProtoMessage() {}

func (x *ListCurrencyRes) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCurrencyRes.ProtoReflect.Descriptor instead.
func (*ListCurrencyRes) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{20}
}

func (x *ListCurrencyRes) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ListCurrencyRes) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCurrencyRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCurrencyRes) GetData() []*Currency {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListCurrencyRes) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type CompanyGroupDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CompanyGroupDetailRequest) Reset() {
	*x = CompanyGroupDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyGroupDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyGroupDetailRequest) ProtoMessage() {}

func (x *CompanyGroupDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyGroupDetailRequest.ProtoReflect.Descriptor instead.
func (*CompanyGroupDetailRequest) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{21}
}

func (x *CompanyGroupDetailRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CompanyGroupDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool     `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32   `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Company `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CompanyGroupDetailResponse) Reset() {
	*x = CompanyGroupDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyGroupDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyGroupDetailResponse) ProtoMessage() {}

func (x *CompanyGroupDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyGroupDetailResponse.ProtoReflect.Descriptor instead.
func (*CompanyGroupDetailResponse) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{22}
}

func (x *CompanyGroupDetailResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *CompanyGroupDetailResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CompanyGroupDetailResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CompanyGroupDetailResponse) GetData() *Company {
	if x != nil {
		return x.Data
	}
	return nil
}

type CompanyGroupTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID             uint64                 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	FeatureID          uint64                 `protobuf:"varint,6,opt,name=featureID,proto3" json:"featureID,omitempty"`
	Type               string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Status             string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Step               string                 `protobuf:"bytes,4,opt,name=step,proto3" json:"step,omitempty"`
	IsValidFeatureID   bool                   `protobuf:"varint,7,opt,name=isValidFeatureID,proto3" json:"isValidFeatureID,omitempty"`
	LastApprovedByID   uint64                 `protobuf:"varint,8,opt,name=lastApprovedByID,proto3" json:"lastApprovedByID,omitempty"`
	LastRejectedByID   uint64                 `protobuf:"varint,9,opt,name=lastRejectedByID,proto3" json:"lastRejectedByID,omitempty"`
	LastApprovedByName string                 `protobuf:"bytes,10,opt,name=lastApprovedByName,proto3" json:"lastApprovedByName,omitempty"`
	LastRejectedByName string                 `protobuf:"bytes,11,opt,name=lastRejectedByName,proto3" json:"lastRejectedByName,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *CompanyGroupTask) Reset() {
	*x = CompanyGroupTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyGroupTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyGroupTask) ProtoMessage() {}

func (x *CompanyGroupTask) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyGroupTask.ProtoReflect.Descriptor instead.
func (*CompanyGroupTask) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{23}
}

func (x *CompanyGroupTask) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CompanyGroupTask) GetFeatureID() uint64 {
	if x != nil {
		return x.FeatureID
	}
	return 0
}

func (x *CompanyGroupTask) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CompanyGroupTask) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CompanyGroupTask) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *CompanyGroupTask) GetIsValidFeatureID() bool {
	if x != nil {
		return x.IsValidFeatureID
	}
	return false
}

func (x *CompanyGroupTask) GetLastApprovedByID() uint64 {
	if x != nil {
		return x.LastApprovedByID
	}
	return 0
}

func (x *CompanyGroupTask) GetLastRejectedByID() uint64 {
	if x != nil {
		return x.LastRejectedByID
	}
	return 0
}

func (x *CompanyGroupTask) GetLastApprovedByName() string {
	if x != nil {
		return x.LastApprovedByName
	}
	return ""
}

func (x *CompanyGroupTask) GetLastRejectedByName() string {
	if x != nil {
		return x.LastRejectedByName
	}
	return ""
}

func (x *CompanyGroupTask) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CompanyGroupTask) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CreateCompanyGroupTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyGroupRequest *CreateCompanyGroupRequest `protobuf:"bytes,1,opt,name=companyGroupRequest,proto3" json:"companyGroupRequest,omitempty"`
	Task                *CompanyGroupTask          `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *CreateCompanyGroupTask) Reset() {
	*x = CreateCompanyGroupTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCompanyGroupTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompanyGroupTask) ProtoMessage() {}

func (x *CreateCompanyGroupTask) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompanyGroupTask.ProtoReflect.Descriptor instead.
func (*CreateCompanyGroupTask) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{24}
}

func (x *CreateCompanyGroupTask) GetCompanyGroupRequest() *CreateCompanyGroupRequest {
	if x != nil {
		return x.CompanyGroupRequest
	}
	return nil
}

func (x *CreateCompanyGroupTask) GetTask() *CompanyGroupTask {
	if x != nil {
		return x.Task
	}
	return nil
}

type ListCompanyGroupTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ListCompanyGroupTaskRequestStatuses  `protobuf:"varint,1,opt,name=status,proto3,enum=company.service.v1.ListCompanyGroupTaskRequestStatuses" json:"status,omitempty"`
	Step   ListCompanyGroupTaskRequestSteps     `protobuf:"varint,2,opt,name=step,proto3,enum=company.service.v1.ListCompanyGroupTaskRequestSteps" json:"step,omitempty"`
	Limit  int32                                `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page   int32                                `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Sort   string                               `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir    ListCompanyGroupTaskRequestDirection `protobuf:"varint,6,opt,name=dir,proto3,enum=company.service.v1.ListCompanyGroupTaskRequestDirection" json:"dir,omitempty"`
	Filter string                               `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	Query  string                               `protobuf:"bytes,8,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ListCompanyGroupTaskRequest) Reset() {
	*x = ListCompanyGroupTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompanyGroupTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyGroupTaskRequest) ProtoMessage() {}

func (x *ListCompanyGroupTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyGroupTaskRequest.ProtoReflect.Descriptor instead.
func (*ListCompanyGroupTaskRequest) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{25}
}

func (x *ListCompanyGroupTaskRequest) GetStatus() ListCompanyGroupTaskRequestStatuses {
	if x != nil {
		return x.Status
	}
	return ListCompanyGroupTaskRequest_AllStatus
}

func (x *ListCompanyGroupTaskRequest) GetStep() ListCompanyGroupTaskRequestSteps {
	if x != nil {
		return x.Step
	}
	return ListCompanyGroupTaskRequest_AllStep
}

func (x *ListCompanyGroupTaskRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListCompanyGroupTaskRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCompanyGroupTaskRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *ListCompanyGroupTaskRequest) GetDir() ListCompanyGroupTaskRequestDirection {
	if x != nil {
		return x.Dir
	}
	return ListCompanyGroupTaskRequest_DESC
}

func (x *ListCompanyGroupTaskRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListCompanyGroupTaskRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type PaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page       int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	TotalRows  int64 `protobuf:"varint,3,opt,name=totalRows,proto3" json:"totalRows,omitempty"`
	TotalPages int32 `protobuf:"varint,4,opt,name=totalPages,proto3" json:"totalPages,omitempty"`
}

func (x *PaginationResponse) Reset() {
	*x = PaginationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationResponse) ProtoMessage() {}

func (x *PaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationResponse.ProtoReflect.Descriptor instead.
func (*PaginationResponse) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{26}
}

func (x *PaginationResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PaginationResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PaginationResponse) GetTotalRows() int64 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

func (x *PaginationResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

type ListCompanyGroupTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                      `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32                    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string                    `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*CreateCompanyGroupTask `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *PaginationResponse       `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListCompanyGroupTaskResponse) Reset() {
	*x = ListCompanyGroupTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompanyGroupTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyGroupTaskResponse) ProtoMessage() {}

func (x *ListCompanyGroupTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyGroupTaskResponse.ProtoReflect.Descriptor instead.
func (*ListCompanyGroupTaskResponse) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{27}
}

func (x *ListCompanyGroupTaskResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ListCompanyGroupTaskResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCompanyGroupTaskResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCompanyGroupTaskResponse) GetData() []*CreateCompanyGroupTask {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListCompanyGroupTaskResponse) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type CreateCompanyGroupTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID  uint64                     `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Data    *CreateCompanyGroupRequest `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	IsDraft bool                       `protobuf:"varint,3,opt,name=isDraft,proto3" json:"isDraft,omitempty"`
}

func (x *CreateCompanyGroupTaskRequest) Reset() {
	*x = CreateCompanyGroupTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCompanyGroupTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompanyGroupTaskRequest) ProtoMessage() {}

func (x *CreateCompanyGroupTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompanyGroupTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateCompanyGroupTaskRequest) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{28}
}

func (x *CreateCompanyGroupTaskRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CreateCompanyGroupTaskRequest) GetData() *CreateCompanyGroupRequest {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateCompanyGroupTaskRequest) GetIsDraft() bool {
	if x != nil {
		return x.IsDraft
	}
	return false
}

type CreateCompanyGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Company           *Company                       `protobuf:"bytes,1,opt,name=company,proto3" json:"company,omitempty"`
	GroupLimit        []*CreateGroupLimitRequest     `protobuf:"bytes,2,rep,name=groupLimit,proto3" json:"groupLimit,omitempty"`
	CompanyLimit      []*CreateCompanyLimitRequest   `protobuf:"bytes,3,rep,name=companyLimit,proto3" json:"companyLimit,omitempty"`
	GroupSubsidiaries []*CreateGroupSubsdiaryRequest `protobuf:"bytes,4,rep,name=groupSubsidiaries,proto3" json:"groupSubsidiaries,omitempty"`
	CompanyWorkflow   *CreateCompanyWorkflowRequest  `protobuf:"bytes,5,opt,name=companyWorkflow,proto3" json:"companyWorkflow,omitempty"`
	TaskID            uint64                         `protobuf:"varint,6,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *CreateCompanyGroupRequest) Reset() {
	*x = CreateCompanyGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCompanyGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompanyGroupRequest) ProtoMessage() {}

func (x *CreateCompanyGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompanyGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateCompanyGroupRequest) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{29}
}

func (x *CreateCompanyGroupRequest) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *CreateCompanyGroupRequest) GetGroupLimit() []*CreateGroupLimitRequest {
	if x != nil {
		return x.GroupLimit
	}
	return nil
}

func (x *CreateCompanyGroupRequest) GetCompanyLimit() []*CreateCompanyLimitRequest {
	if x != nil {
		return x.CompanyLimit
	}
	return nil
}

func (x *CreateCompanyGroupRequest) GetGroupSubsidiaries() []*CreateGroupSubsdiaryRequest {
	if x != nil {
		return x.GroupSubsidiaries
	}
	return nil
}

func (x *CreateCompanyGroupRequest) GetCompanyWorkflow() *CreateCompanyWorkflowRequest {
	if x != nil {
		return x.CompanyWorkflow
	}
	return nil
}

func (x *CreateCompanyGroupRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type CreateCompanyLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyID  uint64           `protobuf:"varint,1,opt,name=companyID,proto3" json:"companyID,omitempty"`
	CurrencyID uint64           `protobuf:"varint,2,opt,name=currencyID,proto3" json:"currencyID,omitempty"`
	Limit      uint64           `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Currency   *CurrencyRequest `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *CreateCompanyLimitRequest) Reset() {
	*x = CreateCompanyLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCompanyLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompanyLimitRequest) ProtoMessage() {}

func (x *CreateCompanyLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompanyLimitRequest.ProtoReflect.Descriptor instead.
func (*CreateCompanyLimitRequest) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{30}
}

func (x *CreateCompanyLimitRequest) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *CreateCompanyLimitRequest) GetCurrencyID() uint64 {
	if x != nil {
		return x.CurrencyID
	}
	return 0
}

func (x *CreateCompanyLimitRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CreateCompanyLimitRequest) GetCurrency() *CurrencyRequest {
	if x != nil {
		return x.Currency
	}
	return nil
}

type CreateGroupLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyID uint64           `protobuf:"varint,2,opt,name=currencyID,proto3" json:"currencyID,omitempty"`
	Limit      uint64           `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Currency   *CurrencyRequest `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *CreateGroupLimitRequest) Reset() {
	*x = CreateGroupLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupLimitRequest) ProtoMessage() {}

func (x *CreateGroupLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupLimitRequest.ProtoReflect.Descriptor instead.
func (*CreateGroupLimitRequest) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{31}
}

func (x *CreateGroupLimitRequest) GetCurrencyID() uint64 {
	if x != nil {
		return x.CurrencyID
	}
	return 0
}

func (x *CreateGroupLimitRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CreateGroupLimitRequest) GetCurrency() *CurrencyRequest {
	if x != nil {
		return x.Currency
	}
	return nil
}

type CurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyID uint64 `protobuf:"varint,1,opt,name=currencyID,proto3" json:"currencyID,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code       string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *CurrencyRequest) Reset() {
	*x = CurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyRequest) ProtoMessage() {}

func (x *CurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyRequest.ProtoReflect.Descriptor instead.
func (*CurrencyRequest) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{32}
}

func (x *CurrencyRequest) GetCurrencyID() uint64 {
	if x != nil {
		return x.CurrencyID
	}
	return 0
}

func (x *CurrencyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CurrencyRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type CreateCompanyWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyID                uint64 `protobuf:"varint,1,opt,name=companyID,proto3" json:"companyID,omitempty"`
	IsTransactionSTP         bool   `protobuf:"varint,2,opt,name=isTransactionSTP,proto3" json:"isTransactionSTP,omitempty"`
	IsTransactionChecker     bool   `protobuf:"varint,3,opt,name=isTransactionChecker,proto3" json:"isTransactionChecker,omitempty"`
	IsTransactionSigner      bool   `protobuf:"varint,4,opt,name=isTransactionSigner,proto3" json:"isTransactionSigner,omitempty"`
	IsTransactionReleaser    bool   `protobuf:"varint,5,opt,name=isTransactionReleaser,proto3" json:"isTransactionReleaser,omitempty"`
	IsNonTransactionSTP      bool   `protobuf:"varint,6,opt,name=isNonTransactionSTP,proto3" json:"isNonTransactionSTP,omitempty"`
	IsNonTransactionChecker  bool   `protobuf:"varint,7,opt,name=isNonTransactionChecker,proto3" json:"isNonTransactionChecker,omitempty"`
	IsNonTransactionSigner   bool   `protobuf:"varint,8,opt,name=isNonTransactionSigner,proto3" json:"isNonTransactionSigner,omitempty"`
	IsNonTransactionReleaser bool   `protobuf:"varint,9,opt,name=isNonTransactionReleaser,proto3" json:"isNonTransactionReleaser,omitempty"`
}

func (x *CreateCompanyWorkflowRequest) Reset() {
	*x = CreateCompanyWorkflowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCompanyWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompanyWorkflowRequest) ProtoMessage() {}

func (x *CreateCompanyWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompanyWorkflowRequest.ProtoReflect.Descriptor instead.
func (*CreateCompanyWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{33}
}

func (x *CreateCompanyWorkflowRequest) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *CreateCompanyWorkflowRequest) GetIsTransactionSTP() bool {
	if x != nil {
		return x.IsTransactionSTP
	}
	return false
}

func (x *CreateCompanyWorkflowRequest) GetIsTransactionChecker() bool {
	if x != nil {
		return x.IsTransactionChecker
	}
	return false
}

func (x *CreateCompanyWorkflowRequest) GetIsTransactionSigner() bool {
	if x != nil {
		return x.IsTransactionSigner
	}
	return false
}

func (x *CreateCompanyWorkflowRequest) GetIsTransactionReleaser() bool {
	if x != nil {
		return x.IsTransactionReleaser
	}
	return false
}

func (x *CreateCompanyWorkflowRequest) GetIsNonTransactionSTP() bool {
	if x != nil {
		return x.IsNonTransactionSTP
	}
	return false
}

func (x *CreateCompanyWorkflowRequest) GetIsNonTransactionChecker() bool {
	if x != nil {
		return x.IsNonTransactionChecker
	}
	return false
}

func (x *CreateCompanyWorkflowRequest) GetIsNonTransactionSigner() bool {
	if x != nil {
		return x.IsNonTransactionSigner
	}
	return false
}

func (x *CreateCompanyWorkflowRequest) GetIsNonTransactionReleaser() bool {
	if x != nil {
		return x.IsNonTransactionReleaser
	}
	return false
}

type CreateGroupSubsdiaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentCompanyID     uint64 `protobuf:"varint,1,opt,name=parentCompanyID,proto3" json:"parentCompanyID,omitempty"`
	SubsidiaryCompanyID uint64 `protobuf:"varint,2,opt,name=subsidiaryCompanyID,proto3" json:"subsidiaryCompanyID,omitempty"`
}

func (x *CreateGroupSubsdiaryRequest) Reset() {
	*x = CreateGroupSubsdiaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupSubsdiaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupSubsdiaryRequest) ProtoMessage() {}

func (x *CreateGroupSubsdiaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupSubsdiaryRequest.ProtoReflect.Descriptor instead.
func (*CreateGroupSubsdiaryRequest) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{34}
}

func (x *CreateGroupSubsdiaryRequest) GetParentCompanyID() uint64 {
	if x != nil {
		return x.ParentCompanyID
	}
	return 0
}

func (x *CreateGroupSubsdiaryRequest) GetSubsidiaryCompanyID() uint64 {
	if x != nil {
		return x.SubsidiaryCompanyID
	}
	return 0
}

type CreateCompanyGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateCompanyGroupResponse) Reset() {
	*x = CreateCompanyGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCompanyGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompanyGroupResponse) ProtoMessage() {}

func (x *CreateCompanyGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompanyGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateCompanyGroupResponse) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{35}
}

func (x *CreateCompanyGroupResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *CreateCompanyGroupResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateCompanyGroupResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BricamsGetCustomerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Page  uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *BricamsGetCustomerReq) Reset() {
	*x = BricamsGetCustomerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BricamsGetCustomerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BricamsGetCustomerReq) ProtoMessage() {}

func (x *BricamsGetCustomerReq) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BricamsGetCustomerReq.ProtoReflect.Descriptor instead.
func (*BricamsGetCustomerReq) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{36}
}

func (x *BricamsGetCustomerReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BricamsGetCustomerReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BricamsGetCustomerReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *BricamsGetCustomerReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type BricamsGetCustomerGroupReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Page  uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *BricamsGetCustomerGroupReq) Reset() {
	*x = BricamsGetCustomerGroupReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BricamsGetCustomerGroupReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BricamsGetCustomerGroupReq) ProtoMessage() {}

func (x *BricamsGetCustomerGroupReq) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BricamsGetCustomerGroupReq.ProtoReflect.Descriptor instead.
func (*BricamsGetCustomerGroupReq) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{37}
}

func (x *BricamsGetCustomerGroupReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BricamsGetCustomerGroupReq) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *BricamsGetCustomerGroupReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *BricamsGetCustomerGroupReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type BricamsGetCustomerByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BricamsGetCustomerByIdReq) Reset() {
	*x = BricamsGetCustomerByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BricamsGetCustomerByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BricamsGetCustomerByIdReq) ProtoMessage() {}

func (x *BricamsGetCustomerByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BricamsGetCustomerByIdReq.ProtoReflect.Descriptor instead.
func (*BricamsGetCustomerByIdReq) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{38}
}

func (x *BricamsGetCustomerByIdReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type BricamsGetCustomerByUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *BricamsGetCustomerByUserReq) Reset() {
	*x = BricamsGetCustomerByUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BricamsGetCustomerByUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BricamsGetCustomerByUserReq) ProtoMessage() {}

func (x *BricamsGetCustomerByUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BricamsGetCustomerByUserReq.ProtoReflect.Descriptor instead.
func (*BricamsGetCustomerByUserReq) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{39}
}

func (x *BricamsGetCustomerByUserReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type BricamsGetCustomerResMulti struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalData       uint32                             `protobuf:"varint,1,opt,name=totalData,proto3" json:"totalData,omitempty"`
	ResponseCode    string                             `protobuf:"bytes,2,opt,name=responseCode,proto3" json:"responseCode,omitempty"`
	ResponseMessage string                             `protobuf:"bytes,3,opt,name=responseMessage,proto3" json:"responseMessage,omitempty"`
	Data            []*BricamsGetCustomerData          `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Detail          *BricamsGetCustomerResMulti_Detail `protobuf:"bytes,5,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *BricamsGetCustomerResMulti) Reset() {
	*x = BricamsGetCustomerResMulti{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BricamsGetCustomerResMulti) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BricamsGetCustomerResMulti) ProtoMessage() {}

func (x *BricamsGetCustomerResMulti) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BricamsGetCustomerResMulti.ProtoReflect.Descriptor instead.
func (*BricamsGetCustomerResMulti) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{40}
}

func (x *BricamsGetCustomerResMulti) GetTotalData() uint32 {
	if x != nil {
		return x.TotalData
	}
	return 0
}

func (x *BricamsGetCustomerResMulti) GetResponseCode() string {
	if x != nil {
		return x.ResponseCode
	}
	return ""
}

func (x *BricamsGetCustomerResMulti) GetResponseMessage() string {
	if x != nil {
		return x.ResponseMessage
	}
	return ""
}

func (x *BricamsGetCustomerResMulti) GetData() []*BricamsGetCustomerData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BricamsGetCustomerResMulti) GetDetail() *BricamsGetCustomerResMulti_Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type BricamsGetCustomerResSingel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalData       uint32                              `protobuf:"varint,1,opt,name=totalData,proto3" json:"totalData,omitempty"`
	ResponseCode    string                              `protobuf:"bytes,2,opt,name=responseCode,proto3" json:"responseCode,omitempty"`
	ResponseMessage string                              `protobuf:"bytes,3,opt,name=responseMessage,proto3" json:"responseMessage,omitempty"`
	Data            *BricamsGetCustomerData             `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Detail          *BricamsGetCustomerResSingel_Detail `protobuf:"bytes,5,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *BricamsGetCustomerResSingel) Reset() {
	*x = BricamsGetCustomerResSingel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BricamsGetCustomerResSingel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BricamsGetCustomerResSingel) ProtoMessage() {}

func (x *BricamsGetCustomerResSingel) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BricamsGetCustomerResSingel.ProtoReflect.Descriptor instead.
func (*BricamsGetCustomerResSingel) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{41}
}

func (x *BricamsGetCustomerResSingel) GetTotalData() uint32 {
	if x != nil {
		return x.TotalData
	}
	return 0
}

func (x *BricamsGetCustomerResSingel) GetResponseCode() string {
	if x != nil {
		return x.ResponseCode
	}
	return ""
}

func (x *BricamsGetCustomerResSingel) GetResponseMessage() string {
	if x != nil {
		return x.ResponseMessage
	}
	return ""
}

func (x *BricamsGetCustomerResSingel) GetData() *BricamsGetCustomerData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BricamsGetCustomerResSingel) GetDetail() *BricamsGetCustomerResSingel_Detail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type BricamsResponseDatas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool                        `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32                      `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string                      `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *BricamsGetCustomerResMulti `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BricamsResponseDatas) Reset() {
	*x = BricamsResponseDatas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BricamsResponseDatas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BricamsResponseDatas) ProtoMessage() {}

func (x *BricamsResponseDatas) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BricamsResponseDatas.ProtoReflect.Descriptor instead.
func (*BricamsResponseDatas) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{42}
}

func (x *BricamsResponseDatas) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *BricamsResponseDatas) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BricamsResponseDatas) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BricamsResponseDatas) GetData() *BricamsGetCustomerResMulti {
	if x != nil {
		return x.Data
	}
	return nil
}

type BricamsResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool                         `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32                       `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string                       `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *BricamsGetCustomerResSingel `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BricamsResponseData) Reset() {
	*x = BricamsResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BricamsResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BricamsResponseData) ProtoMessage() {}

func (x *BricamsResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BricamsResponseData.ProtoReflect.Descriptor instead.
func (*BricamsResponseData) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{43}
}

func (x *BricamsResponseData) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *BricamsResponseData) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BricamsResponseData) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BricamsResponseData) GetData() *BricamsGetCustomerResSingel {
	if x != nil {
		return x.Data
	}
	return nil
}

type BricamsGetCustomerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DType                      string `protobuf:"bytes,1,opt,name=dType,proto3" json:"dType,omitempty"`
	Id                         int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	AuthorizationBusinessDate  string `protobuf:"bytes,3,opt,name=authorizationBusinessDate,proto3" json:"authorizationBusinessDate,omitempty"`
	CreatedByUri               string `protobuf:"bytes,4,opt,name=createdByUri,proto3" json:"createdByUri,omitempty"`
	CreationTimeStamp          string `protobuf:"bytes,5,opt,name=creationTimeStamp,proto3" json:"creationTimeStamp,omitempty"`
	LastUpdatedByUri           string `protobuf:"bytes,6,opt,name=lastUpdatedByUri,proto3" json:"lastUpdatedByUri,omitempty"`
	LastUpdatedTimeStamp       string `protobuf:"bytes,7,opt,name=lastUpdatedTimeStamp,proto3" json:"lastUpdatedTimeStamp,omitempty"`
	PersistenceStatus          int32  `protobuf:"varint,8,opt,name=persistenceStatus,proto3" json:"persistenceStatus,omitempty"`
	SnapshotRecord             string `protobuf:"bytes,9,opt,name=snapshotRecord,proto3" json:"snapshotRecord,omitempty"`
	SystemModifiableOnly       string `protobuf:"bytes,10,opt,name=systemModifiableOnly,proto3" json:"systemModifiableOnly,omitempty"`
	Uuid                       string `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty"`
	MakeBusinessDate           string `protobuf:"bytes,12,opt,name=makeBusinessDate,proto3" json:"makeBusinessDate,omitempty"`
	TenantId                   string `protobuf:"bytes,13,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	ActiveFlag                 int32  `protobuf:"varint,14,opt,name=activeFlag,proto3" json:"activeFlag,omitempty"`
	ApprovalStatus             int32  `protobuf:"varint,15,opt,name=approvalStatus,proto3" json:"approvalStatus,omitempty"`
	ReviewedByUri              string `protobuf:"bytes,16,opt,name=reviewedByUri,proto3" json:"reviewedByUri,omitempty"`
	ReviewedTimeStamp          string `protobuf:"bytes,17,opt,name=reviewedTimeStamp,proto3" json:"reviewedTimeStamp,omitempty"`
	Description                string `protobuf:"bytes,18,opt,name=description,proto3" json:"description,omitempty"`
	Name                       string `protobuf:"bytes,19,opt,name=name,proto3" json:"name,omitempty"`
	BranchCode                 string `protobuf:"bytes,20,opt,name=branchCode,proto3" json:"branchCode,omitempty"`
	HasParentBranchCalender    int32  `protobuf:"varint,21,opt,name=hasParentBranchCalender,proto3" json:"hasParentBranchCalender,omitempty"`
	IsEmailFilterEnabled       int32  `protobuf:"varint,22,opt,name=isEmailFilterEnabled,proto3" json:"isEmailFilterEnabled,omitempty"`
	IsLogAfterWorkHoursEnabled int32  `protobuf:"varint,23,opt,name=isLogAfterWorkHoursEnabled,proto3" json:"isLogAfterWorkHoursEnabled,omitempty"`
	IsOutOfWorkHLoginAllow     int32  `protobuf:"varint,24,opt,name=isOutOfWorkHLoginAllow,proto3" json:"isOutOfWorkHLoginAllow,omitempty"`
	MaximumEmails              string `protobuf:"bytes,25,opt,name=maximumEmails,proto3" json:"maximumEmails,omitempty"`
	ParentBranchIds            string `protobuf:"bytes,26,opt,name=parentBranchIds,proto3" json:"parentBranchIds,omitempty"`
	ProductOffered             string `protobuf:"bytes,27,opt,name=productOffered,proto3" json:"productOffered,omitempty"`
	ShortName                  string `protobuf:"bytes,28,opt,name=shortName,proto3" json:"shortName,omitempty"`
	SystemName                 string `protobuf:"bytes,29,opt,name=systemName,proto3" json:"systemName,omitempty"`
	PersistentFormData         string `protobuf:"bytes,30,opt,name=persistentFormData,proto3" json:"persistentFormData,omitempty"`
	ContactInfo                string `protobuf:"bytes,31,opt,name=contactInfo,proto3" json:"contactInfo,omitempty"`
	PrimaryContactPerson       string `protobuf:"bytes,32,opt,name=primaryContactPerson,proto3" json:"primaryContactPerson,omitempty"`
	BranchCalendar             int64  `protobuf:"varint,33,opt,name=branchCalendar,proto3" json:"branchCalendar,omitempty"`
	OrganizationType           int32  `protobuf:"varint,34,opt,name=organizationType,proto3" json:"organizationType,omitempty"`
	SignatureAuthority         string `protobuf:"bytes,35,opt,name=signatureAuthority,proto3" json:"signatureAuthority,omitempty"`
	HeadOffice                 string `protobuf:"bytes,36,opt,name=headOffice,proto3" json:"headOffice,omitempty"`
	OfflineFlag                int32  `protobuf:"varint,37,opt,name=offlineFlag,proto3" json:"offlineFlag,omitempty"`
	GStin                      string `protobuf:"bytes,38,opt,name=gStin,proto3" json:"gStin,omitempty"`
	IsStopFreshBooking         int32  `protobuf:"varint,39,opt,name=isStopFreshBooking,proto3" json:"isStopFreshBooking,omitempty"`
}

func (x *BricamsGetCustomerData) Reset() {
	*x = BricamsGetCustomerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BricamsGetCustomerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BricamsGetCustomerData) ProtoMessage() {}

func (x *BricamsGetCustomerData) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BricamsGetCustomerData.ProtoReflect.Descriptor instead.
func (*BricamsGetCustomerData) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{44}
}

func (x *BricamsGetCustomerData) GetDType() string {
	if x != nil {
		return x.DType
	}
	return ""
}

func (x *BricamsGetCustomerData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BricamsGetCustomerData) GetAuthorizationBusinessDate() string {
	if x != nil {
		return x.AuthorizationBusinessDate
	}
	return ""
}

func (x *BricamsGetCustomerData) GetCreatedByUri() string {
	if x != nil {
		return x.CreatedByUri
	}
	return ""
}

func (x *BricamsGetCustomerData) GetCreationTimeStamp() string {
	if x != nil {
		return x.CreationTimeStamp
	}
	return ""
}

func (x *BricamsGetCustomerData) GetLastUpdatedByUri() string {
	if x != nil {
		return x.LastUpdatedByUri
	}
	return ""
}

func (x *BricamsGetCustomerData) GetLastUpdatedTimeStamp() string {
	if x != nil {
		return x.LastUpdatedTimeStamp
	}
	return ""
}

func (x *BricamsGetCustomerData) GetPersistenceStatus() int32 {
	if x != nil {
		return x.PersistenceStatus
	}
	return 0
}

func (x *BricamsGetCustomerData) GetSnapshotRecord() string {
	if x != nil {
		return x.SnapshotRecord
	}
	return ""
}

func (x *BricamsGetCustomerData) GetSystemModifiableOnly() string {
	if x != nil {
		return x.SystemModifiableOnly
	}
	return ""
}

func (x *BricamsGetCustomerData) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *BricamsGetCustomerData) GetMakeBusinessDate() string {
	if x != nil {
		return x.MakeBusinessDate
	}
	return ""
}

func (x *BricamsGetCustomerData) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *BricamsGetCustomerData) GetActiveFlag() int32 {
	if x != nil {
		return x.ActiveFlag
	}
	return 0
}

func (x *BricamsGetCustomerData) GetApprovalStatus() int32 {
	if x != nil {
		return x.ApprovalStatus
	}
	return 0
}

func (x *BricamsGetCustomerData) GetReviewedByUri() string {
	if x != nil {
		return x.ReviewedByUri
	}
	return ""
}

func (x *BricamsGetCustomerData) GetReviewedTimeStamp() string {
	if x != nil {
		return x.ReviewedTimeStamp
	}
	return ""
}

func (x *BricamsGetCustomerData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BricamsGetCustomerData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BricamsGetCustomerData) GetBranchCode() string {
	if x != nil {
		return x.BranchCode
	}
	return ""
}

func (x *BricamsGetCustomerData) GetHasParentBranchCalender() int32 {
	if x != nil {
		return x.HasParentBranchCalender
	}
	return 0
}

func (x *BricamsGetCustomerData) GetIsEmailFilterEnabled() int32 {
	if x != nil {
		return x.IsEmailFilterEnabled
	}
	return 0
}

func (x *BricamsGetCustomerData) GetIsLogAfterWorkHoursEnabled() int32 {
	if x != nil {
		return x.IsLogAfterWorkHoursEnabled
	}
	return 0
}

func (x *BricamsGetCustomerData) GetIsOutOfWorkHLoginAllow() int32 {
	if x != nil {
		return x.IsOutOfWorkHLoginAllow
	}
	return 0
}

func (x *BricamsGetCustomerData) GetMaximumEmails() string {
	if x != nil {
		return x.MaximumEmails
	}
	return ""
}

func (x *BricamsGetCustomerData) GetParentBranchIds() string {
	if x != nil {
		return x.ParentBranchIds
	}
	return ""
}

func (x *BricamsGetCustomerData) GetProductOffered() string {
	if x != nil {
		return x.ProductOffered
	}
	return ""
}

func (x *BricamsGetCustomerData) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *BricamsGetCustomerData) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

func (x *BricamsGetCustomerData) GetPersistentFormData() string {
	if x != nil {
		return x.PersistentFormData
	}
	return ""
}

func (x *BricamsGetCustomerData) GetContactInfo() string {
	if x != nil {
		return x.ContactInfo
	}
	return ""
}

func (x *BricamsGetCustomerData) GetPrimaryContactPerson() string {
	if x != nil {
		return x.PrimaryContactPerson
	}
	return ""
}

func (x *BricamsGetCustomerData) GetBranchCalendar() int64 {
	if x != nil {
		return x.BranchCalendar
	}
	return 0
}

func (x *BricamsGetCustomerData) GetOrganizationType() int32 {
	if x != nil {
		return x.OrganizationType
	}
	return 0
}

func (x *BricamsGetCustomerData) GetSignatureAuthority() string {
	if x != nil {
		return x.SignatureAuthority
	}
	return ""
}

func (x *BricamsGetCustomerData) GetHeadOffice() string {
	if x != nil {
		return x.HeadOffice
	}
	return ""
}

func (x *BricamsGetCustomerData) GetOfflineFlag() int32 {
	if x != nil {
		return x.OfflineFlag
	}
	return 0
}

func (x *BricamsGetCustomerData) GetGStin() string {
	if x != nil {
		return x.GStin
	}
	return ""
}

func (x *BricamsGetCustomerData) GetIsStopFreshBooking() int32 {
	if x != nil {
		return x.IsStopFreshBooking
	}
	return 0
}

type WorkflowStep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verifier bool `protobuf:"varint,1,opt,name=verifier,proto3" json:"verifier,omitempty"`
	Approver bool `protobuf:"varint,2,opt,name=approver,proto3" json:"approver,omitempty"`
	Releaser bool `protobuf:"varint,3,opt,name=releaser,proto3" json:"releaser,omitempty"`
}

func (x *WorkflowStep) Reset() {
	*x = WorkflowStep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkflowStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowStep) ProtoMessage() {}

func (x *WorkflowStep) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowStep.ProtoReflect.Descriptor instead.
func (*WorkflowStep) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{45}
}

func (x *WorkflowStep) GetVerifier() bool {
	if x != nil {
		return x.Verifier
	}
	return false
}

func (x *WorkflowStep) GetApprover() bool {
	if x != nil {
		return x.Approver
	}
	return false
}

func (x *WorkflowStep) GetReleaser() bool {
	if x != nil {
		return x.Releaser
	}
	return false
}

type Workflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsTansactionalStp      bool          `protobuf:"varint,1,opt,name=isTansactionalStp,proto3" json:"isTansactionalStp,omitempty"`
	IsNonTansactionalStp   bool          `protobuf:"varint,2,opt,name=isNonTansactionalStp,proto3" json:"isNonTansactionalStp,omitempty"`
	TansactionalStpStep    *WorkflowStep `protobuf:"bytes,3,opt,name=tansactionalStpStep,proto3" json:"tansactionalStpStep,omitempty"`
	NonTansactionalStpStep *WorkflowStep `protobuf:"bytes,4,opt,name=nonTansactionalStpStep,proto3" json:"nonTansactionalStpStep,omitempty"`
}

func (x *Workflow) Reset() {
	*x = Workflow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow) ProtoMessage() {}

func (x *Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow.ProtoReflect.Descriptor instead.
func (*Workflow) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{46}
}

func (x *Workflow) GetIsTansactionalStp() bool {
	if x != nil {
		return x.IsTansactionalStp
	}
	return false
}

func (x *Workflow) GetIsNonTansactionalStp() bool {
	if x != nil {
		return x.IsNonTansactionalStp
	}
	return false
}

func (x *Workflow) GetTansactionalStpStep() *WorkflowStep {
	if x != nil {
		return x.TansactionalStpStep
	}
	return nil
}

func (x *Workflow) GetNonTansactionalStpStep() *WorkflowStep {
	if x != nil {
		return x.NonTansactionalStpStep
	}
	return nil
}

type CreateCompanyTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Company  *Company  `protobuf:"bytes,1,opt,name=company,proto3" json:"company,omitempty"`
	Workflow *Workflow `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
	IsDraft  bool      `protobuf:"varint,4,opt,name=isDraft,proto3" json:"isDraft,omitempty"`
	TaskID   uint64    `protobuf:"varint,3,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *CreateCompanyTaskReq) Reset() {
	*x = CreateCompanyTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCompanyTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompanyTaskReq) ProtoMessage() {}

func (x *CreateCompanyTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompanyTaskReq.ProtoReflect.Descriptor instead.
func (*CreateCompanyTaskReq) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{47}
}

func (x *CreateCompanyTaskReq) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *CreateCompanyTaskReq) GetWorkflow() *Workflow {
	if x != nil {
		return x.Workflow
	}
	return nil
}

func (x *CreateCompanyTaskReq) GetIsDraft() bool {
	if x != nil {
		return x.IsDraft
	}
	return false
}

func (x *CreateCompanyTaskReq) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type CreateCompanyTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *CreateCompanyTask) Reset() {
	*x = CreateCompanyTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCompanyTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompanyTask) ProtoMessage() {}

func (x *CreateCompanyTask) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompanyTask.ProtoReflect.Descriptor instead.
func (*CreateCompanyTask) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{48}
}

func (x *CreateCompanyTask) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type CreateCompanyTaskRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Task  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateCompanyTaskRes) Reset() {
	*x = CreateCompanyTaskRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCompanyTaskRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompanyTaskRes) ProtoMessage() {}

func (x *CreateCompanyTaskRes) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompanyTaskRes.ProtoReflect.Descriptor instead.
func (*CreateCompanyTaskRes) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{49}
}

func (x *CreateCompanyTaskRes) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *CreateCompanyTaskRes) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateCompanyTaskRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateCompanyTaskRes) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteCompanyTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *DeleteCompanyTaskReq) Reset() {
	*x = DeleteCompanyTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCompanyTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCompanyTaskReq) ProtoMessage() {}

func (x *DeleteCompanyTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCompanyTaskReq.ProtoReflect.Descriptor instead.
func (*DeleteCompanyTaskReq) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{50}
}

func (x *DeleteCompanyTaskReq) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type DeleteCompanyTaskRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Task  `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteCompanyTaskRes) Reset() {
	*x = DeleteCompanyTaskRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCompanyTaskRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCompanyTaskRes) ProtoMessage() {}

func (x *DeleteCompanyTaskRes) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCompanyTaskRes.ProtoReflect.Descriptor instead.
func (*DeleteCompanyTaskRes) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{51}
}

func (x *DeleteCompanyTaskRes) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *DeleteCompanyTaskRes) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DeleteCompanyTaskRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeleteCompanyTaskRes) GetData() *Task {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetCompanyTaskByHoldingIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HoldingID uint64 `protobuf:"varint,1,opt,name=holdingID,proto3" json:"holdingID,omitempty"`
}

func (x *GetCompanyTaskByHoldingIDReq) Reset() {
	*x = GetCompanyTaskByHoldingIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyTaskByHoldingIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyTaskByHoldingIDReq) ProtoMessage() {}

func (x *GetCompanyTaskByHoldingIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyTaskByHoldingIDReq.ProtoReflect.Descriptor instead.
func (*GetCompanyTaskByHoldingIDReq) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{52}
}

func (x *GetCompanyTaskByHoldingIDReq) GetHoldingID() uint64 {
	if x != nil {
		return x.HoldingID
	}
	return 0
}

type GetCompanyTaskByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID string `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *GetCompanyTaskByIDReq) Reset() {
	*x = GetCompanyTaskByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyTaskByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyTaskByIDReq) ProtoMessage() {}

func (x *GetCompanyTaskByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyTaskByIDReq.ProtoReflect.Descriptor instead.
func (*GetCompanyTaskByIDReq) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{53}
}

func (x *GetCompanyTaskByIDReq) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

type GetCompanyTaskByIDRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool         `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32       `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string       `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *CompanyTask `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCompanyTaskByIDRes) Reset() {
	*x = GetCompanyTaskByIDRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyTaskByIDRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyTaskByIDRes) ProtoMessage() {}

func (x *GetCompanyTaskByIDRes) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyTaskByIDRes.ProtoReflect.Descriptor instead.
func (*GetCompanyTaskByIDRes) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{54}
}

func (x *GetCompanyTaskByIDRes) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *GetCompanyTaskByIDRes) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetCompanyTaskByIDRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetCompanyTaskByIDRes) GetData() *CompanyTask {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListCompanyTaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   ListCompanyTaskReqStatuses  `protobuf:"varint,1,opt,name=status,proto3,enum=company.service.v1.ListCompanyTaskReqStatuses" json:"status,omitempty"`
	Step     ListCompanyTaskReqSteps     `protobuf:"varint,2,opt,name=step,proto3,enum=company.service.v1.ListCompanyTaskReqSteps" json:"step,omitempty"`
	Limit    int32                       `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page     int32                       `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Sort     string                      `protobuf:"bytes,5,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir      ListCompanyTaskReqDirection `protobuf:"varint,6,opt,name=dir,proto3,enum=company.service.v1.ListCompanyTaskReqDirection" json:"dir,omitempty"`
	Filter   string                      `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"`
	Query    string                      `protobuf:"bytes,8,opt,name=query,proto3" json:"query,omitempty"`
	In       string                      `protobuf:"bytes,9,opt,name=in,proto3" json:"in,omitempty"`
	FilterOr string                      `protobuf:"bytes,10,opt,name=filterOr,proto3" json:"filterOr,omitempty"`
}

func (x *ListCompanyTaskReq) Reset() {
	*x = ListCompanyTaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompanyTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyTaskReq) ProtoMessage() {}

func (x *ListCompanyTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyTaskReq.ProtoReflect.Descriptor instead.
func (*ListCompanyTaskReq) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{55}
}

func (x *ListCompanyTaskReq) GetStatus() ListCompanyTaskReqStatuses {
	if x != nil {
		return x.Status
	}
	return ListCompanyTaskReq_AllStatus
}

func (x *ListCompanyTaskReq) GetStep() ListCompanyTaskReqSteps {
	if x != nil {
		return x.Step
	}
	return ListCompanyTaskReq_AllStep
}

func (x *ListCompanyTaskReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListCompanyTaskReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCompanyTaskReq) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *ListCompanyTaskReq) GetDir() ListCompanyTaskReqDirection {
	if x != nil {
		return x.Dir
	}
	return ListCompanyTaskReq_DESC
}

func (x *ListCompanyTaskReq) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListCompanyTaskReq) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListCompanyTaskReq) GetIn() string {
	if x != nil {
		return x.In
	}
	return ""
}

func (x *ListCompanyTaskReq) GetFilterOr() string {
	if x != nil {
		return x.FilterOr
	}
	return ""
}

type GetCompanyTaskByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID uint64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *GetCompanyTaskByIDRequest) Reset() {
	*x = GetCompanyTaskByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyTaskByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyTaskByIDRequest) ProtoMessage() {}

func (x *GetCompanyTaskByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyTaskByIDRequest.ProtoReflect.Descriptor instead.
func (*GetCompanyTaskByIDRequest) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{56}
}

func (x *GetCompanyTaskByIDRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID             uint64                 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Type               string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Status             string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Step               string                 `protobuf:"bytes,4,opt,name=step,proto3" json:"step,omitempty"`
	FeatureID          uint64                 `protobuf:"varint,5,opt,name=featureID,proto3" json:"featureID,omitempty"`
	LastApprovedByID   uint64                 `protobuf:"varint,6,opt,name=lastApprovedByID,proto3" json:"lastApprovedByID,omitempty"`
	LastRejectedByID   uint64                 `protobuf:"varint,7,opt,name=lastRejectedByID,proto3" json:"lastRejectedByID,omitempty"`
	LastApprovedByName string                 `protobuf:"bytes,8,opt,name=lastApprovedByName,proto3" json:"lastApprovedByName,omitempty"`
	LastRejectedByName string                 `protobuf:"bytes,9,opt,name=lastRejectedByName,proto3" json:"lastRejectedByName,omitempty"`
	IsValidFeatureID   bool                   `protobuf:"varint,10,opt,name=isValidFeatureID,proto3" json:"isValidFeatureID,omitempty"`
	Reasons            string                 `protobuf:"bytes,11,opt,name=reasons,proto3" json:"reasons,omitempty"`
	Comment            string                 `protobuf:"bytes,12,opt,name=comment,proto3" json:"comment,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{57}
}

func (x *Task) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *Task) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Task) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Task) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *Task) GetFeatureID() uint64 {
	if x != nil {
		return x.FeatureID
	}
	return 0
}

func (x *Task) GetLastApprovedByID() uint64 {
	if x != nil {
		return x.LastApprovedByID
	}
	return 0
}

func (x *Task) GetLastRejectedByID() uint64 {
	if x != nil {
		return x.LastRejectedByID
	}
	return 0
}

func (x *Task) GetLastApprovedByName() string {
	if x != nil {
		return x.LastApprovedByName
	}
	return ""
}

func (x *Task) GetLastRejectedByName() string {
	if x != nil {
		return x.LastRejectedByName
	}
	return ""
}

func (x *Task) GetIsValidFeatureID() bool {
	if x != nil {
		return x.IsValidFeatureID
	}
	return false
}

func (x *Task) GetReasons() string {
	if x != nil {
		return x.Reasons
	}
	return ""
}

func (x *Task) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Task) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Task) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CompanyTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Company  *Company  `protobuf:"bytes,1,opt,name=company,proto3" json:"company,omitempty"`
	Workflow *Workflow `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
	Task     *Task     `protobuf:"bytes,3,opt,name=task,proto3" json:"task,omitempty"` // repeated Role roles = 3;
}

func (x *CompanyTask) Reset() {
	*x = CompanyTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyTask) ProtoMessage() {}

func (x *CompanyTask) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyTask.ProtoReflect.Descriptor instead.
func (*CompanyTask) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{58}
}

func (x *CompanyTask) GetCompany() *Company {
	if x != nil {
		return x.Company
	}
	return nil
}

func (x *CompanyTask) GetWorkflow() *Workflow {
	if x != nil {
		return x.Workflow
	}
	return nil
}

func (x *CompanyTask) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type ListCompanyTaskRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      bool                `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code       uint32              `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message    string              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data       []*CompanyTask      `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	Pagination *PaginationResponse `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListCompanyTaskRes) Reset() {
	*x = ListCompanyTaskRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCompanyTaskRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompanyTaskRes) ProtoMessage() {}

func (x *ListCompanyTaskRes) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompanyTaskRes.ProtoReflect.Descriptor instead.
func (*ListCompanyTaskRes) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{59}
}

func (x *ListCompanyTaskRes) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ListCompanyTaskRes) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListCompanyTaskRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ListCompanyTaskRes) GetData() []*CompanyTask {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListCompanyTaskRes) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type CreateCompanyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   *CreateCompanyTaskReq `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	TaskID uint64                `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *CreateCompanyReq) Reset() {
	*x = CreateCompanyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCompanyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompanyReq) ProtoMessage() {}

func (x *CreateCompanyReq) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompanyReq.ProtoReflect.Descriptor instead.
func (*CreateCompanyReq) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{60}
}

func (x *CreateCompanyReq) GetData() *CreateCompanyTaskReq {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateCompanyReq) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type CreateCompanyRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool     `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32   `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *Company `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateCompanyRes) Reset() {
	*x = CreateCompanyRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCompanyRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompanyRes) ProtoMessage() {}

func (x *CreateCompanyRes) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompanyRes.ProtoReflect.Descriptor instead.
func (*CreateCompanyRes) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{61}
}

func (x *CreateCompanyRes) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *CreateCompanyRes) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateCompanyRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateCompanyRes) GetData() *Company {
	if x != nil {
		return x.Data
	}
	return nil
}

type BRICaMSSvcCompanyV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DType string `protobuf:"bytes,1,opt,name=dType,proto3" json:"dType,omitempty"`
	Id    int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// string authorizationBusinessDate = 3;
	// string createdByUri = 4;
	CreationTimeStamp string `protobuf:"bytes,5,opt,name=creationTimeStamp,proto3" json:"creationTimeStamp,omitempty"`
	// string lastUpdatedByUri = 6;
	// string lastUpdatedTimeStamp = 7;
	// int64 persistenceStatus = 8;
	// int64 snapshotRecord = 9;
	// int64 systemModifiableOnly = 10;
	// string uuid = 11;
	// string makeBusinessDate = 12;
	// int64 tenantId = 13;
	// int64 activeFlag = 14;
	// int64 approvalStatus = 15;
	// string reviewedByUri = 16;
	// string reviewedTimeStamp = 17;
	Description string `protobuf:"bytes,18,opt,name=description,proto3" json:"description,omitempty"`
	Name        string `protobuf:"bytes,19,opt,name=name,proto3" json:"name,omitempty"`
	// string branchCode = 20;
	// int64 hasParentBranchCalender = 21;
	// int64 isEmailFilterEnabled = 22;
	// int64 isLogAfterWorkHoursEnabled = 23;
	// int64 isOutOfWorkHLoginAllow = 24;
	// int64 maximumEmails = 25;
	// string parentBranchIds = 26;
	// string productOffered = 27;
	// string shortName = 28;
	// string systemName = 29;
	// int64 persistentFormData = 30;
	// int64 contactInfo = 31;
	// int64 primaryContactPerson = 32;
	// int64 branchCalendar = 33;
	// int64 organizationType = 34;
	// int64 signatureAuthority = 35;
	// int64 headOffice = 36;
	// int64 offlineFlag = 37;
	// string gStin = 38;
	// int64 isStopFreshBooking = 39;
	BankBranchCode string               `protobuf:"bytes,40,opt,name=bankBranchCode,proto3" json:"bankBranchCode,omitempty"`
	BankBranchName string               `protobuf:"bytes,41,opt,name=bankBranchName,proto3" json:"bankBranchName,omitempty"`
	TaxId          string               `protobuf:"bytes,42,opt,name=taxId,proto3" json:"taxId,omitempty"`
	Address        string               `protobuf:"bytes,43,opt,name=address,proto3" json:"address,omitempty"`
	Telephone      string               `protobuf:"bytes,44,opt,name=telephone,proto3" json:"telephone,omitempty"`
	Handphone      string               `protobuf:"bytes,45,opt,name=handphone,proto3" json:"handphone,omitempty"`
	Remarks        string               `protobuf:"bytes,46,opt,name=remarks,proto3" json:"remarks,omitempty"`
	CompanyGroup   *CompanyGroupBRICaMS `protobuf:"bytes,61,opt,name=companyGroup,proto3" json:"companyGroup,omitempty"`
}

func (x *BRICaMSSvcCompanyV2) Reset() {
	*x = BRICaMSSvcCompanyV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRICaMSSvcCompanyV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRICaMSSvcCompanyV2) ProtoMessage() {}

func (x *BRICaMSSvcCompanyV2) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRICaMSSvcCompanyV2.ProtoReflect.Descriptor instead.
func (*BRICaMSSvcCompanyV2) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{62}
}

func (x *BRICaMSSvcCompanyV2) GetDType() string {
	if x != nil {
		return x.DType
	}
	return ""
}

func (x *BRICaMSSvcCompanyV2) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BRICaMSSvcCompanyV2) GetCreationTimeStamp() string {
	if x != nil {
		return x.CreationTimeStamp
	}
	return ""
}

func (x *BRICaMSSvcCompanyV2) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BRICaMSSvcCompanyV2) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BRICaMSSvcCompanyV2) GetBankBranchCode() string {
	if x != nil {
		return x.BankBranchCode
	}
	return ""
}

func (x *BRICaMSSvcCompanyV2) GetBankBranchName() string {
	if x != nil {
		return x.BankBranchName
	}
	return ""
}

func (x *BRICaMSSvcCompanyV2) GetTaxId() string {
	if x != nil {
		return x.TaxId
	}
	return ""
}

func (x *BRICaMSSvcCompanyV2) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BRICaMSSvcCompanyV2) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *BRICaMSSvcCompanyV2) GetHandphone() string {
	if x != nil {
		return x.Handphone
	}
	return ""
}

func (x *BRICaMSSvcCompanyV2) GetRemarks() string {
	if x != nil {
		return x.Remarks
	}
	return ""
}

func (x *BRICaMSSvcCompanyV2) GetCompanyGroup() *CompanyGroupBRICaMS {
	if x != nil {
		return x.CompanyGroup
	}
	return nil
}

type GetGroupIDStoreReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyID uint64 `protobuf:"varint,1,opt,name=companyID,proto3" json:"companyID,omitempty"`
}

func (x *GetGroupIDStoreReq) Reset() {
	*x = GetGroupIDStoreReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupIDStoreReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupIDStoreReq) ProtoMessage() {}

func (x *GetGroupIDStoreReq) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupIDStoreReq.ProtoReflect.Descriptor instead.
func (*GetGroupIDStoreReq) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{63}
}

func (x *GetGroupIDStoreReq) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

type GetGroupIDStoreRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyIDs []uint64 `protobuf:"varint,1,rep,packed,name=companyIDs,proto3" json:"companyIDs,omitempty"`
	HoldingID  uint64   `protobuf:"varint,2,opt,name=holdingID,proto3" json:"holdingID,omitempty"`
}

func (x *GetGroupIDStoreRes) Reset() {
	*x = GetGroupIDStoreRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupIDStoreRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupIDStoreRes) ProtoMessage() {}

func (x *GetGroupIDStoreRes) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupIDStoreRes.ProtoReflect.Descriptor instead.
func (*GetGroupIDStoreRes) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{64}
}

func (x *GetGroupIDStoreRes) GetCompanyIDs() []uint64 {
	if x != nil {
		return x.CompanyIDs
	}
	return nil
}

func (x *GetGroupIDStoreRes) GetHoldingID() uint64 {
	if x != nil {
		return x.HoldingID
	}
	return 0
}

type DeleteCompanyRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteCompanyRes) Reset() {
	*x = DeleteCompanyRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCompanyRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCompanyRes) ProtoMessage() {}

func (x *DeleteCompanyRes) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCompanyRes.ProtoReflect.Descriptor instead.
func (*DeleteCompanyRes) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{65}
}

func (x *DeleteCompanyRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type CekCompanyIDAvaibilityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyID uint64 `protobuf:"varint,1,opt,name=companyID,proto3" json:"companyID,omitempty"`
	TaskID    uint64 `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
	HoldingID uint64 `protobuf:"varint,3,opt,name=holdingID,proto3" json:"holdingID,omitempty"`
}

func (x *CekCompanyIDAvaibilityReq) Reset() {
	*x = CekCompanyIDAvaibilityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CekCompanyIDAvaibilityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CekCompanyIDAvaibilityReq) ProtoMessage() {}

func (x *CekCompanyIDAvaibilityReq) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CekCompanyIDAvaibilityReq.ProtoReflect.Descriptor instead.
func (*CekCompanyIDAvaibilityReq) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{66}
}

func (x *CekCompanyIDAvaibilityReq) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *CekCompanyIDAvaibilityReq) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CekCompanyIDAvaibilityReq) GetHoldingID() uint64 {
	if x != nil {
		return x.HoldingID
	}
	return 0
}

type CompanySubsidiaryValidationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyID uint64 `protobuf:"varint,1,opt,name=companyID,proto3" json:"companyID,omitempty"`
	TaskID    uint64 `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
	HoldingID uint64 `protobuf:"varint,3,opt,name=holdingID,proto3" json:"holdingID,omitempty"`
}

func (x *CompanySubsidiaryValidationReq) Reset() {
	*x = CompanySubsidiaryValidationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanySubsidiaryValidationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanySubsidiaryValidationReq) ProtoMessage() {}

func (x *CompanySubsidiaryValidationReq) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanySubsidiaryValidationReq.ProtoReflect.Descriptor instead.
func (*CompanySubsidiaryValidationReq) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{67}
}

func (x *CompanySubsidiaryValidationReq) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *CompanySubsidiaryValidationReq) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CompanySubsidiaryValidationReq) GetHoldingID() uint64 {
	if x != nil {
		return x.HoldingID
	}
	return 0
}

type CompanySubsidiaryValidationRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid   bool   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CompanySubsidiaryValidationRes) Reset() {
	*x = CompanySubsidiaryValidationRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanySubsidiaryValidationRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanySubsidiaryValidationRes) ProtoMessage() {}

func (x *CompanySubsidiaryValidationRes) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanySubsidiaryValidationRes.ProtoReflect.Descriptor instead.
func (*CompanySubsidiaryValidationRes) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{68}
}

func (x *CompanySubsidiaryValidationRes) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *CompanySubsidiaryValidationRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CheckCompanyIDTaskAndData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyID uint64 `protobuf:"varint,1,opt,name=companyID,proto3" json:"companyID,omitempty"`
	TaskID    uint64 `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
	HoldingID uint64 `protobuf:"varint,3,opt,name=holdingID,proto3" json:"holdingID,omitempty"`
}

func (x *CheckCompanyIDTaskAndData) Reset() {
	*x = CheckCompanyIDTaskAndData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCompanyIDTaskAndData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCompanyIDTaskAndData) ProtoMessage() {}

func (x *CheckCompanyIDTaskAndData) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCompanyIDTaskAndData.ProtoReflect.Descriptor instead.
func (*CheckCompanyIDTaskAndData) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{69}
}

func (x *CheckCompanyIDTaskAndData) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *CheckCompanyIDTaskAndData) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CheckCompanyIDTaskAndData) GetHoldingID() uint64 {
	if x != nil {
		return x.HoldingID
	}
	return 0
}

type CekCompanyIDAvaibilityRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available bool   `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	Status    string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CekCompanyIDAvaibilityRes) Reset() {
	*x = CekCompanyIDAvaibilityRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CekCompanyIDAvaibilityRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CekCompanyIDAvaibilityRes) ProtoMessage() {}

func (x *CekCompanyIDAvaibilityRes) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CekCompanyIDAvaibilityRes.ProtoReflect.Descriptor instead.
func (*CekCompanyIDAvaibilityRes) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{70}
}

func (x *CekCompanyIDAvaibilityRes) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *CekCompanyIDAvaibilityRes) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type TempGenToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role TempGenToken_Role `protobuf:"varint,1,opt,name=role,proto3,enum=company.service.v1.TempGenToken_Role" json:"role,omitempty"`
}

func (x *TempGenToken) Reset() {
	*x = TempGenToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempGenToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempGenToken) ProtoMessage() {}

func (x *TempGenToken) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempGenToken.ProtoReflect.Descriptor instead.
func (*TempGenToken) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{71}
}

func (x *TempGenToken) GetRole() TempGenToken_Role {
	if x != nil {
		return x.Role
	}
	return TempGenToken_bankadmin
}

type BRICaMSSvcCompanyV2CG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DType             string               `protobuf:"bytes,1,opt,name=dType,proto3" json:"dType,omitempty"`
	Id                int64                `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	CreationTimeStamp string               `protobuf:"bytes,5,opt,name=creationTimeStamp,proto3" json:"creationTimeStamp,omitempty"`
	Description       string               `protobuf:"bytes,18,opt,name=description,proto3" json:"description,omitempty"`
	Name              string               `protobuf:"bytes,19,opt,name=name,proto3" json:"name,omitempty"`
	BankBranchCode    string               `protobuf:"bytes,40,opt,name=bankBranchCode,proto3" json:"bankBranchCode,omitempty"`
	BankBranchName    string               `protobuf:"bytes,41,opt,name=bankBranchName,proto3" json:"bankBranchName,omitempty"`
	CompanyGroup      *CompanyGroupBRICaMS `protobuf:"bytes,61,opt,name=companyGroup,proto3" json:"companyGroup,omitempty"`
}

func (x *BRICaMSSvcCompanyV2CG) Reset() {
	*x = BRICaMSSvcCompanyV2CG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRICaMSSvcCompanyV2CG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRICaMSSvcCompanyV2CG) ProtoMessage() {}

func (x *BRICaMSSvcCompanyV2CG) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRICaMSSvcCompanyV2CG.ProtoReflect.Descriptor instead.
func (*BRICaMSSvcCompanyV2CG) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{72}
}

func (x *BRICaMSSvcCompanyV2CG) GetDType() string {
	if x != nil {
		return x.DType
	}
	return ""
}

func (x *BRICaMSSvcCompanyV2CG) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BRICaMSSvcCompanyV2CG) GetCreationTimeStamp() string {
	if x != nil {
		return x.CreationTimeStamp
	}
	return ""
}

func (x *BRICaMSSvcCompanyV2CG) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BRICaMSSvcCompanyV2CG) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BRICaMSSvcCompanyV2CG) GetBankBranchCode() string {
	if x != nil {
		return x.BankBranchCode
	}
	return ""
}

func (x *BRICaMSSvcCompanyV2CG) GetBankBranchName() string {
	if x != nil {
		return x.BankBranchName
	}
	return ""
}

func (x *BRICaMSSvcCompanyV2CG) GetCompanyGroup() *CompanyGroupBRICaMS {
	if x != nil {
		return x.CompanyGroup
	}
	return nil
}

type CompanyGroupBRICaMS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HoldingID int64  `protobuf:"varint,1,opt,name=holdingID,proto3" json:"holdingID,omitempty"`
	GroupName string `protobuf:"bytes,2,opt,name=groupName,proto3" json:"groupName,omitempty"`
}

func (x *CompanyGroupBRICaMS) Reset() {
	*x = CompanyGroupBRICaMS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyGroupBRICaMS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyGroupBRICaMS) ProtoMessage() {}

func (x *CompanyGroupBRICaMS) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyGroupBRICaMS.ProtoReflect.Descriptor instead.
func (*CompanyGroupBRICaMS) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{73}
}

func (x *CompanyGroupBRICaMS) GetHoldingID() int64 {
	if x != nil {
		return x.HoldingID
	}
	return 0
}

func (x *CompanyGroupBRICaMS) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type BRICaMSSvcPagionationV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit     int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	TotalRow  int64 `protobuf:"varint,3,opt,name=totalRow,proto3" json:"totalRow,omitempty"`
	TotalPage int64 `protobuf:"varint,4,opt,name=totalPage,proto3" json:"totalPage,omitempty"`
}

func (x *BRICaMSSvcPagionationV2) Reset() {
	*x = BRICaMSSvcPagionationV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRICaMSSvcPagionationV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRICaMSSvcPagionationV2) ProtoMessage() {}

func (x *BRICaMSSvcPagionationV2) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRICaMSSvcPagionationV2.ProtoReflect.Descriptor instead.
func (*BRICaMSSvcPagionationV2) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{74}
}

func (x *BRICaMSSvcPagionationV2) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *BRICaMSSvcPagionationV2) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *BRICaMSSvcPagionationV2) GetTotalRow() int64 {
	if x != nil {
		return x.TotalRow
	}
	return 0
}

func (x *BRICaMSSvcPagionationV2) GetTotalPage() int64 {
	if x != nil {
		return x.TotalPage
	}
	return 0
}

type BRICaMSSvcMultipleResV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination      *BRICaMSSvcPagionationV2 `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	TotalData       int64                    `protobuf:"varint,2,opt,name=totalData,proto3" json:"totalData,omitempty"`
	ResponseCode    string                   `protobuf:"bytes,3,opt,name=responseCode,proto3" json:"responseCode,omitempty"`
	ResponseMessage string                   `protobuf:"bytes,4,opt,name=responseMessage,proto3" json:"responseMessage,omitempty"`
	Data            []*BRICaMSSvcCompanyV2   `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BRICaMSSvcMultipleResV2) Reset() {
	*x = BRICaMSSvcMultipleResV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRICaMSSvcMultipleResV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRICaMSSvcMultipleResV2) ProtoMessage() {}

func (x *BRICaMSSvcMultipleResV2) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRICaMSSvcMultipleResV2.ProtoReflect.Descriptor instead.
func (*BRICaMSSvcMultipleResV2) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{75}
}

func (x *BRICaMSSvcMultipleResV2) GetPagination() *BRICaMSSvcPagionationV2 {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *BRICaMSSvcMultipleResV2) GetTotalData() int64 {
	if x != nil {
		return x.TotalData
	}
	return 0
}

func (x *BRICaMSSvcMultipleResV2) GetResponseCode() string {
	if x != nil {
		return x.ResponseCode
	}
	return ""
}

func (x *BRICaMSSvcMultipleResV2) GetResponseMessage() string {
	if x != nil {
		return x.ResponseMessage
	}
	return ""
}

func (x *BRICaMSSvcMultipleResV2) GetData() []*BRICaMSSvcCompanyV2 {
	if x != nil {
		return x.Data
	}
	return nil
}

type BRICaMSSvcMultipleResV2CG struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination      *PaginationResponse      `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	TotalData       int64                    `protobuf:"varint,2,opt,name=totalData,proto3" json:"totalData,omitempty"`
	ResponseCode    string                   `protobuf:"bytes,3,opt,name=responseCode,proto3" json:"responseCode,omitempty"`
	ResponseMessage string                   `protobuf:"bytes,4,opt,name=responseMessage,proto3" json:"responseMessage,omitempty"`
	Data            []*BRICaMSSvcCompanyV2CG `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BRICaMSSvcMultipleResV2CG) Reset() {
	*x = BRICaMSSvcMultipleResV2CG{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRICaMSSvcMultipleResV2CG) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRICaMSSvcMultipleResV2CG) ProtoMessage() {}

func (x *BRICaMSSvcMultipleResV2CG) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRICaMSSvcMultipleResV2CG.ProtoReflect.Descriptor instead.
func (*BRICaMSSvcMultipleResV2CG) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{76}
}

func (x *BRICaMSSvcMultipleResV2CG) GetPagination() *PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *BRICaMSSvcMultipleResV2CG) GetTotalData() int64 {
	if x != nil {
		return x.TotalData
	}
	return 0
}

func (x *BRICaMSSvcMultipleResV2CG) GetResponseCode() string {
	if x != nil {
		return x.ResponseCode
	}
	return ""
}

func (x *BRICaMSSvcMultipleResV2CG) GetResponseMessage() string {
	if x != nil {
		return x.ResponseMessage
	}
	return ""
}

func (x *BRICaMSSvcMultipleResV2CG) GetData() []*BRICaMSSvcCompanyV2CG {
	if x != nil {
		return x.Data
	}
	return nil
}

type BRICaMSSvcSingleResV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseCode    string               `protobuf:"bytes,1,opt,name=responseCode,proto3" json:"responseCode,omitempty"`
	ResponseMessage string               `protobuf:"bytes,2,opt,name=responseMessage,proto3" json:"responseMessage,omitempty"`
	Data            *BRICaMSSvcCompanyV2 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *BRICaMSSvcSingleResV2) Reset() {
	*x = BRICaMSSvcSingleResV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BRICaMSSvcSingleResV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BRICaMSSvcSingleResV2) ProtoMessage() {}

func (x *BRICaMSSvcSingleResV2) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BRICaMSSvcSingleResV2.ProtoReflect.Descriptor instead.
func (*BRICaMSSvcSingleResV2) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{77}
}

func (x *BRICaMSSvcSingleResV2) GetResponseCode() string {
	if x != nil {
		return x.ResponseCode
	}
	return ""
}

func (x *BRICaMSSvcSingleResV2) GetResponseMessage() string {
	if x != nil {
		return x.ResponseMessage
	}
	return ""
}

func (x *BRICaMSSvcSingleResV2) GetData() *BRICaMSSvcCompanyV2 {
	if x != nil {
		return x.Data
	}
	return nil
}

type FileListCompanyTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileFormat FileListCompanyTaskRequest_Formats  `protobuf:"varint,1,opt,name=fileFormat,proto3,enum=company.service.v1.FileListCompanyTaskRequest_Formats" json:"fileFormat,omitempty"`
	Status     FileListCompanyTaskRequestStatuses  `protobuf:"varint,2,opt,name=status,proto3,enum=company.service.v1.FileListCompanyTaskRequestStatuses" json:"status,omitempty"`
	Step       FileListCompanyTaskRequestSteps     `protobuf:"varint,3,opt,name=step,proto3,enum=company.service.v1.FileListCompanyTaskRequestSteps" json:"step,omitempty"`
	Limit      int32                               `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Page       int32                               `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	Sort       string                              `protobuf:"bytes,6,opt,name=sort,proto3" json:"sort,omitempty"`
	Dir        FileListCompanyTaskRequestDirection `protobuf:"varint,7,opt,name=dir,proto3,enum=company.service.v1.FileListCompanyTaskRequestDirection" json:"dir,omitempty"`
	Filter     string                              `protobuf:"bytes,8,opt,name=filter,proto3" json:"filter,omitempty"`
	Query      string                              `protobuf:"bytes,9,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *FileListCompanyTaskRequest) Reset() {
	*x = FileListCompanyTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileListCompanyTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileListCompanyTaskRequest) ProtoMessage() {}

func (x *FileListCompanyTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileListCompanyTaskRequest.ProtoReflect.Descriptor instead.
func (*FileListCompanyTaskRequest) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{78}
}

func (x *FileListCompanyTaskRequest) GetFileFormat() FileListCompanyTaskRequest_Formats {
	if x != nil {
		return x.FileFormat
	}
	return FileListCompanyTaskRequest_null
}

func (x *FileListCompanyTaskRequest) GetStatus() FileListCompanyTaskRequestStatuses {
	if x != nil {
		return x.Status
	}
	return FileListCompanyTaskRequest_AllStatus
}

func (x *FileListCompanyTaskRequest) GetStep() FileListCompanyTaskRequestSteps {
	if x != nil {
		return x.Step
	}
	return FileListCompanyTaskRequest_AllStep
}

func (x *FileListCompanyTaskRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *FileListCompanyTaskRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FileListCompanyTaskRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *FileListCompanyTaskRequest) GetDir() FileListCompanyTaskRequestDirection {
	if x != nil {
		return x.Dir
	}
	return FileListCompanyTaskRequest_DESC
}

func (x *FileListCompanyTaskRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *FileListCompanyTaskRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type ErrorBodyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   bool   `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code    uint32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ErrorBodyResponse) Reset() {
	*x = ErrorBodyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorBodyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorBodyResponse) ProtoMessage() {}

func (x *ErrorBodyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorBodyResponse.ProtoReflect.Descriptor instead.
func (*ErrorBodyResponse) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{79}
}

func (x *ErrorBodyResponse) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *ErrorBodyResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ErrorBodyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BricamsGetCustomerResMulti_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Header string `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *BricamsGetCustomerResMulti_Detail) Reset() {
	*x = BricamsGetCustomerResMulti_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BricamsGetCustomerResMulti_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BricamsGetCustomerResMulti_Detail) ProtoMessage() {}

func (x *BricamsGetCustomerResMulti_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BricamsGetCustomerResMulti_Detail.ProtoReflect.Descriptor instead.
func (*BricamsGetCustomerResMulti_Detail) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{40, 0}
}

func (x *BricamsGetCustomerResMulti_Detail) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BricamsGetCustomerResMulti_Detail) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

type BricamsGetCustomerResSingel_Detail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Header string `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *BricamsGetCustomerResSingel_Detail) Reset() {
	*x = BricamsGetCustomerResSingel_Detail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_company_payload_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BricamsGetCustomerResSingel_Detail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BricamsGetCustomerResSingel_Detail) ProtoMessage() {}

func (x *BricamsGetCustomerResSingel_Detail) ProtoReflect() protoreflect.Message {
	mi := &file_company_payload_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BricamsGetCustomerResSingel_Detail.ProtoReflect.Descriptor instead.
func (*BricamsGetCustomerResSingel_Detail) Descriptor() ([]byte, []int) {
	return file_company_payload_proto_rawDescGZIP(), []int{41, 0}
}

func (x *BricamsGetCustomerResSingel_Detail) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BricamsGetCustomerResSingel_Detail) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

var File_company_payload_proto protoreflect.FileDescriptor

var file_company_payload_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x15, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x67, 0x6f, 0x72, 0x6d, 0x5f, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2b, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x56, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x32, 0x0a, 0x0d, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2f, 0x0a,
	0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x07,
	0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3d, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x4b, 0x65, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x46, 0x0a, 0x10, 0x4a, 0x57, 0x54, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x22, 0x0d,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x27, 0x0a,
	0x15, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x73, 0x0a, 0x0f,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x8c, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xdb, 0x0a, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x44, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x20, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0x70, 0x61,
	0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0x92, 0x41, 0x1b, 0x32, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20,
	0x62, 0x79, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x12, 0x42, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x8e, 0x04, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0xf5, 0x03, 0x92, 0x41, 0xf1, 0x03,
	0x32, 0xee, 0x03, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x41, 0x4e, 0x44, 0x27, 0x20,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x6b, 0x65, 0x79,
	0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x3a, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x64, 0x3a, 0x31, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x20, 0x3d, 0x20, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x74,
	0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c,
	0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d,
	0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3e,
	0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20,
	0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20,
	0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31,
	0x2c, 0x6b, 0x65, 0x79, 0x32, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20,
	0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x6b, 0x65, 0x79, 0x32, 0x20, 0x3c, 0x3d, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x20, 0x45,
	0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31,
	0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0xee, 0x02, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0xd7, 0x02, 0x92, 0x41, 0xd3, 0x02,
	0x32, 0xd0, 0x02, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x4f, 0x52, 0x27, 0x20, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a,
	0x20, 0x5b, 0x6b, 0x65, 0x79, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x2c, 0x6b, 0x65, 0x79, 0x33,
	0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x3a, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3d, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x74, 0x79,
	0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20,
	0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x3d, 0x20,
	0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x4f,
	0x52, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20,
	0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20,
	0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e,
	0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x27, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1e,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x45, 0x53, 0x43, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x01, 0x22, 0xf7,
	0x09, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x44, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x20, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0x70, 0x61, 0x67,
	0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92,
	0x41, 0x1b, 0x32, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x62,
	0x79, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x8e, 0x04, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0xf5, 0x03, 0x92, 0x41, 0xf1, 0x03, 0x32, 0xee,
	0x03, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x41, 0x4e, 0x44, 0x27, 0x20, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20,
	0x5b, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x6b, 0x65, 0x79, 0x3a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a,
	0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x3a,
	0x31, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x20, 0x3d, 0x20, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b,
	0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3e, 0x3d, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3e, 0x3d,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x31, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2c, 0x6b,
	0x65, 0x79, 0x32, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x3d, 0x3e,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31,
	0x20, 0x41, 0x4e, 0x44, 0x20, 0x6b, 0x65, 0x79, 0x32, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x32, 0x27, 0x20, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x20, 0x45, 0x58, 0x41,
	0x4d, 0x50, 0x4c, 0x45, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27,
	0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0xee, 0x02, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0xd7, 0x02, 0x92, 0x41, 0xd3, 0x02, 0x32, 0xd0,
	0x02, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x4f, 0x52, 0x27, 0x20, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b,
	0x6b, 0x65, 0x79, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x2c, 0x6b, 0x65, 0x79, 0x33, 0x3a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a,
	0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3d, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x74, 0x79, 0x70, 0x65,
	0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e,
	0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x4f, 0x52, 0x20,
	0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25,
	0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20,
	0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20,
	0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31,
	0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x1e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x01, 0x22, 0xed, 0x09, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67, 0x65,
	0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20,
	0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41, 0x3e,
	0x32, 0x3c, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74, 0x6f,
	0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x8e, 0x04, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0xf5, 0x03, 0x92, 0x41, 0xf1, 0x03, 0x32, 0xee,
	0x03, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x41, 0x4e, 0x44, 0x27, 0x20, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20,
	0x5b, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x6b, 0x65, 0x79, 0x3a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a,
	0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x3a,
	0x31, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x20, 0x3d, 0x20, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b,
	0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3e, 0x3d, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3e, 0x3d,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x31, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2c, 0x6b,
	0x65, 0x79, 0x32, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x3d, 0x3e,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31,
	0x20, 0x41, 0x4e, 0x44, 0x20, 0x6b, 0x65, 0x79, 0x32, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x32, 0x27, 0x20, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x20, 0x45, 0x58, 0x41,
	0x4d, 0x50, 0x4c, 0x45, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27,
	0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0xee, 0x02, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0xd7, 0x02, 0x92, 0x41, 0xd3, 0x02, 0x32, 0xd0,
	0x02, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x4f, 0x52, 0x27, 0x20, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b,
	0x6b, 0x65, 0x79, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x2c, 0x6b, 0x65, 0x79, 0x33, 0x3a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a,
	0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3d, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x74, 0x79, 0x70, 0x65,
	0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e,
	0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x4f, 0x52, 0x20,
	0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25,
	0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20,
	0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20,
	0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31,
	0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x1e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x01, 0x22, 0xf5, 0x09, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x54, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b,
	0x32, 0x39, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x65, 0x72,
	0x20, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x55, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x3c, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d,
	0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70,
	0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x3f, 0x0a,
	0x03, 0x64, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x2e,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x8e,
	0x04, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0xf5, 0x03, 0x92, 0x41, 0xf1, 0x03, 0x32, 0xee, 0x03, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x27, 0x41, 0x4e, 0x44, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2c, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3d,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x31, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57,
	0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x20, 0x3d, 0x20, 0x31,
	0x20, 0x41, 0x4e, 0x44, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49,
	0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x3a, 0x3e, 0x3d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x3a, 0x3c, 0x3d, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x20, 0x3e,
	0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x6b, 0x65, 0x79,
	0x32, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x42, 0x45, 0x54,
	0x57, 0x45, 0x45, 0x4e, 0x20, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x20, 0x0a, 0x20, 0x2d,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0xee, 0x02, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0xd7, 0x02, 0x92, 0x41, 0xd3, 0x02, 0x32, 0xd0, 0x02, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x27, 0x4f, 0x52, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x31, 0x2c, 0x6b, 0x65, 0x79,
	0x32, 0x2c, 0x6b, 0x65, 0x79, 0x33, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3d, 0x6e,
	0x61, 0x6d, 0x65, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x27, 0x20, 0x4f, 0x52, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20,
	0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25,
	0x21, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20,
	0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a,
	0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31,
	0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x22, 0x1e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a,
	0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x01,
	0x22, 0x3c, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xda,
	0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd1, 0x01, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xd0, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xcf, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a, 0x19, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x91, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xea, 0x03, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x5f, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x8c, 0x0b, 0x0a, 0x1b, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x65, 0x70, 0x73, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x12, 0x4b, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x39, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x69, 0x72,
	0x12, 0x8e, 0x04, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0xf5, 0x03, 0x92, 0x41, 0xf1, 0x03, 0x32, 0xee, 0x03, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x27, 0x41, 0x4e, 0x44, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20,
	0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x3a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2c, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20,
	0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x3d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x31, 0x2c, 0x74, 0x79, 0x70, 0x65,
	0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e,
	0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x20, 0x3d,
	0x20, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x0a, 0x20, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d,
	0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49,
	0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20,
	0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x3a,
	0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x3a, 0x3c, 0x3d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31,
	0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x6b,
	0x65, 0x79, 0x32, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x42,
	0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x20, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x20, 0x0a,
	0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31,
	0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0xee, 0x02, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0xd7, 0x02, 0x92, 0x41, 0xd3, 0x02, 0x32, 0xd0, 0x02, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x20, 0x27, 0x4f, 0x52, 0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a,
	0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x31, 0x2c, 0x6b,
	0x65, 0x79, 0x32, 0x2c, 0x6b, 0x65, 0x79, 0x33, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20,
	0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x3d, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x41, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x3e, 0x20, 0x57, 0x68, 0x65, 0x72, 0x65,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x4f, 0x52, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d,
	0x20, 0x27, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x27, 0x20,
	0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a,
	0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d,
	0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20,
	0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27,
	0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x22, 0x5b, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x10,
	0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x05, 0x22,
	0x46, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x53,
	0x74, 0x65, 0x70, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x72, 0x10, 0x04, 0x22, 0x1e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x01, 0x22, 0x7c, 0x0a, 0x12, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x61, 0x67, 0x65, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xa9, 0x05, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74, 0x3a, 0x92, 0x04, 0x92, 0x41, 0x8e, 0x04,
	0x32, 0x8b, 0x04, 0x7b, 0x22, 0x69, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74, 0x22, 0x3a, 0x74, 0x72,
	0x75, 0x65, 0x2c, 0x22, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x7b, 0x22, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x3a, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x3a, 0x22, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x2c, 0x22, 0x68, 0x6f, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x22, 0x3a, 0x30, 0x7d,
	0x2c, 0x22, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3a, 0x5b, 0x7b,
	0x22, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x22, 0x3a, 0x30, 0x2c, 0x22,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3a, 0x22, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x7d,
	0x5d, 0x2c, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x3a, 0x5b, 0x7b, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x22, 0x3a, 0x30,
	0x2c, 0x22, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x22, 0x3a, 0x30, 0x2c,
	0x22, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3a, 0x22, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22,
	0x7d, 0x5d, 0x2c, 0x22, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x62, 0x73, 0x69, 0x64, 0x69,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x73, 0x75,
	0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x44, 0x22, 0x3a, 0x30, 0x7d, 0x5d, 0x2c, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x3a, 0x7b, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x44, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x54, 0x50, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x2c,
	0x22, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x22, 0x69, 0x73, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x22, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x22, 0x3a, 0x74,
	0x72, 0x75, 0x65, 0x2c, 0x22, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x54, 0x50, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x22,
	0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x22, 0x69,
	0x73, 0x4e, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x22, 0x69, 0x73, 0x4e,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x72, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x7d, 0x7d, 0x7d, 0x22, 0xc5,
	0x03, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x12, 0x4b, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x51, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x5d, 0x0a, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x62, 0x73,
	0x69, 0x64, 0x69, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x75, 0x62, 0x73, 0x64, 0x69, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x5a, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0xb5, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x95,
	0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x44, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x59, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0xe4, 0x03, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x54, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x54, 0x50, 0x12, 0x32, 0x0a, 0x14,
	0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x30, 0x0a, 0x13, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x69, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x73, 0x4e, 0x6f,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x54, 0x50, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x54, 0x50, 0x12, 0x38, 0x0a, 0x17, 0x69, 0x73,
	0x4e, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x73, 0x4e,
	0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x18,
	0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x22, 0x79, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x75, 0x62, 0x73, 0x64, 0x69, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x44, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72, 0x79, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13,
	0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x44, 0x22, 0x60, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x65, 0x0a, 0x15, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x6c, 0x0a, 0x1a,
	0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x2b, 0x0a, 0x19, 0x42, 0x72,
	0x69, 0x63, 0x61, 0x6d, 0x73, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x1b, 0x42, 0x72, 0x69, 0x63, 0x61,
	0x6d, 0x73, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xd1, 0x02, 0x0a, 0x1a, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x38, 0x0a, 0x06,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xd3, 0x02, 0x0a, 0x1b, 0x42, 0x72, 0x69, 0x63, 0x61,
	0x6d, 0x73, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x53, 0x69, 0x6e, 0x67, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x4e, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x53, 0x69, 0x6e,
	0x67, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x1a, 0x38, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x9e, 0x01, 0x0a,
	0x14, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69,
	0x63, 0x61, 0x6d, 0x73, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9e, 0x01,
	0x0a, 0x13, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69,
	0x63, 0x61, 0x6d, 0x73, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x53, 0x69, 0x6e, 0x67, 0x65, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb4,
	0x0c, 0x0a, 0x16, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x19, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x72, 0x69, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x72,
	0x69, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x55, 0x72, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x72, 0x69, 0x12, 0x32, 0x0a, 0x14, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x2c, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x6d, 0x61, 0x6b, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x6b, 0x65, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x42, 0x79, 0x55, 0x72, 0x69, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x42, 0x79,
	0x55, 0x72, 0x69, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x68, 0x61, 0x73, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x68, 0x61, 0x73, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x69, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x69, 0x73, 0x4c, 0x6f, 0x67, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x69, 0x73, 0x4c, 0x6f, 0x67,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x69, 0x73, 0x4f, 0x75, 0x74, 0x4f, 0x66,
	0x57, 0x6f, 0x72, 0x6b, 0x48, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x69, 0x73, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x57, 0x6f,
	0x72, 0x6b, 0x48, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x24, 0x0a,
	0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x68, 0x65, 0x61, 0x64, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x53, 0x74, 0x69, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x67, 0x53, 0x74, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x46,
	0x72, 0x65, 0x73, 0x68, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x69, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x46, 0x72, 0x65, 0x73, 0x68, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x62, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x22, 0x9a, 0x02, 0x0a, 0x08, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x54, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x69, 0x73, 0x54, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x53, 0x74, 0x70, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x54, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x54, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x70, 0x12, 0x52, 0x0a, 0x13, 0x74, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x70, 0x53, 0x74, 0x65, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x52, 0x13, 0x74, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x70, 0x53, 0x74, 0x65, 0x70, 0x12, 0x58, 0x0a, 0x16,
	0x6e, 0x6f, 0x6e, 0x54, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53,
	0x74, 0x70, 0x53, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x65, 0x70, 0x52, 0x16,
	0x6e, 0x6f, 0x6e, 0x54, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53,
	0x74, 0x70, 0x53, 0x74, 0x65, 0x70, 0x22, 0xf7, 0x07, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12,
	0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x38, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x3a, 0xbb, 0x06, 0x92, 0x41, 0xb7, 0x06, 0x32, 0xb4, 0x06, 0x7b, 0x22, 0x69, 0x73,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x22, 0x3a, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x22, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x22, 0x3a, 0x7b, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x44, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44,
	0x22, 0x3a, 0x30, 0x2c, 0x22, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a,
	0x22, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x2c, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x2c,
	0x22, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x2c, 0x22, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x3a, 0x5b, 0x7b,
	0x22, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x3a, 0x7b, 0x22, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x49, 0x44, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x2c, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x22,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x7d, 0x2c, 0x22, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x3a, 0x30, 0x7d, 0x5d, 0x2c, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x68, 0x6f, 0x6c,
	0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x22, 0x3a, 0x30,
	0x2c, 0x22, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x22, 0x3a, 0x30, 0x2c,
	0x22, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x3a, 0x7b, 0x22, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x3a, 0x22, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x2c, 0x22, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x3a, 0x22, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x7d, 0x2c, 0x22, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x3a, 0x30, 0x7d, 0x5d, 0x2c, 0x22, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x69,
	0x61, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x22, 0x3a, 0x5b, 0x7b,
	0x22, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x68,
	0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x22, 0x2c, 0x22, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22,
	0x2c, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22,
	0x3a, 0x5b, 0x7b, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x22, 0x3a, 0x30,
	0x2c, 0x22, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x22, 0x3a, 0x30, 0x2c,
	0x22, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x3a, 0x7b, 0x22, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x44, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x3a, 0x22, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x2c, 0x22, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0x3a, 0x22, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x7d, 0x2c, 0x22, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x3a, 0x30, 0x7d, 0x5d, 0x7d, 0x5d, 0x7d, 0x2c, 0x22, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x22, 0x3a, 0x7b, 0x22, 0x69, 0x73, 0x54, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x70, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x2c,
	0x22, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x54, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x74, 0x70, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x22, 0x74, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x70, 0x53, 0x74, 0x65, 0x70,
	0x22, 0x3a, 0x7b, 0x22, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x3a, 0x74, 0x72,
	0x75, 0x65, 0x2c, 0x22, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x22, 0x3a, 0x74, 0x72,
	0x75, 0x65, 0x2c, 0x22, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x22, 0x3a, 0x74, 0x72,
	0x75, 0x65, 0x7d, 0x2c, 0x22, 0x6e, 0x6f, 0x6e, 0x54, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x70, 0x53, 0x74, 0x65, 0x70, 0x22, 0x3a, 0x7b, 0x22, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x22, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x72, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x22, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x22, 0x3a, 0x74, 0x72, 0x75, 0x65, 0x7d, 0x7d, 0x7d,
	0x22, 0x2b, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x88, 0x01,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x88, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x3c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x44, 0x22, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54,
	0x61, 0x73, 0x6b, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc0, 0x04, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x47, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x2e, 0x73, 0x74, 0x65, 0x70,
	0x73, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x42, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x4f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x4f, 0x72, 0x22, 0x5b, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12,
	0x0d, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x05,
	0x22, 0x46, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x6c, 0x6c,
	0x53, 0x74, 0x65, 0x70, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x10, 0x04, 0x22, 0x1e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x01, 0x22, 0x33, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x92, 0x04,
	0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x38, 0x0a, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73,
	0x6b, 0x22, 0xd5, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x12, 0x3c, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x22, 0x87, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc2, 0x03,
	0x0a, 0x13, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x53, 0x76, 0x63, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x56, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x6e, 0x6b, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x61, 0x78, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x68, 0x61, 0x6e, 0x64, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x52, 0x49,
	0x43, 0x61, 0x4d, 0x53, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x32, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x22, 0x52, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x22, 0x2c, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x6f, 0x0a, 0x19, 0x43, 0x65, 0x6b, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x41, 0x76, 0x61, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x68,
	0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x22, 0x74, 0x0a, 0x1e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x53, 0x75, 0x62, 0x73, 0x69, 0x64, 0x69, 0x61, 0x72, 0x79, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x22,
	0x50, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x75, 0x62, 0x73, 0x69, 0x64,
	0x69, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x6f, 0x0a, 0x19, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x44, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x44, 0x22, 0x51, 0x0a, 0x19, 0x43, 0x65, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x44, 0x41, 0x76, 0x61, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x47, 0x65,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x47, 0x65,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x22, 0x38, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x62, 0x61, 0x6e,
	0x6b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x75, 0x73, 0x65, 0x72, 0x10, 0x02, 0x22, 0xbe, 0x02, 0x0a, 0x15,
	0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x53, 0x76, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x56, 0x32, 0x43, 0x47, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x6e, 0x6b, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x62, 0x61, 0x6e, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x4b, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x52, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x51, 0x0a, 0x13,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x52, 0x49, 0x43,
	0x61, 0x4d, 0x53, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x7d, 0x0a, 0x17, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x53, 0x76, 0x63, 0x50, 0x61, 0x67,
	0x69, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x22, 0x8f,
	0x02, 0x0a, 0x17, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x53, 0x76, 0x63, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x56, 0x32, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x53, 0x76, 0x63, 0x50, 0x61,
	0x67, 0x69, 0x6f, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x53, 0x76,
	0x63, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x56, 0x32, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x8e, 0x02, 0x0a, 0x19, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x53, 0x76, 0x63, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x56, 0x32, 0x43, 0x47, 0x12, 0x46,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x53, 0x76, 0x63,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x56, 0x32, 0x43, 0x47, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x53, 0x76, 0x63,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x56, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x52, 0x49,
	0x43, 0x61, 0x4d, 0x53, 0x53, 0x76, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x56, 0x32,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x9a, 0x0d, 0x0a, 0x1a, 0x46, 0x69, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x73, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x74, 0x65,
	0x70, 0x73, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x54, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32, 0x39, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x70, 0x65, 0x72, 0x20, 0x70, 0x61, 0x67,
	0x65, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x41, 0x92, 0x41,
	0x3e, 0x32, 0x3c, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x74,
	0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x20, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x27, 0x2d, 0x31, 0x27, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x70, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x1b, 0x32, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x4a, 0x0a, 0x03, 0x64, 0x69, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x84, 0x04, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0xeb, 0x03, 0x92, 0x41, 0xe7, 0x03, 0x32, 0xe4, 0x03,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x41, 0x4e, 0x44, 0x27, 0x20, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x20, 0x5b,
	0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x3a, 0x31,
	0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x3d, 0x3e,
	0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x20, 0x3d,
	0x20, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3d,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20,
	0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x20,
	0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65,
	0x79, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x20, 0x3e, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d,
	0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27,
	0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x3a, 0x3e, 0x3d, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x3a, 0x3c, 0x3d, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x32, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x20, 0x3e, 0x3d, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x31, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x6b, 0x65, 0x79, 0x32, 0x20, 0x3c,
	0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x27, 0x20, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45,
	0x4e, 0x20, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x3a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2d, 0x3e,
	0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x27, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0xdf, 0x02, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0xc8, 0x02, 0x92,
	0x41, 0xc4, 0x02, 0x32, 0xc1, 0x02, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x27, 0x4f, 0x52,
	0x27, 0x20, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x20, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x3a, 0x20, 0x5b, 0x6b, 0x65, 0x79, 0x31, 0x2c, 0x6b, 0x65, 0x79, 0x32, 0x2c, 0x6b,
	0x65, 0x79, 0x33, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5d, 0x20, 0x0a, 0x20, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3d, 0x6e, 0x61, 0x6d, 0x65,
	0x2c, 0x74, 0x79, 0x70, 0x65, 0x3a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x20, 0x3d, 0x3e,
	0x20, 0x57, 0x68, 0x65, 0x72, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x27, 0x20, 0x4f, 0x52, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20,
	0x3d, 0x20, 0x27, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x27, 0x20, 0x0a, 0x20, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27,
	0x6b, 0x65, 0x79, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b,
	0x65, 0x79, 0x20, 0x3d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20,
	0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x4c, 0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x3a, 0x25, 0x21, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79, 0x20, 0x49, 0x4c,
	0x49, 0x4b, 0x45, 0x20, 0x25, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x25, 0x27, 0x20, 0x0a, 0x20, 0x2d,
	0x20, 0x27, 0x6b, 0x65, 0x79, 0x31, 0x2e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x31, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x20, 0x3d, 0x3e, 0x20, 0x27, 0x6b, 0x65, 0x79,
	0x31, 0x2d, 0x3e, 0x3e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x31, 0x20, 0x3d,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x2e,
	0x0a, 0x07, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x75, 0x6c,
	0x6c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x70, 0x64, 0x66, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x78, 0x6c, 0x73, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x63, 0x73, 0x76, 0x10, 0x03, 0x22, 0x5b,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x72, 0x61, 0x66, 0x74, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x05, 0x22, 0x46, 0x0a, 0x05, 0x73,
	0x74, 0x65, 0x70, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x72, 0x10, 0x04, 0x22, 0x1e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53,
	0x43, 0x10, 0x01, 0x22, 0x57, 0x0a, 0x11, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x06, 0x5a, 0x04,
	0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_company_payload_proto_rawDescOnce sync.Once
	file_company_payload_proto_rawDescData = file_company_payload_proto_rawDesc
)

func file_company_payload_proto_rawDescGZIP() []byte {
	file_company_payload_proto_rawDescOnce.Do(func() {
		file_company_payload_proto_rawDescData = protoimpl.X.CompressGZIP(file_company_payload_proto_rawDescData)
	})
	return file_company_payload_proto_rawDescData
}

var file_company_payload_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_company_payload_proto_msgTypes = make([]protoimpl.MessageInfo, 82)
var file_company_payload_proto_goTypes = []interface{}{
	(ListCompanyDataReqDirection)(0),           // 0: company.service.v1.ListCompanyDataReq.direction
	(ListGroupLimitReqDirection)(0),            // 1: company.service.v1.ListGroupLimitReq.direction
	(ListLimitReqDirection)(0),                 // 2: company.service.v1.ListLimitReq.direction
	(ListCurrencyReqDirection)(0),              // 3: company.service.v1.ListCurrencyReq.direction
	(ListCompanyGroupTaskRequestStatuses)(0),   // 4: company.service.v1.ListCompanyGroupTaskRequest.statuses
	(ListCompanyGroupTaskRequestSteps)(0),      // 5: company.service.v1.ListCompanyGroupTaskRequest.steps
	(ListCompanyGroupTaskRequestDirection)(0),  // 6: company.service.v1.ListCompanyGroupTaskRequest.direction
	(ListCompanyTaskReqStatuses)(0),            // 7: company.service.v1.ListCompanyTaskReq.statuses
	(ListCompanyTaskReqSteps)(0),               // 8: company.service.v1.ListCompanyTaskReq.steps
	(ListCompanyTaskReqDirection)(0),           // 9: company.service.v1.ListCompanyTaskReq.direction
	(TempGenToken_Role)(0),                     // 10: company.service.v1.TempGenToken.Role
	(FileListCompanyTaskRequest_Formats)(0),    // 11: company.service.v1.FileListCompanyTaskRequest.Formats
	(FileListCompanyTaskRequestStatuses)(0),    // 12: company.service.v1.FileListCompanyTaskRequest.statuses
	(FileListCompanyTaskRequestSteps)(0),       // 13: company.service.v1.FileListCompanyTaskRequest.steps
	(FileListCompanyTaskRequestDirection)(0),   // 14: company.service.v1.FileListCompanyTaskRequest.direction
	(*LoginRequest)(nil),                       // 15: company.service.v1.LoginRequest
	(*LoginResponse)(nil),                      // 16: company.service.v1.LoginResponse
	(*HealthCheckResponse)(nil),                // 17: company.service.v1.HealthCheckResponse
	(*Empty)(nil),                              // 18: company.service.v1.Empty
	(*InvalidKeyError)(nil),                    // 19: company.service.v1.InvalidKeyError
	(*JWTTokenResponse)(nil),                   // 20: company.service.v1.JWTTokenResponse
	(*ListRequest)(nil),                        // 21: company.service.v1.ListRequest
	(*DetailCurrencyRequest)(nil),              // 22: company.service.v1.DetailCurrencyRequest
	(*DetailCurrencyResponse)(nil),             // 23: company.service.v1.DetailCurrencyResponse
	(*ListCompanyResponse)(nil),                // 24: company.service.v1.ListCompanyResponse
	(*CompanyResponse)(nil),                    // 25: company.service.v1.CompanyResponse
	(*ListCurrencyResponse)(nil),               // 26: company.service.v1.ListCurrencyResponse
	(*ListCompanyDataReq)(nil),                 // 27: company.service.v1.ListCompanyDataReq
	(*ListGroupLimitReq)(nil),                  // 28: company.service.v1.ListGroupLimitReq
	(*ListLimitReq)(nil),                       // 29: company.service.v1.ListLimitReq
	(*ListCurrencyReq)(nil),                    // 30: company.service.v1.ListCurrencyReq
	(*Sort)(nil),                               // 31: company.service.v1.Sort
	(*ListGroupLimitRes)(nil),                  // 32: company.service.v1.ListGroupLimitRes
	(*ListCompanyDataRes)(nil),                 // 33: company.service.v1.ListCompanyDataRes
	(*ListLimitRes)(nil),                       // 34: company.service.v1.ListLimitRes
	(*ListCurrencyRes)(nil),                    // 35: company.service.v1.ListCurrencyRes
	(*CompanyGroupDetailRequest)(nil),          // 36: company.service.v1.CompanyGroupDetailRequest
	(*CompanyGroupDetailResponse)(nil),         // 37: company.service.v1.CompanyGroupDetailResponse
	(*CompanyGroupTask)(nil),                   // 38: company.service.v1.CompanyGroupTask
	(*CreateCompanyGroupTask)(nil),             // 39: company.service.v1.CreateCompanyGroupTask
	(*ListCompanyGroupTaskRequest)(nil),        // 40: company.service.v1.ListCompanyGroupTaskRequest
	(*PaginationResponse)(nil),                 // 41: company.service.v1.PaginationResponse
	(*ListCompanyGroupTaskResponse)(nil),       // 42: company.service.v1.ListCompanyGroupTaskResponse
	(*CreateCompanyGroupTaskRequest)(nil),      // 43: company.service.v1.CreateCompanyGroupTaskRequest
	(*CreateCompanyGroupRequest)(nil),          // 44: company.service.v1.CreateCompanyGroupRequest
	(*CreateCompanyLimitRequest)(nil),          // 45: company.service.v1.CreateCompanyLimitRequest
	(*CreateGroupLimitRequest)(nil),            // 46: company.service.v1.CreateGroupLimitRequest
	(*CurrencyRequest)(nil),                    // 47: company.service.v1.CurrencyRequest
	(*CreateCompanyWorkflowRequest)(nil),       // 48: company.service.v1.CreateCompanyWorkflowRequest
	(*CreateGroupSubsdiaryRequest)(nil),        // 49: company.service.v1.CreateGroupSubsdiaryRequest
	(*CreateCompanyGroupResponse)(nil),         // 50: company.service.v1.CreateCompanyGroupResponse
	(*BricamsGetCustomerReq)(nil),              // 51: company.service.v1.BricamsGetCustomerReq
	(*BricamsGetCustomerGroupReq)(nil),         // 52: company.service.v1.BricamsGetCustomerGroupReq
	(*BricamsGetCustomerByIdReq)(nil),          // 53: company.service.v1.BricamsGetCustomerByIdReq
	(*BricamsGetCustomerByUserReq)(nil),        // 54: company.service.v1.BricamsGetCustomerByUserReq
	(*BricamsGetCustomerResMulti)(nil),         // 55: company.service.v1.BricamsGetCustomerResMulti
	(*BricamsGetCustomerResSingel)(nil),        // 56: company.service.v1.BricamsGetCustomerResSingel
	(*BricamsResponseDatas)(nil),               // 57: company.service.v1.BricamsResponseDatas
	(*BricamsResponseData)(nil),                // 58: company.service.v1.BricamsResponseData
	(*BricamsGetCustomerData)(nil),             // 59: company.service.v1.BricamsGetCustomerData
	(*WorkflowStep)(nil),                       // 60: company.service.v1.WorkflowStep
	(*Workflow)(nil),                           // 61: company.service.v1.Workflow
	(*CreateCompanyTaskReq)(nil),               // 62: company.service.v1.CreateCompanyTaskReq
	(*CreateCompanyTask)(nil),                  // 63: company.service.v1.CreateCompanyTask
	(*CreateCompanyTaskRes)(nil),               // 64: company.service.v1.CreateCompanyTaskRes
	(*DeleteCompanyTaskReq)(nil),               // 65: company.service.v1.DeleteCompanyTaskReq
	(*DeleteCompanyTaskRes)(nil),               // 66: company.service.v1.DeleteCompanyTaskRes
	(*GetCompanyTaskByHoldingIDReq)(nil),       // 67: company.service.v1.GetCompanyTaskByHoldingIDReq
	(*GetCompanyTaskByIDReq)(nil),              // 68: company.service.v1.GetCompanyTaskByIDReq
	(*GetCompanyTaskByIDRes)(nil),              // 69: company.service.v1.GetCompanyTaskByIDRes
	(*ListCompanyTaskReq)(nil),                 // 70: company.service.v1.ListCompanyTaskReq
	(*GetCompanyTaskByIDRequest)(nil),          // 71: company.service.v1.GetCompanyTaskByIDRequest
	(*Task)(nil),                               // 72: company.service.v1.Task
	(*CompanyTask)(nil),                        // 73: company.service.v1.CompanyTask
	(*ListCompanyTaskRes)(nil),                 // 74: company.service.v1.ListCompanyTaskRes
	(*CreateCompanyReq)(nil),                   // 75: company.service.v1.CreateCompanyReq
	(*CreateCompanyRes)(nil),                   // 76: company.service.v1.CreateCompanyRes
	(*BRICaMSSvcCompanyV2)(nil),                // 77: company.service.v1.BRICaMSSvcCompanyV2
	(*GetGroupIDStoreReq)(nil),                 // 78: company.service.v1.GetGroupIDStoreReq
	(*GetGroupIDStoreRes)(nil),                 // 79: company.service.v1.GetGroupIDStoreRes
	(*DeleteCompanyRes)(nil),                   // 80: company.service.v1.DeleteCompanyRes
	(*CekCompanyIDAvaibilityReq)(nil),          // 81: company.service.v1.CekCompanyIDAvaibilityReq
	(*CompanySubsidiaryValidationReq)(nil),     // 82: company.service.v1.CompanySubsidiaryValidationReq
	(*CompanySubsidiaryValidationRes)(nil),     // 83: company.service.v1.CompanySubsidiaryValidationRes
	(*CheckCompanyIDTaskAndData)(nil),          // 84: company.service.v1.CheckCompanyIDTaskAndData
	(*CekCompanyIDAvaibilityRes)(nil),          // 85: company.service.v1.CekCompanyIDAvaibilityRes
	(*TempGenToken)(nil),                       // 86: company.service.v1.TempGenToken
	(*BRICaMSSvcCompanyV2CG)(nil),              // 87: company.service.v1.BRICaMSSvcCompanyV2CG
	(*CompanyGroupBRICaMS)(nil),                // 88: company.service.v1.CompanyGroupBRICaMS
	(*BRICaMSSvcPagionationV2)(nil),            // 89: company.service.v1.BRICaMSSvcPagionationV2
	(*BRICaMSSvcMultipleResV2)(nil),            // 90: company.service.v1.BRICaMSSvcMultipleResV2
	(*BRICaMSSvcMultipleResV2CG)(nil),          // 91: company.service.v1.BRICaMSSvcMultipleResV2CG
	(*BRICaMSSvcSingleResV2)(nil),              // 92: company.service.v1.BRICaMSSvcSingleResV2
	(*FileListCompanyTaskRequest)(nil),         // 93: company.service.v1.FileListCompanyTaskRequest
	(*ErrorBodyResponse)(nil),                  // 94: company.service.v1.ErrorBodyResponse
	(*BricamsGetCustomerResMulti_Detail)(nil),  // 95: company.service.v1.BricamsGetCustomerResMulti.Detail
	(*BricamsGetCustomerResSingel_Detail)(nil), // 96: company.service.v1.BricamsGetCustomerResSingel.Detail
	(*Currency)(nil),                           // 97: company.service.v1.Currency
	(*CompanyGroupLimit)(nil),                  // 98: company.service.v1.CompanyGroupLimit
	(*Company)(nil),                            // 99: company.service.v1.Company
	(*CompanyLimit)(nil),                       // 100: company.service.v1.CompanyLimit
	(*timestamppb.Timestamp)(nil),              // 101: google.protobuf.Timestamp
}
var file_company_payload_proto_depIdxs = []int32{
	97,  // 0: company.service.v1.DetailCurrencyResponse.data:type_name -> company.service.v1.Currency
	25,  // 1: company.service.v1.ListCompanyResponse.data:type_name -> company.service.v1.CompanyResponse
	97,  // 2: company.service.v1.ListCurrencyResponse.data:type_name -> company.service.v1.Currency
	0,   // 3: company.service.v1.ListCompanyDataReq.dir:type_name -> company.service.v1.ListCompanyDataReq.direction
	1,   // 4: company.service.v1.ListGroupLimitReq.dir:type_name -> company.service.v1.ListGroupLimitReq.direction
	2,   // 5: company.service.v1.ListLimitReq.dir:type_name -> company.service.v1.ListLimitReq.direction
	3,   // 6: company.service.v1.ListCurrencyReq.dir:type_name -> company.service.v1.ListCurrencyReq.direction
	98,  // 7: company.service.v1.ListGroupLimitRes.data:type_name -> company.service.v1.CompanyGroupLimit
	41,  // 8: company.service.v1.ListGroupLimitRes.pagination:type_name -> company.service.v1.PaginationResponse
	99,  // 9: company.service.v1.ListCompanyDataRes.data:type_name -> company.service.v1.Company
	41,  // 10: company.service.v1.ListCompanyDataRes.pagination:type_name -> company.service.v1.PaginationResponse
	100, // 11: company.service.v1.ListLimitRes.data:type_name -> company.service.v1.CompanyLimit
	41,  // 12: company.service.v1.ListLimitRes.pagination:type_name -> company.service.v1.PaginationResponse
	97,  // 13: company.service.v1.ListCurrencyRes.data:type_name -> company.service.v1.Currency
	41,  // 14: company.service.v1.ListCurrencyRes.pagination:type_name -> company.service.v1.PaginationResponse
	99,  // 15: company.service.v1.CompanyGroupDetailResponse.data:type_name -> company.service.v1.Company
	101, // 16: company.service.v1.CompanyGroupTask.createdAt:type_name -> google.protobuf.Timestamp
	101, // 17: company.service.v1.CompanyGroupTask.updatedAt:type_name -> google.protobuf.Timestamp
	44,  // 18: company.service.v1.CreateCompanyGroupTask.companyGroupRequest:type_name -> company.service.v1.CreateCompanyGroupRequest
	38,  // 19: company.service.v1.CreateCompanyGroupTask.task:type_name -> company.service.v1.CompanyGroupTask
	4,   // 20: company.service.v1.ListCompanyGroupTaskRequest.status:type_name -> company.service.v1.ListCompanyGroupTaskRequest.statuses
	5,   // 21: company.service.v1.ListCompanyGroupTaskRequest.step:type_name -> company.service.v1.ListCompanyGroupTaskRequest.steps
	6,   // 22: company.service.v1.ListCompanyGroupTaskRequest.dir:type_name -> company.service.v1.ListCompanyGroupTaskRequest.direction
	39,  // 23: company.service.v1.ListCompanyGroupTaskResponse.data:type_name -> company.service.v1.CreateCompanyGroupTask
	41,  // 24: company.service.v1.ListCompanyGroupTaskResponse.pagination:type_name -> company.service.v1.PaginationResponse
	44,  // 25: company.service.v1.CreateCompanyGroupTaskRequest.data:type_name -> company.service.v1.CreateCompanyGroupRequest
	99,  // 26: company.service.v1.CreateCompanyGroupRequest.company:type_name -> company.service.v1.Company
	46,  // 27: company.service.v1.CreateCompanyGroupRequest.groupLimit:type_name -> company.service.v1.CreateGroupLimitRequest
	45,  // 28: company.service.v1.CreateCompanyGroupRequest.companyLimit:type_name -> company.service.v1.CreateCompanyLimitRequest
	49,  // 29: company.service.v1.CreateCompanyGroupRequest.groupSubsidiaries:type_name -> company.service.v1.CreateGroupSubsdiaryRequest
	48,  // 30: company.service.v1.CreateCompanyGroupRequest.companyWorkflow:type_name -> company.service.v1.CreateCompanyWorkflowRequest
	47,  // 31: company.service.v1.CreateCompanyLimitRequest.currency:type_name -> company.service.v1.CurrencyRequest
	47,  // 32: company.service.v1.CreateGroupLimitRequest.currency:type_name -> company.service.v1.CurrencyRequest
	59,  // 33: company.service.v1.BricamsGetCustomerResMulti.data:type_name -> company.service.v1.BricamsGetCustomerData
	95,  // 34: company.service.v1.BricamsGetCustomerResMulti.detail:type_name -> company.service.v1.BricamsGetCustomerResMulti.Detail
	59,  // 35: company.service.v1.BricamsGetCustomerResSingel.data:type_name -> company.service.v1.BricamsGetCustomerData
	96,  // 36: company.service.v1.BricamsGetCustomerResSingel.detail:type_name -> company.service.v1.BricamsGetCustomerResSingel.Detail
	55,  // 37: company.service.v1.BricamsResponseDatas.data:type_name -> company.service.v1.BricamsGetCustomerResMulti
	56,  // 38: company.service.v1.BricamsResponseData.data:type_name -> company.service.v1.BricamsGetCustomerResSingel
	60,  // 39: company.service.v1.Workflow.tansactionalStpStep:type_name -> company.service.v1.WorkflowStep
	60,  // 40: company.service.v1.Workflow.nonTansactionalStpStep:type_name -> company.service.v1.WorkflowStep
	99,  // 41: company.service.v1.CreateCompanyTaskReq.company:type_name -> company.service.v1.Company
	61,  // 42: company.service.v1.CreateCompanyTaskReq.workflow:type_name -> company.service.v1.Workflow
	72,  // 43: company.service.v1.CreateCompanyTaskRes.data:type_name -> company.service.v1.Task
	72,  // 44: company.service.v1.DeleteCompanyTaskRes.data:type_name -> company.service.v1.Task
	73,  // 45: company.service.v1.GetCompanyTaskByIDRes.data:type_name -> company.service.v1.CompanyTask
	7,   // 46: company.service.v1.ListCompanyTaskReq.status:type_name -> company.service.v1.ListCompanyTaskReq.statuses
	8,   // 47: company.service.v1.ListCompanyTaskReq.step:type_name -> company.service.v1.ListCompanyTaskReq.steps
	9,   // 48: company.service.v1.ListCompanyTaskReq.dir:type_name -> company.service.v1.ListCompanyTaskReq.direction
	101, // 49: company.service.v1.Task.createdAt:type_name -> google.protobuf.Timestamp
	101, // 50: company.service.v1.Task.updatedAt:type_name -> google.protobuf.Timestamp
	99,  // 51: company.service.v1.CompanyTask.company:type_name -> company.service.v1.Company
	61,  // 52: company.service.v1.CompanyTask.workflow:type_name -> company.service.v1.Workflow
	72,  // 53: company.service.v1.CompanyTask.task:type_name -> company.service.v1.Task
	73,  // 54: company.service.v1.ListCompanyTaskRes.data:type_name -> company.service.v1.CompanyTask
	41,  // 55: company.service.v1.ListCompanyTaskRes.pagination:type_name -> company.service.v1.PaginationResponse
	62,  // 56: company.service.v1.CreateCompanyReq.data:type_name -> company.service.v1.CreateCompanyTaskReq
	99,  // 57: company.service.v1.CreateCompanyRes.data:type_name -> company.service.v1.Company
	88,  // 58: company.service.v1.BRICaMSSvcCompanyV2.companyGroup:type_name -> company.service.v1.CompanyGroupBRICaMS
	10,  // 59: company.service.v1.TempGenToken.role:type_name -> company.service.v1.TempGenToken.Role
	88,  // 60: company.service.v1.BRICaMSSvcCompanyV2CG.companyGroup:type_name -> company.service.v1.CompanyGroupBRICaMS
	89,  // 61: company.service.v1.BRICaMSSvcMultipleResV2.pagination:type_name -> company.service.v1.BRICaMSSvcPagionationV2
	77,  // 62: company.service.v1.BRICaMSSvcMultipleResV2.data:type_name -> company.service.v1.BRICaMSSvcCompanyV2
	41,  // 63: company.service.v1.BRICaMSSvcMultipleResV2CG.pagination:type_name -> company.service.v1.PaginationResponse
	87,  // 64: company.service.v1.BRICaMSSvcMultipleResV2CG.data:type_name -> company.service.v1.BRICaMSSvcCompanyV2CG
	77,  // 65: company.service.v1.BRICaMSSvcSingleResV2.data:type_name -> company.service.v1.BRICaMSSvcCompanyV2
	11,  // 66: company.service.v1.FileListCompanyTaskRequest.fileFormat:type_name -> company.service.v1.FileListCompanyTaskRequest.Formats
	12,  // 67: company.service.v1.FileListCompanyTaskRequest.status:type_name -> company.service.v1.FileListCompanyTaskRequest.statuses
	13,  // 68: company.service.v1.FileListCompanyTaskRequest.step:type_name -> company.service.v1.FileListCompanyTaskRequest.steps
	14,  // 69: company.service.v1.FileListCompanyTaskRequest.dir:type_name -> company.service.v1.FileListCompanyTaskRequest.direction
	70,  // [70:70] is the sub-list for method output_type
	70,  // [70:70] is the sub-list for method input_type
	70,  // [70:70] is the sub-list for extension type_name
	70,  // [70:70] is the sub-list for extension extendee
	0,   // [0:70] is the sub-list for field type_name
}

func init() { file_company_payload_proto_init() }
func file_company_payload_proto_init() {
	if File_company_payload_proto != nil {
		return
	}
	file_company_gorm_db_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_company_payload_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvalidKeyError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetailCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompanyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompanyDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGroupLimitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLimitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCurrencyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListGroupLimitRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompanyDataRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLimitRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCurrencyRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyGroupDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyGroupDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyGroupTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCompanyGroupTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompanyGroupTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompanyGroupTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCompanyGroupTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCompanyGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCompanyLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCompanyWorkflowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupSubsdiaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCompanyGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BricamsGetCustomerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BricamsGetCustomerGroupReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BricamsGetCustomerByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BricamsGetCustomerByUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BricamsGetCustomerResMulti); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BricamsGetCustomerResSingel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BricamsResponseDatas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BricamsResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BricamsGetCustomerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkflowStep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workflow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCompanyTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCompanyTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCompanyTaskRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCompanyTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCompanyTaskRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyTaskByHoldingIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyTaskByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyTaskByIDRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompanyTaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyTaskByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCompanyTaskRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCompanyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCompanyRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRICaMSSvcCompanyV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupIDStoreReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupIDStoreRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCompanyRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CekCompanyIDAvaibilityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanySubsidiaryValidationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanySubsidiaryValidationRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCompanyIDTaskAndData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CekCompanyIDAvaibilityRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempGenToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRICaMSSvcCompanyV2CG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyGroupBRICaMS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRICaMSSvcPagionationV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRICaMSSvcMultipleResV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRICaMSSvcMultipleResV2CG); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BRICaMSSvcSingleResV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileListCompanyTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorBodyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BricamsGetCustomerResMulti_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_company_payload_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BricamsGetCustomerResSingel_Detail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_company_payload_proto_rawDesc,
			NumEnums:      15,
			NumMessages:   82,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_company_payload_proto_goTypes,
		DependencyIndexes: file_company_payload_proto_depIdxs,
		EnumInfos:         file_company_payload_proto_enumTypes,
		MessageInfos:      file_company_payload_proto_msgTypes,
	}.Build()
	File_company_payload_proto = out.File
	file_company_payload_proto_rawDesc = nil
	file_company_payload_proto_goTypes = nil
	file_company_payload_proto_depIdxs = nil
}
