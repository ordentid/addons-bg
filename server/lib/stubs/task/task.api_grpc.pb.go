// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: task.api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceClient interface {
	SaveTaskWithData(ctx context.Context, in *SaveTaskRequest, opts ...grpc.CallOption) (*SaveTaskResponse, error)
	SaveTaskWithDataEV(ctx context.Context, in *SaveTaskRequestEV, opts ...grpc.CallOption) (*SaveTaskResponseEV, error)
	SetTask(ctx context.Context, in *SetTaskRequest, opts ...grpc.CallOption) (*SetTaskResponse, error)
	SetTaskEV(ctx context.Context, in *SetTaskRequestEV, opts ...grpc.CallOption) (*SetTaskResponseEV, error)
	GetListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*ListTaskResponse, error)
	GetListTaskPluck(ctx context.Context, in *ListTaskPluckRequest, opts ...grpc.CallOption) (*ListTaskPluckResponse, error)
	GetListTaskEV(ctx context.Context, in *ListTaskRequestEV, opts ...grpc.CallOption) (*ListTaskResponseEV, error)
	GetTaskGraphStatus(ctx context.Context, in *GraphStatusRequest, opts ...grpc.CallOption) (*GraphStatusResponse, error)
	GraphStatusColumnType(ctx context.Context, in *GraphStatusColumnTypeRequest, opts ...grpc.CallOption) (*GraphStatusColumnTypeResponse, error)
	GetTaskGraphStep(ctx context.Context, in *GraphStepRequest, opts ...grpc.CallOption) (*GraphStepResponse, error)
	GetListAnnouncement(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListTaskResponse, error)
	AssignTypeID(ctx context.Context, in *AssignaTypeIDRequest, opts ...grpc.CallOption) (*AssignaTypeIDResponse, error)
	AssignTypeIDEV(ctx context.Context, in *AssignaTypeIDRequestEV, opts ...grpc.CallOption) (*AssignaTypeIDResponse, error)
	GetTaskByID(ctx context.Context, in *GetTaskByIDReq, opts ...grpc.CallOption) (*GetTaskByIDRes, error)
	GetTaskByTypeID(ctx context.Context, in *GetTaskByTypeIDReq, opts ...grpc.CallOption) (*GetTaskByTypeIDRes, error)
	RejectBySystem(ctx context.Context, in *RejectBySystemReq, opts ...grpc.CallOption) (*RejectBySystemRes, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) SaveTaskWithData(ctx context.Context, in *SaveTaskRequest, opts ...grpc.CallOption) (*SaveTaskResponse, error) {
	out := new(SaveTaskResponse)
	err := c.cc.Invoke(ctx, "/task.service.v1.TaskService/SaveTaskWithData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) SaveTaskWithDataEV(ctx context.Context, in *SaveTaskRequestEV, opts ...grpc.CallOption) (*SaveTaskResponseEV, error) {
	out := new(SaveTaskResponseEV)
	err := c.cc.Invoke(ctx, "/task.service.v1.TaskService/SaveTaskWithDataEV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) SetTask(ctx context.Context, in *SetTaskRequest, opts ...grpc.CallOption) (*SetTaskResponse, error) {
	out := new(SetTaskResponse)
	err := c.cc.Invoke(ctx, "/task.service.v1.TaskService/SetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) SetTaskEV(ctx context.Context, in *SetTaskRequestEV, opts ...grpc.CallOption) (*SetTaskResponseEV, error) {
	out := new(SetTaskResponseEV)
	err := c.cc.Invoke(ctx, "/task.service.v1.TaskService/SetTaskEV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*ListTaskResponse, error) {
	out := new(ListTaskResponse)
	err := c.cc.Invoke(ctx, "/task.service.v1.TaskService/GetListTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetListTaskPluck(ctx context.Context, in *ListTaskPluckRequest, opts ...grpc.CallOption) (*ListTaskPluckResponse, error) {
	out := new(ListTaskPluckResponse)
	err := c.cc.Invoke(ctx, "/task.service.v1.TaskService/GetListTaskPluck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetListTaskEV(ctx context.Context, in *ListTaskRequestEV, opts ...grpc.CallOption) (*ListTaskResponseEV, error) {
	out := new(ListTaskResponseEV)
	err := c.cc.Invoke(ctx, "/task.service.v1.TaskService/GetListTaskEV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskGraphStatus(ctx context.Context, in *GraphStatusRequest, opts ...grpc.CallOption) (*GraphStatusResponse, error) {
	out := new(GraphStatusResponse)
	err := c.cc.Invoke(ctx, "/task.service.v1.TaskService/GetTaskGraphStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GraphStatusColumnType(ctx context.Context, in *GraphStatusColumnTypeRequest, opts ...grpc.CallOption) (*GraphStatusColumnTypeResponse, error) {
	out := new(GraphStatusColumnTypeResponse)
	err := c.cc.Invoke(ctx, "/task.service.v1.TaskService/GraphStatusColumnType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskGraphStep(ctx context.Context, in *GraphStepRequest, opts ...grpc.CallOption) (*GraphStepResponse, error) {
	out := new(GraphStepResponse)
	err := c.cc.Invoke(ctx, "/task.service.v1.TaskService/GetTaskGraphStep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetListAnnouncement(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListTaskResponse, error) {
	out := new(ListTaskResponse)
	err := c.cc.Invoke(ctx, "/task.service.v1.TaskService/GetListAnnouncement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) AssignTypeID(ctx context.Context, in *AssignaTypeIDRequest, opts ...grpc.CallOption) (*AssignaTypeIDResponse, error) {
	out := new(AssignaTypeIDResponse)
	err := c.cc.Invoke(ctx, "/task.service.v1.TaskService/AssignTypeID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) AssignTypeIDEV(ctx context.Context, in *AssignaTypeIDRequestEV, opts ...grpc.CallOption) (*AssignaTypeIDResponse, error) {
	out := new(AssignaTypeIDResponse)
	err := c.cc.Invoke(ctx, "/task.service.v1.TaskService/AssignTypeIDEV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskByID(ctx context.Context, in *GetTaskByIDReq, opts ...grpc.CallOption) (*GetTaskByIDRes, error) {
	out := new(GetTaskByIDRes)
	err := c.cc.Invoke(ctx, "/task.service.v1.TaskService/GetTaskByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskByTypeID(ctx context.Context, in *GetTaskByTypeIDReq, opts ...grpc.CallOption) (*GetTaskByTypeIDRes, error) {
	out := new(GetTaskByTypeIDRes)
	err := c.cc.Invoke(ctx, "/task.service.v1.TaskService/GetTaskByTypeID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) RejectBySystem(ctx context.Context, in *RejectBySystemReq, opts ...grpc.CallOption) (*RejectBySystemRes, error) {
	out := new(RejectBySystemRes)
	err := c.cc.Invoke(ctx, "/task.service.v1.TaskService/RejectBySystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility
type TaskServiceServer interface {
	SaveTaskWithData(context.Context, *SaveTaskRequest) (*SaveTaskResponse, error)
	SaveTaskWithDataEV(context.Context, *SaveTaskRequestEV) (*SaveTaskResponseEV, error)
	SetTask(context.Context, *SetTaskRequest) (*SetTaskResponse, error)
	SetTaskEV(context.Context, *SetTaskRequestEV) (*SetTaskResponseEV, error)
	GetListTask(context.Context, *ListTaskRequest) (*ListTaskResponse, error)
	GetListTaskPluck(context.Context, *ListTaskPluckRequest) (*ListTaskPluckResponse, error)
	GetListTaskEV(context.Context, *ListTaskRequestEV) (*ListTaskResponseEV, error)
	GetTaskGraphStatus(context.Context, *GraphStatusRequest) (*GraphStatusResponse, error)
	GraphStatusColumnType(context.Context, *GraphStatusColumnTypeRequest) (*GraphStatusColumnTypeResponse, error)
	GetTaskGraphStep(context.Context, *GraphStepRequest) (*GraphStepResponse, error)
	GetListAnnouncement(context.Context, *ListRequest) (*ListTaskResponse, error)
	AssignTypeID(context.Context, *AssignaTypeIDRequest) (*AssignaTypeIDResponse, error)
	AssignTypeIDEV(context.Context, *AssignaTypeIDRequestEV) (*AssignaTypeIDResponse, error)
	GetTaskByID(context.Context, *GetTaskByIDReq) (*GetTaskByIDRes, error)
	GetTaskByTypeID(context.Context, *GetTaskByTypeIDReq) (*GetTaskByTypeIDRes, error)
	RejectBySystem(context.Context, *RejectBySystemReq) (*RejectBySystemRes, error)
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (UnimplementedTaskServiceServer) SaveTaskWithData(context.Context, *SaveTaskRequest) (*SaveTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTaskWithData not implemented")
}
func (UnimplementedTaskServiceServer) SaveTaskWithDataEV(context.Context, *SaveTaskRequestEV) (*SaveTaskResponseEV, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTaskWithDataEV not implemented")
}
func (UnimplementedTaskServiceServer) SetTask(context.Context, *SetTaskRequest) (*SetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTask not implemented")
}
func (UnimplementedTaskServiceServer) SetTaskEV(context.Context, *SetTaskRequestEV) (*SetTaskResponseEV, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskEV not implemented")
}
func (UnimplementedTaskServiceServer) GetListTask(context.Context, *ListTaskRequest) (*ListTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListTask not implemented")
}
func (UnimplementedTaskServiceServer) GetListTaskPluck(context.Context, *ListTaskPluckRequest) (*ListTaskPluckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListTaskPluck not implemented")
}
func (UnimplementedTaskServiceServer) GetListTaskEV(context.Context, *ListTaskRequestEV) (*ListTaskResponseEV, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListTaskEV not implemented")
}
func (UnimplementedTaskServiceServer) GetTaskGraphStatus(context.Context, *GraphStatusRequest) (*GraphStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskGraphStatus not implemented")
}
func (UnimplementedTaskServiceServer) GraphStatusColumnType(context.Context, *GraphStatusColumnTypeRequest) (*GraphStatusColumnTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GraphStatusColumnType not implemented")
}
func (UnimplementedTaskServiceServer) GetTaskGraphStep(context.Context, *GraphStepRequest) (*GraphStepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskGraphStep not implemented")
}
func (UnimplementedTaskServiceServer) GetListAnnouncement(context.Context, *ListRequest) (*ListTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListAnnouncement not implemented")
}
func (UnimplementedTaskServiceServer) AssignTypeID(context.Context, *AssignaTypeIDRequest) (*AssignaTypeIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTypeID not implemented")
}
func (UnimplementedTaskServiceServer) AssignTypeIDEV(context.Context, *AssignaTypeIDRequestEV) (*AssignaTypeIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTypeIDEV not implemented")
}
func (UnimplementedTaskServiceServer) GetTaskByID(context.Context, *GetTaskByIDReq) (*GetTaskByIDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskByID not implemented")
}
func (UnimplementedTaskServiceServer) GetTaskByTypeID(context.Context, *GetTaskByTypeIDReq) (*GetTaskByTypeIDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskByTypeID not implemented")
}
func (UnimplementedTaskServiceServer) RejectBySystem(context.Context, *RejectBySystemReq) (*RejectBySystemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectBySystem not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_SaveTaskWithData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).SaveTaskWithData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.v1.TaskService/SaveTaskWithData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).SaveTaskWithData(ctx, req.(*SaveTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_SaveTaskWithDataEV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTaskRequestEV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).SaveTaskWithDataEV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.v1.TaskService/SaveTaskWithDataEV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).SaveTaskWithDataEV(ctx, req.(*SaveTaskRequestEV))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_SetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).SetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.v1.TaskService/SetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).SetTask(ctx, req.(*SetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_SetTaskEV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTaskRequestEV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).SetTaskEV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.v1.TaskService/SetTaskEV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).SetTaskEV(ctx, req.(*SetTaskRequestEV))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.v1.TaskService/GetListTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetListTask(ctx, req.(*ListTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetListTaskPluck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskPluckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetListTaskPluck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.v1.TaskService/GetListTaskPluck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetListTaskPluck(ctx, req.(*ListTaskPluckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetListTaskEV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskRequestEV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetListTaskEV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.v1.TaskService/GetListTaskEV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetListTaskEV(ctx, req.(*ListTaskRequestEV))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskGraphStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskGraphStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.v1.TaskService/GetTaskGraphStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskGraphStatus(ctx, req.(*GraphStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GraphStatusColumnType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphStatusColumnTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GraphStatusColumnType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.v1.TaskService/GraphStatusColumnType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GraphStatusColumnType(ctx, req.(*GraphStatusColumnTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskGraphStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskGraphStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.v1.TaskService/GetTaskGraphStep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskGraphStep(ctx, req.(*GraphStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetListAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetListAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.v1.TaskService/GetListAnnouncement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetListAnnouncement(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_AssignTypeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignaTypeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).AssignTypeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.v1.TaskService/AssignTypeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).AssignTypeID(ctx, req.(*AssignaTypeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_AssignTypeIDEV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignaTypeIDRequestEV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).AssignTypeIDEV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.v1.TaskService/AssignTypeIDEV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).AssignTypeIDEV(ctx, req.(*AssignaTypeIDRequestEV))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.v1.TaskService/GetTaskByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskByID(ctx, req.(*GetTaskByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskByTypeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskByTypeIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskByTypeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.v1.TaskService/GetTaskByTypeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskByTypeID(ctx, req.(*GetTaskByTypeIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_RejectBySystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectBySystemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).RejectBySystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.service.v1.TaskService/RejectBySystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).RejectBySystem(ctx, req.(*RejectBySystemReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task.service.v1.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveTaskWithData",
			Handler:    _TaskService_SaveTaskWithData_Handler,
		},
		{
			MethodName: "SaveTaskWithDataEV",
			Handler:    _TaskService_SaveTaskWithDataEV_Handler,
		},
		{
			MethodName: "SetTask",
			Handler:    _TaskService_SetTask_Handler,
		},
		{
			MethodName: "SetTaskEV",
			Handler:    _TaskService_SetTaskEV_Handler,
		},
		{
			MethodName: "GetListTask",
			Handler:    _TaskService_GetListTask_Handler,
		},
		{
			MethodName: "GetListTaskPluck",
			Handler:    _TaskService_GetListTaskPluck_Handler,
		},
		{
			MethodName: "GetListTaskEV",
			Handler:    _TaskService_GetListTaskEV_Handler,
		},
		{
			MethodName: "GetTaskGraphStatus",
			Handler:    _TaskService_GetTaskGraphStatus_Handler,
		},
		{
			MethodName: "GraphStatusColumnType",
			Handler:    _TaskService_GraphStatusColumnType_Handler,
		},
		{
			MethodName: "GetTaskGraphStep",
			Handler:    _TaskService_GetTaskGraphStep_Handler,
		},
		{
			MethodName: "GetListAnnouncement",
			Handler:    _TaskService_GetListAnnouncement_Handler,
		},
		{
			MethodName: "AssignTypeID",
			Handler:    _TaskService_AssignTypeID_Handler,
		},
		{
			MethodName: "AssignTypeIDEV",
			Handler:    _TaskService_AssignTypeIDEV_Handler,
		},
		{
			MethodName: "GetTaskByID",
			Handler:    _TaskService_GetTaskByID_Handler,
		},
		{
			MethodName: "GetTaskByTypeID",
			Handler:    _TaskService_GetTaskByTypeID_Handler,
		},
		{
			MethodName: "RejectBySystem",
			Handler:    _TaskService_RejectBySystem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.api.proto",
}
