// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: task.gorm_db.proto

package pb

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Statuses int32

const (
	Statuses_NullStatus    Statuses = 0
	Statuses_Pending       Statuses = 1
	Statuses_Draft         Statuses = 2
	Statuses_Returned      Statuses = 3
	Statuses_Approved      Statuses = 4
	Statuses_Rejected      Statuses = 5
	Statuses_DeleteRequest Statuses = 6
	Statuses_Deleted       Statuses = 7
)

// Enum value maps for Statuses.
var (
	Statuses_name = map[int32]string{
		0: "NullStatus",
		1: "Pending",
		2: "Draft",
		3: "Returned",
		4: "Approved",
		5: "Rejected",
		6: "DeleteRequest",
		7: "Deleted",
	}
	Statuses_value = map[string]int32{
		"NullStatus":    0,
		"Pending":       1,
		"Draft":         2,
		"Returned":      3,
		"Approved":      4,
		"Rejected":      5,
		"DeleteRequest": 6,
		"Deleted":       7,
	}
)

func (x Statuses) Enum() *Statuses {
	p := new(Statuses)
	*p = x
	return p
}

func (x Statuses) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Statuses) Descriptor() protoreflect.EnumDescriptor {
	return file_task_gorm_db_proto_enumTypes[0].Descriptor()
}

func (Statuses) Type() protoreflect.EnumType {
	return &file_task_gorm_db_proto_enumTypes[0]
}

func (x Statuses) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Statuses.Descriptor instead.
func (Statuses) EnumDescriptor() ([]byte, []int) {
	return file_task_gorm_db_proto_rawDescGZIP(), []int{0}
}

type Steps int32

const (
	Steps_NullStep Steps = 0
	Steps_Maker    Steps = 1
	Steps_Checker  Steps = 2
	Steps_Signer   Steps = 3
	Steps_Releaser Steps = 4
)

// Enum value maps for Steps.
var (
	Steps_name = map[int32]string{
		0: "NullStep",
		1: "Maker",
		2: "Checker",
		3: "Signer",
		4: "Releaser",
	}
	Steps_value = map[string]int32{
		"NullStep": 0,
		"Maker":    1,
		"Checker":  2,
		"Signer":   3,
		"Releaser": 4,
	}
)

func (x Steps) Enum() *Steps {
	p := new(Steps)
	*p = x
	return p
}

func (x Steps) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Steps) Descriptor() protoreflect.EnumDescriptor {
	return file_task_gorm_db_proto_enumTypes[1].Descriptor()
}

func (Steps) Type() protoreflect.EnumType {
	return &file_task_gorm_db_proto_enumTypes[1]
}

func (x Steps) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Steps.Descriptor instead.
func (Steps) EnumDescriptor() ([]byte, []int) {
	return file_task_gorm_db_proto_rawDescGZIP(), []int{1}
}

// Example User
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username  string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password  string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Role      string                 `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_gorm_db_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_task_gorm_db_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_task_gorm_db_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *User) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *User) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID             uint64                 `protobuf:"varint,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	Type               string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Status             Statuses               `protobuf:"varint,3,opt,name=status,proto3,enum=task.service.v1.Statuses" json:"status,omitempty"`
	Step               Steps                  `protobuf:"varint,4,opt,name=step,proto3,enum=task.service.v1.Steps" json:"step,omitempty"`
	CreatedByID        uint64                 `protobuf:"varint,5,opt,name=createdByID,proto3" json:"createdByID,omitempty"`
	LastApprovedByID   uint64                 `protobuf:"varint,6,opt,name=lastApprovedByID,proto3" json:"lastApprovedByID,omitempty"`
	LastRejectedByID   uint64                 `protobuf:"varint,7,opt,name=lastRejectedByID,proto3" json:"lastRejectedByID,omitempty"`
	Data               string                 `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	Comment            string                 `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment,omitempty"`
	FeatureID          uint64                 `protobuf:"varint,10,opt,name=featureID,proto3" json:"featureID,omitempty"`
	Childs             []*Task                `protobuf:"bytes,11,rep,name=childs,proto3" json:"childs,omitempty"`
	IsParentActive     bool                   `protobuf:"varint,12,opt,name=isParentActive,proto3" json:"isParentActive,omitempty"`
	Reasons            string                 `protobuf:"bytes,13,opt,name=reasons,proto3" json:"reasons,omitempty"`
	LastApprovedByName string                 `protobuf:"bytes,14,opt,name=lastApprovedByName,proto3" json:"lastApprovedByName,omitempty"`
	LastRejectedByName string                 `protobuf:"bytes,15,opt,name=lastRejectedByName,proto3" json:"lastRejectedByName,omitempty"`
	UpdatedByID        uint64                 `protobuf:"varint,16,opt,name=updatedByID,proto3" json:"updatedByID,omitempty"`
	UpdatedByName      string                 `protobuf:"bytes,17,opt,name=updatedByName,proto3" json:"updatedByName,omitempty"`
	CreatedByName      string                 `protobuf:"bytes,18,opt,name=createdByName,proto3" json:"createdByName,omitempty"`
	DataBak            string                 `protobuf:"bytes,19,opt,name=dataBak,proto3" json:"dataBak,omitempty"`
	ChildBak           string                 `protobuf:"bytes,20,opt,name=childBak,proto3" json:"childBak,omitempty"`
	WorkflowDoc        string                 `protobuf:"bytes,21,opt,name=workflowDoc,proto3" json:"workflowDoc,omitempty"`
	CompanyID          uint64                 `protobuf:"varint,22,opt,name=companyID,proto3" json:"companyID,omitempty"`
	HoldingID          uint64                 `protobuf:"varint,23,opt,name=holdingID,proto3" json:"holdingID,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	DeletedAt          *timestamppb.Timestamp `protobuf:"bytes,103,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_gorm_db_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_task_gorm_db_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_task_gorm_db_proto_rawDescGZIP(), []int{1}
}

func (x *Task) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *Task) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Task) GetStatus() Statuses {
	if x != nil {
		return x.Status
	}
	return Statuses_NullStatus
}

func (x *Task) GetStep() Steps {
	if x != nil {
		return x.Step
	}
	return Steps_NullStep
}

func (x *Task) GetCreatedByID() uint64 {
	if x != nil {
		return x.CreatedByID
	}
	return 0
}

func (x *Task) GetLastApprovedByID() uint64 {
	if x != nil {
		return x.LastApprovedByID
	}
	return 0
}

func (x *Task) GetLastRejectedByID() uint64 {
	if x != nil {
		return x.LastRejectedByID
	}
	return 0
}

func (x *Task) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *Task) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Task) GetFeatureID() uint64 {
	if x != nil {
		return x.FeatureID
	}
	return 0
}

func (x *Task) GetChilds() []*Task {
	if x != nil {
		return x.Childs
	}
	return nil
}

func (x *Task) GetIsParentActive() bool {
	if x != nil {
		return x.IsParentActive
	}
	return false
}

func (x *Task) GetReasons() string {
	if x != nil {
		return x.Reasons
	}
	return ""
}

func (x *Task) GetLastApprovedByName() string {
	if x != nil {
		return x.LastApprovedByName
	}
	return ""
}

func (x *Task) GetLastRejectedByName() string {
	if x != nil {
		return x.LastRejectedByName
	}
	return ""
}

func (x *Task) GetUpdatedByID() uint64 {
	if x != nil {
		return x.UpdatedByID
	}
	return 0
}

func (x *Task) GetUpdatedByName() string {
	if x != nil {
		return x.UpdatedByName
	}
	return ""
}

func (x *Task) GetCreatedByName() string {
	if x != nil {
		return x.CreatedByName
	}
	return ""
}

func (x *Task) GetDataBak() string {
	if x != nil {
		return x.DataBak
	}
	return ""
}

func (x *Task) GetChildBak() string {
	if x != nil {
		return x.ChildBak
	}
	return ""
}

func (x *Task) GetWorkflowDoc() string {
	if x != nil {
		return x.WorkflowDoc
	}
	return ""
}

func (x *Task) GetCompanyID() uint64 {
	if x != nil {
		return x.CompanyID
	}
	return 0
}

func (x *Task) GetHoldingID() uint64 {
	if x != nil {
		return x.HoldingID
	}
	return 0
}

func (x *Task) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Task) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Task) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type TaskEV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID             string                 `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Type               string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Status             Statuses               `protobuf:"varint,3,opt,name=status,proto3,enum=task.service.v1.Statuses" json:"status,omitempty"`
	Step               Steps                  `protobuf:"varint,4,opt,name=step,proto3,enum=task.service.v1.Steps" json:"step,omitempty"`
	CreatedByID        string                 `protobuf:"bytes,5,opt,name=createdByID,proto3" json:"createdByID,omitempty"`
	LastApprovedByID   string                 `protobuf:"bytes,6,opt,name=lastApprovedByID,proto3" json:"lastApprovedByID,omitempty"`
	LastRejectedByID   string                 `protobuf:"bytes,7,opt,name=lastRejectedByID,proto3" json:"lastRejectedByID,omitempty"`
	Data               string                 `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	Comment            string                 `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment,omitempty"`
	FeatureID          string                 `protobuf:"bytes,10,opt,name=featureID,proto3" json:"featureID,omitempty"`
	Childs             []*TaskEV              `protobuf:"bytes,11,rep,name=childs,proto3" json:"childs,omitempty"`
	IsParentActive     bool                   `protobuf:"varint,12,opt,name=isParentActive,proto3" json:"isParentActive,omitempty"`
	Reasons            string                 `protobuf:"bytes,13,opt,name=reasons,proto3" json:"reasons,omitempty"`
	LastApprovedByName string                 `protobuf:"bytes,14,opt,name=lastApprovedByName,proto3" json:"lastApprovedByName,omitempty"`
	LastRejectedByName string                 `protobuf:"bytes,15,opt,name=lastRejectedByName,proto3" json:"lastRejectedByName,omitempty"`
	UpdatedByID        uint64                 `protobuf:"varint,16,opt,name=updatedByID,proto3" json:"updatedByID,omitempty"`
	UpdatedByName      string                 `protobuf:"bytes,17,opt,name=updatedByName,proto3" json:"updatedByName,omitempty"`
	CreatedByName      string                 `protobuf:"bytes,18,opt,name=createdByName,proto3" json:"createdByName,omitempty"`
	DataBak            string                 `protobuf:"bytes,19,opt,name=dataBak,proto3" json:"dataBak,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	DeletedAt          *timestamppb.Timestamp `protobuf:"bytes,103,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
}

func (x *TaskEV) Reset() {
	*x = TaskEV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_gorm_db_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskEV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskEV) ProtoMessage() {}

func (x *TaskEV) ProtoReflect() protoreflect.Message {
	mi := &file_task_gorm_db_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskEV.ProtoReflect.Descriptor instead.
func (*TaskEV) Descriptor() ([]byte, []int) {
	return file_task_gorm_db_proto_rawDescGZIP(), []int{2}
}

func (x *TaskEV) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *TaskEV) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TaskEV) GetStatus() Statuses {
	if x != nil {
		return x.Status
	}
	return Statuses_NullStatus
}

func (x *TaskEV) GetStep() Steps {
	if x != nil {
		return x.Step
	}
	return Steps_NullStep
}

func (x *TaskEV) GetCreatedByID() string {
	if x != nil {
		return x.CreatedByID
	}
	return ""
}

func (x *TaskEV) GetLastApprovedByID() string {
	if x != nil {
		return x.LastApprovedByID
	}
	return ""
}

func (x *TaskEV) GetLastRejectedByID() string {
	if x != nil {
		return x.LastRejectedByID
	}
	return ""
}

func (x *TaskEV) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TaskEV) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TaskEV) GetFeatureID() string {
	if x != nil {
		return x.FeatureID
	}
	return ""
}

func (x *TaskEV) GetChilds() []*TaskEV {
	if x != nil {
		return x.Childs
	}
	return nil
}

func (x *TaskEV) GetIsParentActive() bool {
	if x != nil {
		return x.IsParentActive
	}
	return false
}

func (x *TaskEV) GetReasons() string {
	if x != nil {
		return x.Reasons
	}
	return ""
}

func (x *TaskEV) GetLastApprovedByName() string {
	if x != nil {
		return x.LastApprovedByName
	}
	return ""
}

func (x *TaskEV) GetLastRejectedByName() string {
	if x != nil {
		return x.LastRejectedByName
	}
	return ""
}

func (x *TaskEV) GetUpdatedByID() uint64 {
	if x != nil {
		return x.UpdatedByID
	}
	return 0
}

func (x *TaskEV) GetUpdatedByName() string {
	if x != nil {
		return x.UpdatedByName
	}
	return ""
}

func (x *TaskEV) GetCreatedByName() string {
	if x != nil {
		return x.CreatedByName
	}
	return ""
}

func (x *TaskEV) GetDataBak() string {
	if x != nil {
		return x.DataBak
	}
	return ""
}

func (x *TaskEV) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TaskEV) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TaskEV) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type TaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID           uint64                 `protobuf:"varint,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	Type             string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Status           Statuses               `protobuf:"varint,3,opt,name=status,proto3,enum=task.service.v1.Statuses" json:"status,omitempty"`
	Step             Steps                  `protobuf:"varint,4,opt,name=step,proto3,enum=task.service.v1.Steps" json:"step,omitempty"`
	CreatedByID      uint64                 `protobuf:"varint,5,opt,name=createdByID,proto3" json:"createdByID,omitempty"`
	LastApprovedByID string                 `protobuf:"bytes,6,opt,name=lastApprovedByID,proto3" json:"lastApprovedByID,omitempty"`
	LastRejectedByID string                 `protobuf:"bytes,7,opt,name=lastRejectedByID,proto3" json:"lastRejectedByID,omitempty"`
	Data             string                 `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *TaskRequest) Reset() {
	*x = TaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_gorm_db_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRequest) ProtoMessage() {}

func (x *TaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_task_gorm_db_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRequest.ProtoReflect.Descriptor instead.
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return file_task_gorm_db_proto_rawDescGZIP(), []int{3}
}

func (x *TaskRequest) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *TaskRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TaskRequest) GetStatus() Statuses {
	if x != nil {
		return x.Status
	}
	return Statuses_NullStatus
}

func (x *TaskRequest) GetStep() Steps {
	if x != nil {
		return x.Step
	}
	return Steps_NullStep
}

func (x *TaskRequest) GetCreatedByID() uint64 {
	if x != nil {
		return x.CreatedByID
	}
	return 0
}

func (x *TaskRequest) GetLastApprovedByID() string {
	if x != nil {
		return x.LastApprovedByID
	}
	return ""
}

func (x *TaskRequest) GetLastRejectedByID() string {
	if x != nil {
		return x.LastRejectedByID
	}
	return ""
}

func (x *TaskRequest) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *TaskRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TaskRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CompanyTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID    uint64                 `protobuf:"varint,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	Type      string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Data      string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Task      *Task                  `protobuf:"bytes,51,opt,name=task,proto3" json:"task,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *CompanyTask) Reset() {
	*x = CompanyTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_gorm_db_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyTask) ProtoMessage() {}

func (x *CompanyTask) ProtoReflect() protoreflect.Message {
	mi := &file_task_gorm_db_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyTask.ProtoReflect.Descriptor instead.
func (*CompanyTask) Descriptor() ([]byte, []int) {
	return file_task_gorm_db_proto_rawDescGZIP(), []int{4}
}

func (x *CompanyTask) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *CompanyTask) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CompanyTask) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *CompanyTask) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *CompanyTask) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CompanyTask) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type AnnouncementTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID    uint64                 `protobuf:"varint,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	Type      string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Data      string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Task      *Task                  `protobuf:"bytes,51,opt,name=task,proto3" json:"task,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *AnnouncementTask) Reset() {
	*x = AnnouncementTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_gorm_db_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnouncementTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnouncementTask) ProtoMessage() {}

func (x *AnnouncementTask) ProtoReflect() protoreflect.Message {
	mi := &file_task_gorm_db_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnouncementTask.ProtoReflect.Descriptor instead.
func (*AnnouncementTask) Descriptor() ([]byte, []int) {
	return file_task_gorm_db_proto_rawDescGZIP(), []int{5}
}

func (x *AnnouncementTask) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *AnnouncementTask) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AnnouncementTask) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *AnnouncementTask) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *AnnouncementTask) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AnnouncementTask) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type AccountTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID    uint64                 `protobuf:"varint,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	Type      string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Data      string                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Task      *Task                  `protobuf:"bytes,51,opt,name=task,proto3" json:"task,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *AccountTask) Reset() {
	*x = AccountTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_task_gorm_db_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTask) ProtoMessage() {}

func (x *AccountTask) ProtoReflect() protoreflect.Message {
	mi := &file_task_gorm_db_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTask.ProtoReflect.Descriptor instead.
func (*AccountTask) Descriptor() ([]byte, []int) {
	return file_task_gorm_db_proto_rawDescGZIP(), []int{6}
}

func (x *AccountTask) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *AccountTask) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AccountTask) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *AccountTask) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *AccountTask) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AccountTask) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_task_gorm_db_proto protoreflect.FileDescriptor

var file_task_gorm_db_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x5f, 0x64, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x72, 0x6d, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6d, 0x77, 0x69,
	0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfe, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0d, 0xe0,
	0x41, 0x03, 0xba, 0xb9, 0x19, 0x06, 0x0a, 0x04, 0x28, 0x01, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x13, 0xe0, 0x41, 0x02, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0xba, 0xb9, 0x19,
	0x06, 0x0a, 0x04, 0x30, 0x01, 0x40, 0x01, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0xe0, 0x41, 0x02, 0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0xba, 0xb9,
	0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x28, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0xe2, 0xdf, 0x1f, 0x02, 0x20, 0x01, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x3a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x40, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x0d, 0xba, 0xb9, 0x19, 0x09,
	0x08, 0x01, 0x1a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x84, 0x0a, 0x0a, 0x04, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x29, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x11, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01, 0x03, 0xba, 0xb9, 0x19, 0x06, 0x0a,
	0x04, 0x28, 0x01, 0x40, 0x01, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0xb9, 0x19,
	0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x42, 0x0b, 0xba, 0xb9, 0x19, 0x07, 0x0a, 0x05, 0x3a, 0x01,
	0x31, 0x40, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x73,
	0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x65, 0x70,
	0x73, 0x42, 0x0b, 0xba, 0xb9, 0x19, 0x07, 0x0a, 0x05, 0x3a, 0x01, 0x31, 0x40, 0x01, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x12, 0x31, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0f, 0x92, 0x41, 0x04, 0x9a, 0x02,
	0x01, 0x03, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x07, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x52,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0d, 0xba, 0xb9, 0x19, 0x09, 0x0a, 0x07, 0x12, 0x05, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0xb9, 0x19, 0x08, 0x0a, 0x06, 0x12, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x06, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x42, 0x12, 0xba, 0xb9, 0x19, 0x0e, 0x2a, 0x0c, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x58, 0x01, 0x52, 0x06, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x38, 0x0a,
	0x0e, 0x69, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x10, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19, 0x09, 0x0a, 0x07,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0e, 0x69, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xba, 0xb9, 0x19, 0x10, 0x0a, 0x0e,
	0x12, 0x0c, 0x76, 0x61, 0x72, 0x63, 0x68, 0x61, 0x72, 0x28, 0x32, 0x35, 0x35, 0x29, 0x52, 0x07,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x12,
	0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x6c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x29, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x52,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x0d,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x42, 0x61, 0x6b, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x10, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19, 0x09, 0x0a, 0x07, 0x12, 0x05,
	0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x42, 0x61, 0x6b, 0x12, 0x30,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x61, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19, 0x0d, 0x0a, 0x0b, 0x12, 0x05, 0x6a, 0x73, 0x6f,
	0x6e, 0x62, 0x3a, 0x02, 0x5b, 0x5d, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x61, 0x6b,
	0x12, 0x33, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x6f, 0x63, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xba, 0xb9, 0x19, 0x0d, 0x0a, 0x0b, 0x12, 0x05, 0x6a,
	0x73, 0x6f, 0x6e, 0x62, 0x3a, 0x02, 0x7b, 0x7d, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x44, 0x6f, 0x63, 0x12, 0x25, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01,
	0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x09,
	0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x07, 0x92, 0x41, 0x04, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x3a, 0x0d, 0xba, 0xb9, 0x19, 0x09, 0x08, 0x01, 0x1a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x22, 0xe2, 0x06, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x56, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74, 0x65, 0x70, 0x73,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x06,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x45, 0x56, 0x52, 0x06, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x69, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12,
	0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x42, 0x61, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x61, 0x6b, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xfc, 0x03, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0d, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19, 0x06, 0x0a, 0x04,
	0x28, 0x01, 0x40, 0x01, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xba,
	0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xba, 0xb9, 0x19,
	0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x74,
	0x65, 0x70, 0x73, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x2d, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0b, 0xe0, 0x41, 0x02,
	0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xba, 0xb9, 0x19, 0x02, 0x0a, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xca, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x0d, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19, 0x06, 0x0a, 0x04, 0x28,
	0x01, 0x40, 0x01, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xba, 0xb9,
	0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xba,
	0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a,
	0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x42, 0x12, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19, 0x0b, 0x22, 0x09, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x3d, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x15, 0xba, 0xb9, 0x19, 0x11,
	0x08, 0x01, 0x1a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x22, 0xd4, 0x02, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0d, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19, 0x06, 0x0a,
	0x04, 0x28, 0x01, 0x40, 0x01, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1f, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x02,
	0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41,
	0x02, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x3d, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x42, 0x12, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19, 0x0b, 0x22, 0x09, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x3d,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x1a, 0xba, 0xb9,
	0x19, 0x16, 0x08, 0x01, 0x1a, 0x12, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xca, 0x02, 0x0a, 0x0b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0d, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19,
	0x06, 0x0a, 0x04, 0x28, 0x01, 0x40, 0x01, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12,
	0x1f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0,
	0x41, 0x02, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0xe0, 0x41, 0x02, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x12, 0xe0, 0x41, 0x03, 0xba, 0xb9, 0x19, 0x0b, 0x22,
	0x09, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x12, 0x3d, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x3d, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x15,
	0xba, 0xb9, 0x19, 0x11, 0x08, 0x01, 0x1a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x2a, 0x7c, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x44, 0x72, 0x61, 0x66, 0x74, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x10, 0x07, 0x2a, 0x47, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x65, 0x70, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x61,
	0x6b, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x10, 0x04, 0x42, 0x06, 0x5a, 0x04,
	0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_task_gorm_db_proto_rawDescOnce sync.Once
	file_task_gorm_db_proto_rawDescData = file_task_gorm_db_proto_rawDesc
)

func file_task_gorm_db_proto_rawDescGZIP() []byte {
	file_task_gorm_db_proto_rawDescOnce.Do(func() {
		file_task_gorm_db_proto_rawDescData = protoimpl.X.CompressGZIP(file_task_gorm_db_proto_rawDescData)
	})
	return file_task_gorm_db_proto_rawDescData
}

var file_task_gorm_db_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_task_gorm_db_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_task_gorm_db_proto_goTypes = []interface{}{
	(Statuses)(0),                 // 0: task.service.v1.statuses
	(Steps)(0),                    // 1: task.service.v1.steps
	(*User)(nil),                  // 2: task.service.v1.User
	(*Task)(nil),                  // 3: task.service.v1.Task
	(*TaskEV)(nil),                // 4: task.service.v1.TaskEV
	(*TaskRequest)(nil),           // 5: task.service.v1.TaskRequest
	(*CompanyTask)(nil),           // 6: task.service.v1.CompanyTask
	(*AnnouncementTask)(nil),      // 7: task.service.v1.AnnouncementTask
	(*AccountTask)(nil),           // 8: task.service.v1.AccountTask
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
}
var file_task_gorm_db_proto_depIdxs = []int32{
	9,  // 0: task.service.v1.User.created_at:type_name -> google.protobuf.Timestamp
	9,  // 1: task.service.v1.User.updated_at:type_name -> google.protobuf.Timestamp
	9,  // 2: task.service.v1.User.deleted_at:type_name -> google.protobuf.Timestamp
	0,  // 3: task.service.v1.Task.status:type_name -> task.service.v1.statuses
	1,  // 4: task.service.v1.Task.step:type_name -> task.service.v1.steps
	3,  // 5: task.service.v1.Task.childs:type_name -> task.service.v1.Task
	9,  // 6: task.service.v1.Task.createdAt:type_name -> google.protobuf.Timestamp
	9,  // 7: task.service.v1.Task.updatedAt:type_name -> google.protobuf.Timestamp
	9,  // 8: task.service.v1.Task.deletedAt:type_name -> google.protobuf.Timestamp
	0,  // 9: task.service.v1.TaskEV.status:type_name -> task.service.v1.statuses
	1,  // 10: task.service.v1.TaskEV.step:type_name -> task.service.v1.steps
	4,  // 11: task.service.v1.TaskEV.childs:type_name -> task.service.v1.TaskEV
	9,  // 12: task.service.v1.TaskEV.createdAt:type_name -> google.protobuf.Timestamp
	9,  // 13: task.service.v1.TaskEV.updatedAt:type_name -> google.protobuf.Timestamp
	9,  // 14: task.service.v1.TaskEV.deletedAt:type_name -> google.protobuf.Timestamp
	0,  // 15: task.service.v1.TaskRequest.status:type_name -> task.service.v1.statuses
	1,  // 16: task.service.v1.TaskRequest.step:type_name -> task.service.v1.steps
	9,  // 17: task.service.v1.TaskRequest.createdAt:type_name -> google.protobuf.Timestamp
	9,  // 18: task.service.v1.TaskRequest.updatedAt:type_name -> google.protobuf.Timestamp
	3,  // 19: task.service.v1.CompanyTask.task:type_name -> task.service.v1.Task
	9,  // 20: task.service.v1.CompanyTask.createdAt:type_name -> google.protobuf.Timestamp
	9,  // 21: task.service.v1.CompanyTask.updatedAt:type_name -> google.protobuf.Timestamp
	3,  // 22: task.service.v1.AnnouncementTask.task:type_name -> task.service.v1.Task
	9,  // 23: task.service.v1.AnnouncementTask.createdAt:type_name -> google.protobuf.Timestamp
	9,  // 24: task.service.v1.AnnouncementTask.updatedAt:type_name -> google.protobuf.Timestamp
	3,  // 25: task.service.v1.AccountTask.task:type_name -> task.service.v1.Task
	9,  // 26: task.service.v1.AccountTask.createdAt:type_name -> google.protobuf.Timestamp
	9,  // 27: task.service.v1.AccountTask.updatedAt:type_name -> google.protobuf.Timestamp
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_task_gorm_db_proto_init() }
func file_task_gorm_db_proto_init() {
	if File_task_gorm_db_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_task_gorm_db_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_gorm_db_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_gorm_db_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskEV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_gorm_db_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_gorm_db_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_gorm_db_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnouncementTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_task_gorm_db_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_task_gorm_db_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_task_gorm_db_proto_goTypes,
		DependencyIndexes: file_task_gorm_db_proto_depIdxs,
		EnumInfos:         file_task_gorm_db_proto_enumTypes,
		MessageInfos:      file_task_gorm_db_proto_msgTypes,
	}.Build()
	File_task_gorm_db_proto = out.File
	file_task_gorm_db_proto_rawDesc = nil
	file_task_gorm_db_proto_goTypes = nil
	file_task_gorm_db_proto_depIdxs = nil
}
