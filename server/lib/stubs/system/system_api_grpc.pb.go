// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: system_api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	CreateSystem(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	CreateSystemParam(ctx context.Context, in *CreateSystemRequest, opts ...grpc.CallOption) (*CreateTaskSystemResponse, error)
	GetMyTasksID(ctx context.Context, in *GetMyTasksIDRequest, opts ...grpc.CallOption) (*GetMyTasksIDResponse, error)
	GetMyTasks(ctx context.Context, in *SystemFilterRequest, opts ...grpc.CallOption) (*ListSystemResponse, error)
	ListSystemData(ctx context.Context, in *ListSystemDataRequest, opts ...grpc.CallOption) (*ListSystemDataResponse, error)
	SystemDetail(ctx context.Context, in *SystemDetailRequest, opts ...grpc.CallOption) (*SystemDetailResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/system.service.v1.ApiService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateSystem(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/system.service.v1.ApiService/CreateSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateSystemParam(ctx context.Context, in *CreateSystemRequest, opts ...grpc.CallOption) (*CreateTaskSystemResponse, error) {
	out := new(CreateTaskSystemResponse)
	err := c.cc.Invoke(ctx, "/system.service.v1.ApiService/CreateSystemParam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetMyTasksID(ctx context.Context, in *GetMyTasksIDRequest, opts ...grpc.CallOption) (*GetMyTasksIDResponse, error) {
	out := new(GetMyTasksIDResponse)
	err := c.cc.Invoke(ctx, "/system.service.v1.ApiService/GetMyTasksID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetMyTasks(ctx context.Context, in *SystemFilterRequest, opts ...grpc.CallOption) (*ListSystemResponse, error) {
	out := new(ListSystemResponse)
	err := c.cc.Invoke(ctx, "/system.service.v1.ApiService/GetMyTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListSystemData(ctx context.Context, in *ListSystemDataRequest, opts ...grpc.CallOption) (*ListSystemDataResponse, error) {
	out := new(ListSystemDataResponse)
	err := c.cc.Invoke(ctx, "/system.service.v1.ApiService/ListSystemData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SystemDetail(ctx context.Context, in *SystemDetailRequest, opts ...grpc.CallOption) (*SystemDetailResponse, error) {
	out := new(SystemDetailResponse)
	err := c.cc.Invoke(ctx, "/system.service.v1.ApiService/SystemDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	HealthCheck(context.Context, *Empty) (*HealthCheckResponse, error)
	CreateSystem(context.Context, *CreateRequest) (*CreateResponse, error)
	CreateSystemParam(context.Context, *CreateSystemRequest) (*CreateTaskSystemResponse, error)
	GetMyTasksID(context.Context, *GetMyTasksIDRequest) (*GetMyTasksIDResponse, error)
	GetMyTasks(context.Context, *SystemFilterRequest) (*ListSystemResponse, error)
	ListSystemData(context.Context, *ListSystemDataRequest) (*ListSystemDataResponse, error)
	SystemDetail(context.Context, *SystemDetailRequest) (*SystemDetailResponse, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) HealthCheck(context.Context, *Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedApiServiceServer) CreateSystem(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSystem not implemented")
}
func (UnimplementedApiServiceServer) CreateSystemParam(context.Context, *CreateSystemRequest) (*CreateTaskSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSystemParam not implemented")
}
func (UnimplementedApiServiceServer) GetMyTasksID(context.Context, *GetMyTasksIDRequest) (*GetMyTasksIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyTasksID not implemented")
}
func (UnimplementedApiServiceServer) GetMyTasks(context.Context, *SystemFilterRequest) (*ListSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyTasks not implemented")
}
func (UnimplementedApiServiceServer) ListSystemData(context.Context, *ListSystemDataRequest) (*ListSystemDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystemData not implemented")
}
func (UnimplementedApiServiceServer) SystemDetail(context.Context, *SystemDetailRequest) (*SystemDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemDetail not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.service.v1.ApiService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HealthCheck(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.service.v1.ApiService/CreateSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateSystem(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateSystemParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateSystemParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.service.v1.ApiService/CreateSystemParam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateSystemParam(ctx, req.(*CreateSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetMyTasksID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyTasksIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetMyTasksID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.service.v1.ApiService/GetMyTasksID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetMyTasksID(ctx, req.(*GetMyTasksIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetMyTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetMyTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.service.v1.ApiService/GetMyTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetMyTasks(ctx, req.(*SystemFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListSystemData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListSystemData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.service.v1.ApiService/ListSystemData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListSystemData(ctx, req.(*ListSystemDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SystemDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SystemDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/system.service.v1.ApiService/SystemDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SystemDetail(ctx, req.(*SystemDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "system.service.v1.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ApiService_HealthCheck_Handler,
		},
		{
			MethodName: "CreateSystem",
			Handler:    _ApiService_CreateSystem_Handler,
		},
		{
			MethodName: "CreateSystemParam",
			Handler:    _ApiService_CreateSystemParam_Handler,
		},
		{
			MethodName: "GetMyTasksID",
			Handler:    _ApiService_GetMyTasksID_Handler,
		},
		{
			MethodName: "GetMyTasks",
			Handler:    _ApiService_GetMyTasks_Handler,
		},
		{
			MethodName: "ListSystemData",
			Handler:    _ApiService_ListSystemData_Handler,
		},
		{
			MethodName: "SystemDetail",
			Handler:    _ApiService_SystemDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system_api.proto",
}
