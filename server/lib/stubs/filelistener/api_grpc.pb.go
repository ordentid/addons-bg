// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: api.proto

package pb

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileProcessorServiceClient is the client API for FileProcessorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileProcessorServiceClient interface {
	ObjectUpload(ctx context.Context, opts ...grpc.CallOption) (FileProcessorService_ObjectUploadClient, error)
	FileDownloadHandler(ctx context.Context, in *FileDownloadHandlerRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
}

type fileProcessorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileProcessorServiceClient(cc grpc.ClientConnInterface) FileProcessorServiceClient {
	return &fileProcessorServiceClient{cc}
}

func (c *fileProcessorServiceClient) ObjectUpload(ctx context.Context, opts ...grpc.CallOption) (FileProcessorService_ObjectUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileProcessorService_ServiceDesc.Streams[0], "/file_processor.service.v1.FileProcessorService/ObjectUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileProcessorServiceObjectUploadClient{stream}
	return x, nil
}

type FileProcessorService_ObjectUploadClient interface {
	Send(*ObjectUploadReq) error
	CloseAndRecv() (*ObjectUploadRes, error)
	grpc.ClientStream
}

type fileProcessorServiceObjectUploadClient struct {
	grpc.ClientStream
}

func (x *fileProcessorServiceObjectUploadClient) Send(m *ObjectUploadReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileProcessorServiceObjectUploadClient) CloseAndRecv() (*ObjectUploadRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ObjectUploadRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileProcessorServiceClient) FileDownloadHandler(ctx context.Context, in *FileDownloadHandlerRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/file_processor.service.v1.FileProcessorService/FileDownloadHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileProcessorServiceServer is the server API for FileProcessorService service.
// All implementations must embed UnimplementedFileProcessorServiceServer
// for forward compatibility
type FileProcessorServiceServer interface {
	ObjectUpload(FileProcessorService_ObjectUploadServer) error
	FileDownloadHandler(context.Context, *FileDownloadHandlerRequest) (*httpbody.HttpBody, error)
	mustEmbedUnimplementedFileProcessorServiceServer()
}

// UnimplementedFileProcessorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileProcessorServiceServer struct {
}

func (UnimplementedFileProcessorServiceServer) ObjectUpload(FileProcessorService_ObjectUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method ObjectUpload not implemented")
}
func (UnimplementedFileProcessorServiceServer) FileDownloadHandler(context.Context, *FileDownloadHandlerRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDownloadHandler not implemented")
}
func (UnimplementedFileProcessorServiceServer) mustEmbedUnimplementedFileProcessorServiceServer() {}

// UnsafeFileProcessorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileProcessorServiceServer will
// result in compilation errors.
type UnsafeFileProcessorServiceServer interface {
	mustEmbedUnimplementedFileProcessorServiceServer()
}

func RegisterFileProcessorServiceServer(s grpc.ServiceRegistrar, srv FileProcessorServiceServer) {
	s.RegisterService(&FileProcessorService_ServiceDesc, srv)
}

func _FileProcessorService_ObjectUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileProcessorServiceServer).ObjectUpload(&fileProcessorServiceObjectUploadServer{stream})
}

type FileProcessorService_ObjectUploadServer interface {
	SendAndClose(*ObjectUploadRes) error
	Recv() (*ObjectUploadReq, error)
	grpc.ServerStream
}

type fileProcessorServiceObjectUploadServer struct {
	grpc.ServerStream
}

func (x *fileProcessorServiceObjectUploadServer) SendAndClose(m *ObjectUploadRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileProcessorServiceObjectUploadServer) Recv() (*ObjectUploadReq, error) {
	m := new(ObjectUploadReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileProcessorService_FileDownloadHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileDownloadHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessorServiceServer).FileDownloadHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_processor.service.v1.FileProcessorService/FileDownloadHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessorServiceServer).FileDownloadHandler(ctx, req.(*FileDownloadHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileProcessorService_ServiceDesc is the grpc.ServiceDesc for FileProcessorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileProcessorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file_processor.service.v1.FileProcessorService",
	HandlerType: (*FileProcessorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FileDownloadHandler",
			Handler:    _FileProcessorService_FileDownloadHandler_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ObjectUpload",
			Handler:       _FileProcessorService_ObjectUpload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
