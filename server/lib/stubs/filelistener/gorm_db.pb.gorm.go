package pb

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
	time "time"
)

type FileDataORM struct {
	CreatedAt      *time.Time
	FileID         uint64 `gorm:"column:FileID;primary_key;not null"`
	FileName       string `gorm:"column:FileName;type:varchar(255)"`
	FileOriginName string `gorm:"column:FileOriginName;type:varchar(255);not null"`
	FileOriginUrl  string `gorm:"column:FileOriginPath;type:text;not null"`
	FileUrl        string `gorm:"column:FilePath;type:text"`
	Status         string `gorm:"column:Status;type:varchar(20);default:checking"`
	TaskID         uint64 `gorm:"column:TaskID;type:bigint"`
	TaskType       string `gorm:"column:TaskType;type:varchar(20)"`
	UpdatedAt      *time.Time
}

// TableName overrides the default tablename generated by GORM
func (FileDataORM) TableName() string {
	return "files"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *FileData) ToORM(ctx context.Context) (FileDataORM, error) {
	to := FileDataORM{}
	var err error
	if prehook, ok := interface{}(m).(FileDataWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.FileID = m.FileID
	to.FileName = m.FileName
	to.FileUrl = m.FileUrl
	to.FileOriginName = m.FileOriginName
	to.FileOriginUrl = m.FileOriginUrl
	to.Status = m.Status
	to.TaskType = m.TaskType
	to.TaskID = m.TaskID
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(FileDataWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *FileDataORM) ToPB(ctx context.Context) (FileData, error) {
	to := FileData{}
	var err error
	if prehook, ok := interface{}(m).(FileDataWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.FileID = m.FileID
	to.FileName = m.FileName
	to.FileUrl = m.FileUrl
	to.FileOriginName = m.FileOriginName
	to.FileOriginUrl = m.FileOriginUrl
	to.Status = m.Status
	to.TaskType = m.TaskType
	to.TaskID = m.TaskID
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(FileDataWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type FileData the arg will be the target, the caller the one being converted from

// FileDataBeforeToORM called before default ToORM code
type FileDataWithBeforeToORM interface {
	BeforeToORM(context.Context, *FileDataORM) error
}

// FileDataAfterToORM called after default ToORM code
type FileDataWithAfterToORM interface {
	AfterToORM(context.Context, *FileDataORM) error
}

// FileDataBeforeToPB called before default ToPB code
type FileDataWithBeforeToPB interface {
	BeforeToPB(context.Context, *FileData) error
}

// FileDataAfterToPB called after default ToPB code
type FileDataWithAfterToPB interface {
	AfterToPB(context.Context, *FileData) error
}

type FileManagerORM struct {
	CreatedAt  *time.Time
	Files      string `gorm:"column:files;type:jsonb;default:[]"`
	Id         uint64 `gorm:"column:id;type:bigint;primary_key;not null"`
	ObjectName string `gorm:"column:object_name;type:varchar(255)"`
	Status     string `gorm:"column:status;type:varchar(20);default:pending"`
	Step       string `gorm:"column:step;type:varchar(20);default:0"`
	TaskID     uint64 `gorm:"column:task_id;type:bigint"`
	TaskType   string `gorm:"column:task_type;type:varchar(50)"`
	UpdatedAt  *time.Time
}

// TableName overrides the default tablename generated by GORM
func (FileManagerORM) TableName() string {
	return "file_managers"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *FileManager) ToORM(ctx context.Context) (FileManagerORM, error) {
	to := FileManagerORM{}
	var err error
	if prehook, ok := interface{}(m).(FileManagerWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.TaskID = m.TaskID
	to.TaskType = m.TaskType
	to.ObjectName = m.ObjectName
	to.Status = m.Status
	to.Step = m.Step
	to.Files = m.Files
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(FileManagerWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *FileManagerORM) ToPB(ctx context.Context) (FileManager, error) {
	to := FileManager{}
	var err error
	if prehook, ok := interface{}(m).(FileManagerWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.TaskID = m.TaskID
	to.TaskType = m.TaskType
	to.ObjectName = m.ObjectName
	to.Status = m.Status
	to.Step = m.Step
	to.Files = m.Files
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(FileManagerWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type FileManager the arg will be the target, the caller the one being converted from

// FileManagerBeforeToORM called before default ToORM code
type FileManagerWithBeforeToORM interface {
	BeforeToORM(context.Context, *FileManagerORM) error
}

// FileManagerAfterToORM called after default ToORM code
type FileManagerWithAfterToORM interface {
	AfterToORM(context.Context, *FileManagerORM) error
}

// FileManagerBeforeToPB called before default ToPB code
type FileManagerWithBeforeToPB interface {
	BeforeToPB(context.Context, *FileManager) error
}

// FileManagerAfterToPB called after default ToPB code
type FileManagerWithAfterToPB interface {
	AfterToPB(context.Context, *FileManager) error
}

type FileProcessorORM struct {
	CreatedAt *time.Time
	Data      string `gorm:"column:data;type:jsonb;default:{}"`
	Id        uint64 `gorm:"column:id;type:bigint;primary_key;not null"`
	ManagerID uint64 `gorm:"column:manager_id;type:bigint"`
	Status    string `gorm:"column:status;type:varchar(20);default:pending"`
	TaskID    uint64 `gorm:"column:task_id;type:bigint"`
	TaskType  string `gorm:"column:task_type;type:varchar(50)"`
	UpdatedAt *time.Time
}

// TableName overrides the default tablename generated by GORM
func (FileProcessorORM) TableName() string {
	return "file_processors"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *FileProcessor) ToORM(ctx context.Context) (FileProcessorORM, error) {
	to := FileProcessorORM{}
	var err error
	if prehook, ok := interface{}(m).(FileProcessorWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.ManagerID = m.ManagerID
	to.TaskID = m.TaskID
	to.TaskType = m.TaskType
	to.Data = m.Data
	to.Status = m.Status
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(FileProcessorWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *FileProcessorORM) ToPB(ctx context.Context) (FileProcessor, error) {
	to := FileProcessor{}
	var err error
	if prehook, ok := interface{}(m).(FileProcessorWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.ManagerID = m.ManagerID
	to.TaskID = m.TaskID
	to.TaskType = m.TaskType
	to.Data = m.Data
	to.Status = m.Status
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(FileProcessorWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type FileProcessor the arg will be the target, the caller the one being converted from

// FileProcessorBeforeToORM called before default ToORM code
type FileProcessorWithBeforeToORM interface {
	BeforeToORM(context.Context, *FileProcessorORM) error
}

// FileProcessorAfterToORM called after default ToORM code
type FileProcessorWithAfterToORM interface {
	AfterToORM(context.Context, *FileProcessorORM) error
}

// FileProcessorBeforeToPB called before default ToPB code
type FileProcessorWithBeforeToPB interface {
	BeforeToPB(context.Context, *FileProcessor) error
}

// FileProcessorAfterToPB called after default ToPB code
type FileProcessorWithAfterToPB interface {
	AfterToPB(context.Context, *FileProcessor) error
}

// DefaultCreateFileData executes a basic gorm create call
func DefaultCreateFileData(ctx context.Context, in *FileData, db *gorm.DB) (*FileData, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileDataORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileDataORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type FileDataORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileDataORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadFileData(ctx context.Context, in *FileData, db *gorm.DB) (*FileData, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.FileID == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(FileDataORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &FileDataORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileDataORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := FileDataORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(FileDataORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type FileDataORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileDataORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileDataORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteFileData(ctx context.Context, in *FileData, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.FileID == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(FileDataORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&FileDataORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(FileDataORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type FileDataORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileDataORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteFileDataSet(ctx context.Context, in []*FileData, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.FileID == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.FileID)
	}
	if hook, ok := (interface{}(&FileDataORM{})).(FileDataORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("file_id in (?)", keys).Delete(&FileDataORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&FileDataORM{})).(FileDataORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type FileDataORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*FileData, *gorm.DB) (*gorm.DB, error)
}
type FileDataORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*FileData, *gorm.DB) error
}

// DefaultStrictUpdateFileData clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateFileData(ctx context.Context, in *FileData, db *gorm.DB) (*FileData, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateFileData")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &FileDataORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("FileID=?", ormObj.FileID).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(FileDataORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(FileDataORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileDataORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type FileDataORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileDataORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileDataORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchFileData executes a basic gorm update call with patch behavior
func DefaultPatchFileData(ctx context.Context, in *FileData, updateMask *field_mask.FieldMask, db *gorm.DB) (*FileData, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj FileData
	var err error
	if hook, ok := interface{}(&pbObj).(FileDataWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&pbObj).(FileDataWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskFileData(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(FileDataWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateFileData(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(FileDataWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type FileDataWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *FileData, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type FileDataWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *FileData, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type FileDataWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *FileData, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type FileDataWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *FileData, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetFileData executes a bulk gorm update call with patch behavior
func DefaultPatchSetFileData(ctx context.Context, objects []*FileData, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*FileData, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*FileData, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchFileData(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskFileData patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskFileData(ctx context.Context, patchee *FileData, patcher *FileData, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*FileData, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"FileID" {
			patchee.FileID = patcher.FileID
			continue
		}
		if f == prefix+"FileName" {
			patchee.FileName = patcher.FileName
			continue
		}
		if f == prefix+"FileUrl" {
			patchee.FileUrl = patcher.FileUrl
			continue
		}
		if f == prefix+"FileOriginName" {
			patchee.FileOriginName = patcher.FileOriginName
			continue
		}
		if f == prefix+"FileOriginUrl" {
			patchee.FileOriginUrl = patcher.FileOriginUrl
			continue
		}
		if f == prefix+"Status" {
			patchee.Status = patcher.Status
			continue
		}
		if f == prefix+"TaskType" {
			patchee.TaskType = patcher.TaskType
			continue
		}
		if f == prefix+"TaskID" {
			patchee.TaskID = patcher.TaskID
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListFileData executes a gorm list call
func DefaultListFileData(ctx context.Context, db *gorm.DB) ([]*FileData, error) {
	in := FileData{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileDataORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &FileDataORM{}, &FileData{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileDataORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("FileID")
	ormResponse := []FileDataORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileDataORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*FileData{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type FileDataORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileDataORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileDataORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]FileDataORM) error
}

// DefaultCreateFileManager executes a basic gorm create call
func DefaultCreateFileManager(ctx context.Context, in *FileManager, db *gorm.DB) (*FileManager, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileManagerORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileManagerORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type FileManagerORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileManagerORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadFileManager(ctx context.Context, in *FileManager, db *gorm.DB) (*FileManager, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(FileManagerORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &FileManagerORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileManagerORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := FileManagerORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(FileManagerORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type FileManagerORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileManagerORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileManagerORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteFileManager(ctx context.Context, in *FileManager, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(FileManagerORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&FileManagerORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(FileManagerORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type FileManagerORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileManagerORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteFileManagerSet(ctx context.Context, in []*FileManager, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&FileManagerORM{})).(FileManagerORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&FileManagerORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&FileManagerORM{})).(FileManagerORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type FileManagerORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*FileManager, *gorm.DB) (*gorm.DB, error)
}
type FileManagerORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*FileManager, *gorm.DB) error
}

// DefaultStrictUpdateFileManager clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateFileManager(ctx context.Context, in *FileManager, db *gorm.DB) (*FileManager, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateFileManager")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &FileManagerORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(FileManagerORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(FileManagerORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileManagerORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type FileManagerORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileManagerORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileManagerORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchFileManager executes a basic gorm update call with patch behavior
func DefaultPatchFileManager(ctx context.Context, in *FileManager, updateMask *field_mask.FieldMask, db *gorm.DB) (*FileManager, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj FileManager
	var err error
	if hook, ok := interface{}(&pbObj).(FileManagerWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadFileManager(ctx, &FileManager{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(FileManagerWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskFileManager(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(FileManagerWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateFileManager(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(FileManagerWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type FileManagerWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *FileManager, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type FileManagerWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *FileManager, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type FileManagerWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *FileManager, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type FileManagerWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *FileManager, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetFileManager executes a bulk gorm update call with patch behavior
func DefaultPatchSetFileManager(ctx context.Context, objects []*FileManager, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*FileManager, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*FileManager, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchFileManager(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskFileManager patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskFileManager(ctx context.Context, patchee *FileManager, patcher *FileManager, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*FileManager, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"TaskID" {
			patchee.TaskID = patcher.TaskID
			continue
		}
		if f == prefix+"TaskType" {
			patchee.TaskType = patcher.TaskType
			continue
		}
		if f == prefix+"ObjectName" {
			patchee.ObjectName = patcher.ObjectName
			continue
		}
		if f == prefix+"Status" {
			patchee.Status = patcher.Status
			continue
		}
		if f == prefix+"Step" {
			patchee.Step = patcher.Step
			continue
		}
		if f == prefix+"Files" {
			patchee.Files = patcher.Files
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListFileManager executes a gorm list call
func DefaultListFileManager(ctx context.Context, db *gorm.DB) ([]*FileManager, error) {
	in := FileManager{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileManagerORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &FileManagerORM{}, &FileManager{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileManagerORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []FileManagerORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileManagerORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*FileManager{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type FileManagerORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileManagerORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileManagerORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]FileManagerORM) error
}

// DefaultCreateFileProcessor executes a basic gorm create call
func DefaultCreateFileProcessor(ctx context.Context, in *FileProcessor, db *gorm.DB) (*FileProcessor, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileProcessorORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileProcessorORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type FileProcessorORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileProcessorORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadFileProcessor(ctx context.Context, in *FileProcessor, db *gorm.DB) (*FileProcessor, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(FileProcessorORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &FileProcessorORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileProcessorORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := FileProcessorORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(FileProcessorORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type FileProcessorORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileProcessorORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileProcessorORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteFileProcessor(ctx context.Context, in *FileProcessor, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(FileProcessorORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&FileProcessorORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(FileProcessorORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type FileProcessorORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileProcessorORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteFileProcessorSet(ctx context.Context, in []*FileProcessor, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&FileProcessorORM{})).(FileProcessorORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&FileProcessorORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&FileProcessorORM{})).(FileProcessorORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type FileProcessorORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*FileProcessor, *gorm.DB) (*gorm.DB, error)
}
type FileProcessorORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*FileProcessor, *gorm.DB) error
}

// DefaultStrictUpdateFileProcessor clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateFileProcessor(ctx context.Context, in *FileProcessor, db *gorm.DB) (*FileProcessor, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateFileProcessor")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &FileProcessorORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(FileProcessorORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(FileProcessorORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileProcessorORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type FileProcessorORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileProcessorORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileProcessorORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchFileProcessor executes a basic gorm update call with patch behavior
func DefaultPatchFileProcessor(ctx context.Context, in *FileProcessor, updateMask *field_mask.FieldMask, db *gorm.DB) (*FileProcessor, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj FileProcessor
	var err error
	if hook, ok := interface{}(&pbObj).(FileProcessorWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadFileProcessor(ctx, &FileProcessor{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(FileProcessorWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskFileProcessor(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(FileProcessorWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateFileProcessor(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(FileProcessorWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type FileProcessorWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *FileProcessor, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type FileProcessorWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *FileProcessor, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type FileProcessorWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *FileProcessor, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type FileProcessorWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *FileProcessor, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetFileProcessor executes a bulk gorm update call with patch behavior
func DefaultPatchSetFileProcessor(ctx context.Context, objects []*FileProcessor, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*FileProcessor, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*FileProcessor, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchFileProcessor(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskFileProcessor patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskFileProcessor(ctx context.Context, patchee *FileProcessor, patcher *FileProcessor, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*FileProcessor, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"ManagerID" {
			patchee.ManagerID = patcher.ManagerID
			continue
		}
		if f == prefix+"TaskID" {
			patchee.TaskID = patcher.TaskID
			continue
		}
		if f == prefix+"TaskType" {
			patchee.TaskType = patcher.TaskType
			continue
		}
		if f == prefix+"Data" {
			patchee.Data = patcher.Data
			continue
		}
		if f == prefix+"Status" {
			patchee.Status = patcher.Status
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListFileProcessor executes a gorm list call
func DefaultListFileProcessor(ctx context.Context, db *gorm.DB) ([]*FileProcessor, error) {
	in := FileProcessor{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileProcessorORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &FileProcessorORM{}, &FileProcessor{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileProcessorORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []FileProcessorORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(FileProcessorORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*FileProcessor{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type FileProcessorORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileProcessorORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type FileProcessorORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]FileProcessorORM) error
}
