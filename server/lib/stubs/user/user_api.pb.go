// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: user_api.proto

package pb

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TempGenToken_Role int32

const (
	TempGenToken_bankadmin         TempGenToken_Role = 0
	TempGenToken_notificationadmin TempGenToken_Role = 1
	TempGenToken_notificationuser  TempGenToken_Role = 2
)

// Enum value maps for TempGenToken_Role.
var (
	TempGenToken_Role_name = map[int32]string{
		0: "bankadmin",
		1: "notificationadmin",
		2: "notificationuser",
	}
	TempGenToken_Role_value = map[string]int32{
		"bankadmin":         0,
		"notificationadmin": 1,
		"notificationuser":  2,
	}
)

func (x TempGenToken_Role) Enum() *TempGenToken_Role {
	p := new(TempGenToken_Role)
	*p = x
	return p
}

func (x TempGenToken_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TempGenToken_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_user_api_proto_enumTypes[0].Descriptor()
}

func (TempGenToken_Role) Type() protoreflect.EnumType {
	return &file_user_api_proto_enumTypes[0]
}

func (x TempGenToken_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TempGenToken_Role.Descriptor instead.
func (TempGenToken_Role) EnumDescriptor() ([]byte, []int) {
	return file_user_api_proto_rawDescGZIP(), []int{2, 0}
}

type CekUsernameAvaibilityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	TaskID   uint64 `protobuf:"varint,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *CekUsernameAvaibilityReq) Reset() {
	*x = CekUsernameAvaibilityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CekUsernameAvaibilityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CekUsernameAvaibilityReq) ProtoMessage() {}

func (x *CekUsernameAvaibilityReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CekUsernameAvaibilityReq.ProtoReflect.Descriptor instead.
func (*CekUsernameAvaibilityReq) Descriptor() ([]byte, []int) {
	return file_user_api_proto_rawDescGZIP(), []int{0}
}

func (x *CekUsernameAvaibilityReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CekUsernameAvaibilityReq) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type CekUsernameAvaibilityRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available bool   `protobuf:"varint,1,opt,name=available,proto3" json:"available,omitempty"`
	Status    string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CekUsernameAvaibilityRes) Reset() {
	*x = CekUsernameAvaibilityRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CekUsernameAvaibilityRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CekUsernameAvaibilityRes) ProtoMessage() {}

func (x *CekUsernameAvaibilityRes) ProtoReflect() protoreflect.Message {
	mi := &file_user_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CekUsernameAvaibilityRes.ProtoReflect.Descriptor instead.
func (*CekUsernameAvaibilityRes) Descriptor() ([]byte, []int) {
	return file_user_api_proto_rawDescGZIP(), []int{1}
}

func (x *CekUsernameAvaibilityRes) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *CekUsernameAvaibilityRes) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type TempGenToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role TempGenToken_Role `protobuf:"varint,1,opt,name=role,proto3,enum=user.service.v1.TempGenToken_Role" json:"role,omitempty"`
}

func (x *TempGenToken) Reset() {
	*x = TempGenToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TempGenToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TempGenToken) ProtoMessage() {}

func (x *TempGenToken) ProtoReflect() protoreflect.Message {
	mi := &file_user_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TempGenToken.ProtoReflect.Descriptor instead.
func (*TempGenToken) Descriptor() ([]byte, []int) {
	return file_user_api_proto_rawDescGZIP(), []int{2}
}

func (x *TempGenToken) GetRole() TempGenToken_Role {
	if x != nil {
		return x.Role
	}
	return TempGenToken_bankadmin
}

type BricamsGetCustomerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Page  uint32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *BricamsGetCustomerReq) Reset() {
	*x = BricamsGetCustomerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BricamsGetCustomerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BricamsGetCustomerReq) ProtoMessage() {}

func (x *BricamsGetCustomerReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BricamsGetCustomerReq.ProtoReflect.Descriptor instead.
func (*BricamsGetCustomerReq) Descriptor() ([]byte, []int) {
	return file_user_api_proto_rawDescGZIP(), []int{3}
}

func (x *BricamsGetCustomerReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BricamsGetCustomerReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BricamsGetCustomerReq) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *BricamsGetCustomerReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type BricamsGetCustomerRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalData       uint32                    `protobuf:"varint,1,opt,name=totalData,proto3" json:"totalData,omitempty"`
	ResponseCode    string                    `protobuf:"bytes,2,opt,name=responseCode,proto3" json:"responseCode,omitempty"`
	ResponseMessage string                    `protobuf:"bytes,3,opt,name=responseMessage,proto3" json:"responseMessage,omitempty"`
	Data            []*BricamsGetCustomerData `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BricamsGetCustomerRes) Reset() {
	*x = BricamsGetCustomerRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BricamsGetCustomerRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BricamsGetCustomerRes) ProtoMessage() {}

func (x *BricamsGetCustomerRes) ProtoReflect() protoreflect.Message {
	mi := &file_user_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BricamsGetCustomerRes.ProtoReflect.Descriptor instead.
func (*BricamsGetCustomerRes) Descriptor() ([]byte, []int) {
	return file_user_api_proto_rawDescGZIP(), []int{4}
}

func (x *BricamsGetCustomerRes) GetTotalData() uint32 {
	if x != nil {
		return x.TotalData
	}
	return 0
}

func (x *BricamsGetCustomerRes) GetResponseCode() string {
	if x != nil {
		return x.ResponseCode
	}
	return ""
}

func (x *BricamsGetCustomerRes) GetResponseMessage() string {
	if x != nil {
		return x.ResponseMessage
	}
	return ""
}

func (x *BricamsGetCustomerRes) GetData() []*BricamsGetCustomerData {
	if x != nil {
		return x.Data
	}
	return nil
}

type BricamsGetCustomerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DType                      string `protobuf:"bytes,1,opt,name=dType,proto3" json:"dType,omitempty"`
	Id                         string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	AuthorizationBusinessDate  string `protobuf:"bytes,3,opt,name=authorizationBusinessDate,proto3" json:"authorizationBusinessDate,omitempty"`
	CreatedByUri               string `protobuf:"bytes,4,opt,name=createdByUri,proto3" json:"createdByUri,omitempty"`
	CreationTimeStamp          string `protobuf:"bytes,5,opt,name=creationTimeStamp,proto3" json:"creationTimeStamp,omitempty"`
	LastUpdatedByUri           string `protobuf:"bytes,6,opt,name=lastUpdatedByUri,proto3" json:"lastUpdatedByUri,omitempty"`
	LastUpdatedTimeStamp       string `protobuf:"bytes,7,opt,name=lastUpdatedTimeStamp,proto3" json:"lastUpdatedTimeStamp,omitempty"`
	PersistenceStatus          string `protobuf:"bytes,8,opt,name=persistenceStatus,proto3" json:"persistenceStatus,omitempty"`
	SnapshotRecord             string `protobuf:"bytes,9,opt,name=snapshotRecord,proto3" json:"snapshotRecord,omitempty"`
	SystemModifiableOnly       string `protobuf:"bytes,10,opt,name=systemModifiableOnly,proto3" json:"systemModifiableOnly,omitempty"`
	Uuid                       string `protobuf:"bytes,11,opt,name=uuid,proto3" json:"uuid,omitempty"`
	MakeBusinessDate           string `protobuf:"bytes,12,opt,name=makeBusinessDate,proto3" json:"makeBusinessDate,omitempty"`
	TenantId                   string `protobuf:"bytes,13,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	ActiveFlag                 string `protobuf:"bytes,14,opt,name=activeFlag,proto3" json:"activeFlag,omitempty"`
	ApprovalStatus             string `protobuf:"bytes,15,opt,name=approvalStatus,proto3" json:"approvalStatus,omitempty"`
	ReviewedByUri              string `protobuf:"bytes,16,opt,name=reviewedByUri,proto3" json:"reviewedByUri,omitempty"`
	ReviewedTimeStamp          string `protobuf:"bytes,17,opt,name=reviewedTimeStamp,proto3" json:"reviewedTimeStamp,omitempty"`
	Description                string `protobuf:"bytes,18,opt,name=description,proto3" json:"description,omitempty"`
	Name                       string `protobuf:"bytes,19,opt,name=name,proto3" json:"name,omitempty"`
	BranchCode                 string `protobuf:"bytes,20,opt,name=branchCode,proto3" json:"branchCode,omitempty"`
	HasParentBranchCalender    string `protobuf:"bytes,21,opt,name=hasParentBranchCalender,proto3" json:"hasParentBranchCalender,omitempty"`
	IsEmailFilterEnabled       string `protobuf:"bytes,22,opt,name=isEmailFilterEnabled,proto3" json:"isEmailFilterEnabled,omitempty"`
	IsLogAfterWorkHoursEnabled string `protobuf:"bytes,23,opt,name=isLogAfterWorkHoursEnabled,proto3" json:"isLogAfterWorkHoursEnabled,omitempty"`
	IsOutOfWorkHLoginAllow     string `protobuf:"bytes,24,opt,name=isOutOfWorkHLoginAllow,proto3" json:"isOutOfWorkHLoginAllow,omitempty"`
	MaximumEmails              string `protobuf:"bytes,25,opt,name=maximumEmails,proto3" json:"maximumEmails,omitempty"`
	ParentBranchIds            string `protobuf:"bytes,26,opt,name=parentBranchIds,proto3" json:"parentBranchIds,omitempty"`
	ProductOffered             string `protobuf:"bytes,27,opt,name=productOffered,proto3" json:"productOffered,omitempty"`
	ShortName                  string `protobuf:"bytes,28,opt,name=shortName,proto3" json:"shortName,omitempty"`
	SystemName                 string `protobuf:"bytes,29,opt,name=systemName,proto3" json:"systemName,omitempty"`
	PersistentFormData         string `protobuf:"bytes,30,opt,name=persistentFormData,proto3" json:"persistentFormData,omitempty"`
	ContactInfo                string `protobuf:"bytes,31,opt,name=contactInfo,proto3" json:"contactInfo,omitempty"`
	PrimaryContactPerson       string `protobuf:"bytes,32,opt,name=primaryContactPerson,proto3" json:"primaryContactPerson,omitempty"`
	BranchCalendar             string `protobuf:"bytes,33,opt,name=branchCalendar,proto3" json:"branchCalendar,omitempty"`
	OrganizationType           string `protobuf:"bytes,34,opt,name=organizationType,proto3" json:"organizationType,omitempty"`
	SignatureAuthority         string `protobuf:"bytes,35,opt,name=signatureAuthority,proto3" json:"signatureAuthority,omitempty"`
	HeadOffice                 string `protobuf:"bytes,36,opt,name=headOffice,proto3" json:"headOffice,omitempty"`
	OfflineFlag                string `protobuf:"bytes,37,opt,name=offlineFlag,proto3" json:"offlineFlag,omitempty"`
	GStin                      string `protobuf:"bytes,38,opt,name=gStin,proto3" json:"gStin,omitempty"`
	IsStopFreshBooking         string `protobuf:"bytes,39,opt,name=isStopFreshBooking,proto3" json:"isStopFreshBooking,omitempty"`
}

func (x *BricamsGetCustomerData) Reset() {
	*x = BricamsGetCustomerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BricamsGetCustomerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BricamsGetCustomerData) ProtoMessage() {}

func (x *BricamsGetCustomerData) ProtoReflect() protoreflect.Message {
	mi := &file_user_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BricamsGetCustomerData.ProtoReflect.Descriptor instead.
func (*BricamsGetCustomerData) Descriptor() ([]byte, []int) {
	return file_user_api_proto_rawDescGZIP(), []int{5}
}

func (x *BricamsGetCustomerData) GetDType() string {
	if x != nil {
		return x.DType
	}
	return ""
}

func (x *BricamsGetCustomerData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BricamsGetCustomerData) GetAuthorizationBusinessDate() string {
	if x != nil {
		return x.AuthorizationBusinessDate
	}
	return ""
}

func (x *BricamsGetCustomerData) GetCreatedByUri() string {
	if x != nil {
		return x.CreatedByUri
	}
	return ""
}

func (x *BricamsGetCustomerData) GetCreationTimeStamp() string {
	if x != nil {
		return x.CreationTimeStamp
	}
	return ""
}

func (x *BricamsGetCustomerData) GetLastUpdatedByUri() string {
	if x != nil {
		return x.LastUpdatedByUri
	}
	return ""
}

func (x *BricamsGetCustomerData) GetLastUpdatedTimeStamp() string {
	if x != nil {
		return x.LastUpdatedTimeStamp
	}
	return ""
}

func (x *BricamsGetCustomerData) GetPersistenceStatus() string {
	if x != nil {
		return x.PersistenceStatus
	}
	return ""
}

func (x *BricamsGetCustomerData) GetSnapshotRecord() string {
	if x != nil {
		return x.SnapshotRecord
	}
	return ""
}

func (x *BricamsGetCustomerData) GetSystemModifiableOnly() string {
	if x != nil {
		return x.SystemModifiableOnly
	}
	return ""
}

func (x *BricamsGetCustomerData) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *BricamsGetCustomerData) GetMakeBusinessDate() string {
	if x != nil {
		return x.MakeBusinessDate
	}
	return ""
}

func (x *BricamsGetCustomerData) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *BricamsGetCustomerData) GetActiveFlag() string {
	if x != nil {
		return x.ActiveFlag
	}
	return ""
}

func (x *BricamsGetCustomerData) GetApprovalStatus() string {
	if x != nil {
		return x.ApprovalStatus
	}
	return ""
}

func (x *BricamsGetCustomerData) GetReviewedByUri() string {
	if x != nil {
		return x.ReviewedByUri
	}
	return ""
}

func (x *BricamsGetCustomerData) GetReviewedTimeStamp() string {
	if x != nil {
		return x.ReviewedTimeStamp
	}
	return ""
}

func (x *BricamsGetCustomerData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BricamsGetCustomerData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BricamsGetCustomerData) GetBranchCode() string {
	if x != nil {
		return x.BranchCode
	}
	return ""
}

func (x *BricamsGetCustomerData) GetHasParentBranchCalender() string {
	if x != nil {
		return x.HasParentBranchCalender
	}
	return ""
}

func (x *BricamsGetCustomerData) GetIsEmailFilterEnabled() string {
	if x != nil {
		return x.IsEmailFilterEnabled
	}
	return ""
}

func (x *BricamsGetCustomerData) GetIsLogAfterWorkHoursEnabled() string {
	if x != nil {
		return x.IsLogAfterWorkHoursEnabled
	}
	return ""
}

func (x *BricamsGetCustomerData) GetIsOutOfWorkHLoginAllow() string {
	if x != nil {
		return x.IsOutOfWorkHLoginAllow
	}
	return ""
}

func (x *BricamsGetCustomerData) GetMaximumEmails() string {
	if x != nil {
		return x.MaximumEmails
	}
	return ""
}

func (x *BricamsGetCustomerData) GetParentBranchIds() string {
	if x != nil {
		return x.ParentBranchIds
	}
	return ""
}

func (x *BricamsGetCustomerData) GetProductOffered() string {
	if x != nil {
		return x.ProductOffered
	}
	return ""
}

func (x *BricamsGetCustomerData) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *BricamsGetCustomerData) GetSystemName() string {
	if x != nil {
		return x.SystemName
	}
	return ""
}

func (x *BricamsGetCustomerData) GetPersistentFormData() string {
	if x != nil {
		return x.PersistentFormData
	}
	return ""
}

func (x *BricamsGetCustomerData) GetContactInfo() string {
	if x != nil {
		return x.ContactInfo
	}
	return ""
}

func (x *BricamsGetCustomerData) GetPrimaryContactPerson() string {
	if x != nil {
		return x.PrimaryContactPerson
	}
	return ""
}

func (x *BricamsGetCustomerData) GetBranchCalendar() string {
	if x != nil {
		return x.BranchCalendar
	}
	return ""
}

func (x *BricamsGetCustomerData) GetOrganizationType() string {
	if x != nil {
		return x.OrganizationType
	}
	return ""
}

func (x *BricamsGetCustomerData) GetSignatureAuthority() string {
	if x != nil {
		return x.SignatureAuthority
	}
	return ""
}

func (x *BricamsGetCustomerData) GetHeadOffice() string {
	if x != nil {
		return x.HeadOffice
	}
	return ""
}

func (x *BricamsGetCustomerData) GetOfflineFlag() string {
	if x != nil {
		return x.OfflineFlag
	}
	return ""
}

func (x *BricamsGetCustomerData) GetGStin() string {
	if x != nil {
		return x.GStin
	}
	return ""
}

func (x *BricamsGetCustomerData) GetIsStopFreshBooking() string {
	if x != nil {
		return x.IsStopFreshBooking
	}
	return ""
}

var File_user_api_proto protoreflect.FileDescriptor

var file_user_api_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70,
	0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e,
	0x0a, 0x18, 0x43, 0x65, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x50,
	0x0a, 0x18, 0x43, 0x65, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x47, 0x65, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x36, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x47, 0x65, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x42, 0x0a, 0x04, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x72, 0x10, 0x02, 0x22, 0x65, 0x0a,
	0x15, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x15, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x72, 0x69, 0x63, 0x61,
	0x6d, 0x73, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb4, 0x0c, 0x0a, 0x16, 0x62, 0x72, 0x69, 0x63,
	0x61, 0x6d, 0x73, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x55, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x72, 0x69, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x72, 0x69, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x55, 0x72, 0x69, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x32,
	0x0a, 0x14, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x6b, 0x65, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6d, 0x61, 0x6b, 0x65, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x64, 0x42, 0x79, 0x55, 0x72, 0x69, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x42, 0x79, 0x55, 0x72, 0x69, 0x12, 0x2c, 0x0a, 0x11,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x38, 0x0a, 0x17, 0x68, 0x61, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x68, 0x61, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x73,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x73, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3e,
	0x0a, 0x1a, 0x69, 0x73, 0x4c, 0x6f, 0x67, 0x41, 0x66, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x69, 0x73, 0x4c, 0x6f, 0x67, 0x41, 0x66, 0x74, 0x65, 0x72, 0x57, 0x6f,
	0x72, 0x6b, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36,
	0x0a, 0x16, 0x69, 0x73, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x57, 0x6f, 0x72, 0x6b, 0x48, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x69, 0x73, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x57, 0x6f, 0x72, 0x6b, 0x48, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x73, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32,
	0x0a, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x53, 0x74, 0x69,
	0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x53, 0x74, 0x69, 0x6e, 0x12, 0x2e,
	0x0a, 0x12, 0x69, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x46, 0x72, 0x65, 0x73, 0x68, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x73, 0x53, 0x74,
	0x6f, 0x70, 0x46, 0x72, 0x65, 0x73, 0x68, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x32, 0xc7,
	0x24, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9a, 0x01,
	0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x16, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x92, 0x41, 0x32, 0x12, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x20, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x1a, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0b, 0x12, 0x09, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x92, 0x41, 0x2d,
	0x12, 0x0e, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x1a, 0x1b, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67,
	0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x93, 0x01,
	0x0a, 0x0d, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x92, 0x41, 0x2f, 0x12, 0x0e, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x1a, 0x1b, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x62, 0x00, 0x12, 0x65, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x28, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69,
	0x74, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xcd, 0x01, 0x0a, 0x15, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x30, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x6c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x7b, 0x66, 0x69, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x7d, 0x92, 0x41, 0x41, 0x12, 0x18, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74,
	0x61, 0x73, 0x6b, 0x1a, 0x25, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x12, 0xb2, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1f,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x22, 0x59, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x7b, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x7d, 0x92, 0x41, 0x37, 0x12, 0x13, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x20, 0x54,
	0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x12,
	0xcb, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x28,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x68, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x11, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x6d, 0x65, 0x5a, 0x10,
	0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b,
	0x92, 0x41, 0x3a, 0x12, 0x16, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6d, 0x79,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x1a, 0x20, 0x54, 0x68, 0x69,
	0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x12, 0xae, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x61, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x74,
	0x61, 0x73, 0x6b, 0x2f, 0x6d, 0x65, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x62,
	0x79, 0x92, 0x41, 0x3a, 0x12, 0x16, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6d,
	0x79, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x1a, 0x20, 0x54, 0x68,
	0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x12, 0xb0,
	0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x12, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x62, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x6d, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x2d, 0x62, 0x79, 0x92, 0x41, 0x3a, 0x12, 0x16, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x6d, 0x79, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x1a,
	0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65,
	0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x61, 0x73,
	0x6b, 0x12, 0x55, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x22, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xc4, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x26, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x22, 0x0e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x3a, 0x01, 0x2a, 0x5a,
	0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x2f,
	0x12, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x61, 0x73,
	0x6b, 0x1a, 0x1c, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x73, 0x61, 0x76, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x12,
	0x4c, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0xc1, 0x01,
	0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x22, 0x62, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x7b, 0x74, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x7d, 0x92, 0x41, 0x39, 0x12, 0x13, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x20, 0x54,
	0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x62,
	0x00, 0x12, 0x9f, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22,
	0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x92, 0x41, 0x39, 0x12, 0x13, 0x47, 0x65, 0x74, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65,
	0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x00, 0x12, 0x5d, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x21, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a,
	0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0xc6, 0x01, 0x0a, 0x12, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x67, 0x65,
	0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x62, 0x72, 0x69, 0x63,
	0x61, 0x6d, 0x73, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x26, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x12, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x62, 0x72, 0x69,
	0x63, 0x61, 0x6d, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x92, 0x41, 0x3b,
	0x12, 0x14, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x20, 0x42, 0x52, 0x49, 0x43, 0x41, 0x1a, 0x21, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x20, 0x42, 0x52, 0x49, 0x43, 0x41, 0x62, 0x00, 0x12, 0xe6, 0x01, 0x0a, 0x11,
	0x42, 0x52, 0x49, 0x43, 0x61, 0x6d, 0x73, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x28, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72,
	0x69, 0x63, 0x61, 0x6d, 0x73, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x7d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73,
	0x2f, 0x61, 0x6c, 0x6c, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x92, 0x41, 0x57, 0x12, 0x22, 0x47,
	0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x61, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x42, 0x52, 0x49, 0x43, 0x61, 0x6d,
	0x73, 0x1a, 0x2f, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x67, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x42, 0x52, 0x49, 0x43, 0x61,
	0x6d, 0x73, 0x62, 0x00, 0x12, 0xa2, 0x02, 0x0a, 0x18, 0x42, 0x52, 0x49, 0x43, 0x61, 0x6d, 0x73,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x32, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x47,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x22, 0x9d, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x62, 0x72,
	0x69, 0x63, 0x61, 0x6d, 0x73, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x6f, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x20,
	0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x61, 0x64, 0x64, 0x6f, 0x6e,
	0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x42, 0x52, 0x49, 0x43, 0x61, 0x6d, 0x73, 0x20, 0x62,
	0x79, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x3b, 0x54, 0x68, 0x69, 0x73,
	0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73,
	0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x20, 0x66,
	0x72, 0x6f, 0x6d, 0x20, 0x42, 0x52, 0x49, 0x43, 0x61, 0x6d, 0x73, 0x20, 0x62, 0x79, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x62, 0x00, 0x12, 0x6b, 0x0a, 0x15, 0x42, 0x52, 0x49,
	0x43, 0x61, 0x4d, 0x53, 0x73, 0x76, 0x63, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x28, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x53, 0x76, 0x63, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0xf1, 0x01, 0x0a, 0x19, 0x48, 0x54, 0x54, 0x50, 0x42,
	0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x73, 0x76, 0x63, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x26,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x53, 0x76, 0x63, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x22, 0x81, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12,
	0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x62, 0x72, 0x69, 0x63, 0x61,
	0x6d, 0x73, 0x2d, 0x73, 0x76, 0x63, 0x2f, 0x61, 0x6c, 0x6c, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x92, 0x41, 0x57, 0x12, 0x22, 0x47, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x20, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
	0x42, 0x52, 0x49, 0x43, 0x61, 0x6d, 0x73, 0x1a, 0x2f, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50,
	0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x20, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d,
	0x20, 0x42, 0x52, 0x49, 0x43, 0x61, 0x6d, 0x73, 0x62, 0x00, 0x12, 0x77, 0x0a, 0x1b, 0x42, 0x52,
	0x49, 0x43, 0x61, 0x4d, 0x53, 0x73, 0x76, 0x63, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x63,
	0x61, 0x6d, 0x73, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x52, 0x49, 0x43, 0x61, 0x4d, 0x53, 0x53, 0x76, 0x63, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x95, 0x02, 0x0a, 0x1f, 0x48, 0x54, 0x54, 0x50, 0x42, 0x52, 0x49, 0x43,
	0x61, 0x4d, 0x53, 0x73, 0x76, 0x63, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x63, 0x61, 0x6d,
	0x73, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x52,
	0x49, 0x43, 0x61, 0x4d, 0x53, 0x53, 0x76, 0x63, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22,
	0x99, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x62, 0x72, 0x69, 0x63, 0x61, 0x6d, 0x73, 0x2d, 0x73, 0x76, 0x63, 0x2f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x6f, 0x12, 0x2e, 0x47, 0x65,
	0x74, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x61, 0x64, 0x64,
	0x6f, 0x6e, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x42, 0x52, 0x49, 0x43, 0x61, 0x6d, 0x73,
	0x20, 0x62, 0x79, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x3b, 0x54, 0x68,
	0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x67, 0x65, 0x74, 0x20, 0x6c,
	0x69, 0x73, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x73, 0x20, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73,
	0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x42, 0x52, 0x49, 0x43, 0x61, 0x6d, 0x73, 0x20, 0x62, 0x79,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x62, 0x00, 0x12, 0xec, 0x01, 0x0a, 0x15,
	0x43, 0x65, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x29, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x41, 0x76, 0x61, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x1a, 0x29, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x65, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x41, 0x76,
	0x61, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x22, 0x7d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x74,
	0x61, 0x73, 0x6b, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x7b,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x4e, 0x12, 0x19, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x20, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x76, 0x61,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0x2f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x69,
	0x66, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x76, 0x61, 0x69, 0x62,
	0x65, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x62, 0x00, 0x12, 0xc3, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x26,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x69, 0x64, 0x92, 0x41, 0x43, 0x12, 0x18, 0x47,
	0x65, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x62, 0x79, 0x20, 0x75, 0x73, 0x65, 0x72, 0x69,
	0x64, 0x20, 0x61, 0x72, 0x72, 0x61, 0x79, 0x1a, 0x25, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50,
	0x49, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x47, 0x65, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x62,
	0x79, 0x20, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x20, 0x61, 0x72, 0x72, 0x61, 0x79, 0x62, 0x00,
	0x12, 0xc3, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x43, 0x4d, 0x12, 0x2b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x43, 0x4d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x43, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x51, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x13, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2d, 0x66, 0x63, 0x6d,
	0x92, 0x41, 0x33, 0x12, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x20, 0x66, 0x63, 0x6d, 0x1a, 0x1d, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x20, 0x66, 0x63, 0x6d, 0x62, 0x00, 0x12, 0x4a, 0x0a, 0x0b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x36, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x41, 0x6e, 0x64, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x44, 0x41, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x72, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62,
	0x92, 0x41, 0x69, 0x5a, 0x59, 0x0a, 0x57, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12,
	0x4d, 0x08, 0x02, 0x12, 0x38, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x42,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x20, 0x3c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a, 0x0d, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x0c,
	0x0a, 0x0a, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x00, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_api_proto_rawDescOnce sync.Once
	file_user_api_proto_rawDescData = file_user_api_proto_rawDesc
)

func file_user_api_proto_rawDescGZIP() []byte {
	file_user_api_proto_rawDescOnce.Do(func() {
		file_user_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_api_proto_rawDescData)
	})
	return file_user_api_proto_rawDescData
}

var file_user_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_user_api_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_user_api_proto_goTypes = []interface{}{
	(TempGenToken_Role)(0),                         // 0: user.service.v1.TempGenToken.Role
	(*CekUsernameAvaibilityReq)(nil),               // 1: user.service.v1.CekUsernameAvaibilityReq
	(*CekUsernameAvaibilityRes)(nil),               // 2: user.service.v1.CekUsernameAvaibilityRes
	(*TempGenToken)(nil),                           // 3: user.service.v1.TempGenToken
	(*BricamsGetCustomerReq)(nil),                  // 4: user.service.v1.bricamsGetCustomerReq
	(*BricamsGetCustomerRes)(nil),                  // 5: user.service.v1.bricamsGetCustomerRes
	(*BricamsGetCustomerData)(nil),                 // 6: user.service.v1.bricamsGetCustomerData
	(*Empty)(nil),                                  // 7: user.service.v1.Empty
	(*CommonRequest)(nil),                          // 8: user.service.v1.CommonRequest
	(*ListUserWithTaskRequest)(nil),                // 9: user.service.v1.ListUserWithTaskRequest
	(*DownloadListUserWithTaskRequest)(nil),        // 10: user.service.v1.DownloadListUserWithTaskRequest
	(*GetTaskByIDReq)(nil),                         // 11: user.service.v1.GetTaskByIDReq
	(*CreateUserRequest)(nil),                      // 12: user.service.v1.CreateUserRequest
	(*CreateUserTaskRequest)(nil),                  // 13: user.service.v1.CreateUserTaskRequest
	(*DeleteUserReq)(nil),                          // 14: user.service.v1.DeleteUserReq
	(*ListUserReq)(nil),                            // 15: user.service.v1.ListUserReq
	(*ListUserReqLogin)(nil),                       // 16: user.service.v1.ListUserReqLogin
	(*BricamsGetAddonsUserReq)(nil),                // 17: user.service.v1.BricamsGetAddonsUserReq
	(*BricamsGetAddonsUserByUsernameReq)(nil),      // 18: user.service.v1.BricamsGetAddonsUserByUsernameReq
	(*GetUserIDArrayRequest)(nil),                  // 19: user.service.v1.GetUserIDArrayRequest
	(*UpdateUsersTokenFCMRequest)(nil),             // 20: user.service.v1.UpdateUsersTokenFCMRequest
	(*UserParams)(nil),                             // 21: user.service.v1.UserParams
	(*GetUserByCompanyIDAndAuthorityRequest)(nil),  // 22: user.service.v1.GetUserByCompanyIDAndAuthorityRequest
	(*HealthCheckResponse)(nil),                    // 23: user.service.v1.HealthCheckResponse
	(*ListUserResponse)(nil),                       // 24: user.service.v1.ListUserResponse
	(*httpbody.HttpBody)(nil),                      // 25: google.api.HttpBody
	(*ListUserWithTaskResponse)(nil),               // 26: user.service.v1.ListUserWithTaskResponse
	(*GetUserWithTaskRes)(nil),                     // 27: user.service.v1.GetUserWithTaskRes
	(*ArrayString)(nil),                            // 28: user.service.v1.ArrayString
	(*CreateUserResponse)(nil),                     // 29: user.service.v1.CreateUserResponse
	(*CommonResponse)(nil),                         // 30: user.service.v1.CommonResponse
	(*DeleteUserRes)(nil),                          // 31: user.service.v1.DeleteUserRes
	(*ListUserRes)(nil),                            // 32: user.service.v1.ListUserRes
	(*ListUserResLogin)(nil),                       // 33: user.service.v1.ListUserResLogin
	(*BricamsGetAddonsUserRes)(nil),                // 34: user.service.v1.BricamsGetAddonsUserRes
	(*BricamsGetAddonsUserByUsernameRes)(nil),      // 35: user.service.v1.BricamsGetAddonsUserByUsernameRes
	(*BRICaMSSvcUserListRes)(nil),                  // 36: user.service.v1.BRICaMSSvcUserListRes
	(*BRICaMSSvcUserRes)(nil),                      // 37: user.service.v1.BRICaMSSvcUserRes
	(*GetUserIDArrayResponse)(nil),                 // 38: user.service.v1.GetUserIDArrayResponse
	(*UpdateUsersTokenFCMResponse)(nil),            // 39: user.service.v1.UpdateUsersTokenFCMResponse
	(*DetailUserRes)(nil),                          // 40: user.service.v1.DetailUserRes
	(*GetUserByCompanyIDAndAuthorityResponse)(nil), // 41: user.service.v1.GetUserByCompanyIDAndAuthorityResponse
}
var file_user_api_proto_depIdxs = []int32{
	0,  // 0: user.service.v1.TempGenToken.role:type_name -> user.service.v1.TempGenToken.Role
	6,  // 1: user.service.v1.bricamsGetCustomerRes.data:type_name -> user.service.v1.bricamsGetCustomerData
	7,  // 2: user.service.v1.ApiService.HealthCheck:input_type -> user.service.v1.Empty
	8,  // 3: user.service.v1.ApiService.GetUsers:input_type -> user.service.v1.CommonRequest
	8,  // 4: user.service.v1.ApiService.DownloadUsers:input_type -> user.service.v1.CommonRequest
	9,  // 5: user.service.v1.ApiService.GetUserTasks:input_type -> user.service.v1.ListUserWithTaskRequest
	10, // 6: user.service.v1.ApiService.DownloadListUserTasks:input_type -> user.service.v1.DownloadListUserWithTaskRequest
	11, // 7: user.service.v1.ApiService.GetUserTaskByID:input_type -> user.service.v1.GetTaskByIDReq
	9,  // 8: user.service.v1.ApiService.GetMyTasks:input_type -> user.service.v1.ListUserWithTaskRequest
	7,  // 9: user.service.v1.ApiService.GetMyTasksCreatedBy:input_type -> user.service.v1.Empty
	7,  // 10: user.service.v1.ApiService.GetMyTasksApprovedBy:input_type -> user.service.v1.Empty
	12, // 11: user.service.v1.ApiService.CreateUser:input_type -> user.service.v1.CreateUserRequest
	13, // 12: user.service.v1.ApiService.CreateUserTask:input_type -> user.service.v1.CreateUserTaskRequest
	14, // 13: user.service.v1.ApiService.DeleteUser:input_type -> user.service.v1.DeleteUserReq
	11, // 14: user.service.v1.ApiService.SendForDeleteUserTask:input_type -> user.service.v1.GetTaskByIDReq
	15, // 15: user.service.v1.ApiService.ListUserGroup:input_type -> user.service.v1.ListUserReq
	16, // 16: user.service.v1.ApiService.ListUserGroupForLogin:input_type -> user.service.v1.ListUserReqLogin
	4,  // 17: user.service.v1.ApiService.BRICaMSgetCustomer:input_type -> user.service.v1.bricamsGetCustomerReq
	17, // 18: user.service.v1.ApiService.BRICamsGetAllUser:input_type -> user.service.v1.BricamsGetAddonsUserReq
	18, // 19: user.service.v1.ApiService.BRICamsGetUserByUsername:input_type -> user.service.v1.BricamsGetAddonsUserByUsernameReq
	17, // 20: user.service.v1.ApiService.BRICaMSsvcGetUserList:input_type -> user.service.v1.BricamsGetAddonsUserReq
	17, // 21: user.service.v1.ApiService.HTTPBRICaMSsvcGetUserList:input_type -> user.service.v1.BricamsGetAddonsUserReq
	18, // 22: user.service.v1.ApiService.BRICaMSsvcGetUserByUsername:input_type -> user.service.v1.BricamsGetAddonsUserByUsernameReq
	18, // 23: user.service.v1.ApiService.HTTPBRICaMSsvcGetUserByUsername:input_type -> user.service.v1.BricamsGetAddonsUserByUsernameReq
	1,  // 24: user.service.v1.ApiService.CekUsernameAvaibility:input_type -> user.service.v1.CekUsernameAvaibilityReq
	19, // 25: user.service.v1.ApiService.GetUserByUserID:input_type -> user.service.v1.GetUserIDArrayRequest
	20, // 26: user.service.v1.ApiService.UpdateUsersTokenFCM:input_type -> user.service.v1.UpdateUsersTokenFCMRequest
	21, // 27: user.service.v1.ApiService.DetailUsers:input_type -> user.service.v1.UserParams
	22, // 28: user.service.v1.ApiService.GetUserByCompanyIDAndAuthority:input_type -> user.service.v1.GetUserByCompanyIDAndAuthorityRequest
	23, // 29: user.service.v1.ApiService.HealthCheck:output_type -> user.service.v1.HealthCheckResponse
	24, // 30: user.service.v1.ApiService.GetUsers:output_type -> user.service.v1.ListUserResponse
	25, // 31: user.service.v1.ApiService.DownloadUsers:output_type -> google.api.HttpBody
	26, // 32: user.service.v1.ApiService.GetUserTasks:output_type -> user.service.v1.ListUserWithTaskResponse
	25, // 33: user.service.v1.ApiService.DownloadListUserTasks:output_type -> google.api.HttpBody
	27, // 34: user.service.v1.ApiService.GetUserTaskByID:output_type -> user.service.v1.GetUserWithTaskRes
	26, // 35: user.service.v1.ApiService.GetMyTasks:output_type -> user.service.v1.ListUserWithTaskResponse
	28, // 36: user.service.v1.ApiService.GetMyTasksCreatedBy:output_type -> user.service.v1.ArrayString
	28, // 37: user.service.v1.ApiService.GetMyTasksApprovedBy:output_type -> user.service.v1.ArrayString
	29, // 38: user.service.v1.ApiService.CreateUser:output_type -> user.service.v1.CreateUserResponse
	30, // 39: user.service.v1.ApiService.CreateUserTask:output_type -> user.service.v1.CommonResponse
	31, // 40: user.service.v1.ApiService.DeleteUser:output_type -> user.service.v1.DeleteUserRes
	27, // 41: user.service.v1.ApiService.SendForDeleteUserTask:output_type -> user.service.v1.GetUserWithTaskRes
	32, // 42: user.service.v1.ApiService.ListUserGroup:output_type -> user.service.v1.ListUserRes
	33, // 43: user.service.v1.ApiService.ListUserGroupForLogin:output_type -> user.service.v1.ListUserResLogin
	5,  // 44: user.service.v1.ApiService.BRICaMSgetCustomer:output_type -> user.service.v1.bricamsGetCustomerRes
	34, // 45: user.service.v1.ApiService.BRICamsGetAllUser:output_type -> user.service.v1.BricamsGetAddonsUserRes
	35, // 46: user.service.v1.ApiService.BRICamsGetUserByUsername:output_type -> user.service.v1.BricamsGetAddonsUserByUsernameRes
	36, // 47: user.service.v1.ApiService.BRICaMSsvcGetUserList:output_type -> user.service.v1.BRICaMSSvcUserListRes
	36, // 48: user.service.v1.ApiService.HTTPBRICaMSsvcGetUserList:output_type -> user.service.v1.BRICaMSSvcUserListRes
	37, // 49: user.service.v1.ApiService.BRICaMSsvcGetUserByUsername:output_type -> user.service.v1.BRICaMSSvcUserRes
	37, // 50: user.service.v1.ApiService.HTTPBRICaMSsvcGetUserByUsername:output_type -> user.service.v1.BRICaMSSvcUserRes
	2,  // 51: user.service.v1.ApiService.CekUsernameAvaibility:output_type -> user.service.v1.CekUsernameAvaibilityRes
	38, // 52: user.service.v1.ApiService.GetUserByUserID:output_type -> user.service.v1.GetUserIDArrayResponse
	39, // 53: user.service.v1.ApiService.UpdateUsersTokenFCM:output_type -> user.service.v1.UpdateUsersTokenFCMResponse
	40, // 54: user.service.v1.ApiService.DetailUsers:output_type -> user.service.v1.DetailUserRes
	41, // 55: user.service.v1.ApiService.GetUserByCompanyIDAndAuthority:output_type -> user.service.v1.GetUserByCompanyIDAndAuthorityResponse
	29, // [29:56] is the sub-list for method output_type
	2,  // [2:29] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_user_api_proto_init() }
func file_user_api_proto_init() {
	if File_user_api_proto != nil {
		return
	}
	file_user_payload_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_user_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CekUsernameAvaibilityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CekUsernameAvaibilityRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TempGenToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BricamsGetCustomerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BricamsGetCustomerRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BricamsGetCustomerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_api_proto_goTypes,
		DependencyIndexes: file_user_api_proto_depIdxs,
		EnumInfos:         file_user_api_proto_enumTypes,
		MessageInfos:      file_user_api_proto_msgTypes,
	}.Build()
	File_user_api_proto = out.File
	file_user_api_proto_rawDesc = nil
	file_user_api_proto_goTypes = nil
	file_user_api_proto_depIdxs = nil
}
