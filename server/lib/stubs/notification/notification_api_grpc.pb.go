// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: notification_api.proto

package pb

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	GetNotifications(ctx context.Context, in *GetNotificationsReq, opts ...grpc.CallOption) (*ListNotificationRes, error)
	GetNotificationsHttp(ctx context.Context, in *GetNotificationsReq, opts ...grpc.CallOption) (*ListNotificationRes, error)
	GetListNotification(ctx context.Context, in *GetNotificationsReq, opts ...grpc.CallOption) (*ListNotificationFCMRes, error)
	CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	DeleteNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	SendPushNotification(ctx context.Context, in *SendPushNotificationRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	SendPushNotificationV2(ctx context.Context, in *SendPushNotificationRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	CreateNotificationTask(ctx context.Context, in *CreateNotificationTaskRequest, opts ...grpc.CallOption) (*CreateNotificationTaskResponse, error)
	GetMyTasks(ctx context.Context, in *GetNotificationTaskRequest, opts ...grpc.CallOption) (*GetNotificationTaskResponse, error)
	GetNotificationTaskByID(ctx context.Context, in *GetNotificationTaskByIDRequest, opts ...grpc.CallOption) (*GetDetailNotificationTaskResponse, error)
	GetNotificationModules(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListNotificationModuleResponse, error)
	GetModuleEvents(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListModuleEventResponse, error)
	GetModuleEventsByModuleID(ctx context.Context, in *GetModuleEventsByModileIDRequest, opts ...grpc.CallOption) (*ListModuleEventResponse, error)
	BRIGateSendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*BRIGateNotificationResponse, error)
	BRIGateSendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*BRIGateNotificationResponse, error)
	SaveNotificationModule(ctx context.Context, in *NotificationModule, opts ...grpc.CallOption) (*NotificationModule, error)
	SaveModuleEvent(ctx context.Context, in *ModuleEvent, opts ...grpc.CallOption) (*ModuleEvent, error)
	ListEventVariable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListVariableResponse, error)
	SaveEventVariable(ctx context.Context, in *EventVariable, opts ...grpc.CallOption) (*EventVariable, error)
	ListClient(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListClientResponse, error)
	SaveClient(ctx context.Context, in *TempClient, opts ...grpc.CallOption) (*TempClient, error)
	DownloadListNotificationTasks(ctx context.Context, in *FileListNotificationTaskRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	RequestDeleteNotificationTask(ctx context.Context, in *GetNotificationTaskByIDRequest, opts ...grpc.CallOption) (*GetDetailNotificationTaskResponse, error)
	SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error)
	SendNotificationWorkflow(ctx context.Context, in *SendNotificationWorkflowRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error)
	HistoryNotification(ctx context.Context, in *HistoryNotificationRequest, opts ...grpc.CallOption) (*HistoryNotificationResponse, error)
	UpdateLogHistoryNotifiation(ctx context.Context, in *UpdateLogHistoryNotifiationRequest, opts ...grpc.CallOption) (*UpdateLogHistoryNotifiationResponse, error)
	ListModuleVariable(ctx context.Context, in *ListModuleVariableReq, opts ...grpc.CallOption) (*ListModuleVariableResp, error)
	TemplateByKey(ctx context.Context, in *NotificationKey, opts ...grpc.CallOption) (*NotificationKeyResponse, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetNotifications(ctx context.Context, in *GetNotificationsReq, opts ...grpc.CallOption) (*ListNotificationRes, error) {
	out := new(ListNotificationRes)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/GetNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetNotificationsHttp(ctx context.Context, in *GetNotificationsReq, opts ...grpc.CallOption) (*ListNotificationRes, error) {
	out := new(ListNotificationRes)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/GetNotificationsHttp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetListNotification(ctx context.Context, in *GetNotificationsReq, opts ...grpc.CallOption) (*ListNotificationFCMRes, error) {
	out := new(ListNotificationFCMRes)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/GetListNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/CreateNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DeleteNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/DeleteNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SendPushNotification(ctx context.Context, in *SendPushNotificationRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/SendPushNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SendPushNotificationV2(ctx context.Context, in *SendPushNotificationRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/SendPushNotificationV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) CreateNotificationTask(ctx context.Context, in *CreateNotificationTaskRequest, opts ...grpc.CallOption) (*CreateNotificationTaskResponse, error) {
	out := new(CreateNotificationTaskResponse)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/CreateNotificationTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetMyTasks(ctx context.Context, in *GetNotificationTaskRequest, opts ...grpc.CallOption) (*GetNotificationTaskResponse, error) {
	out := new(GetNotificationTaskResponse)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/GetMyTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetNotificationTaskByID(ctx context.Context, in *GetNotificationTaskByIDRequest, opts ...grpc.CallOption) (*GetDetailNotificationTaskResponse, error) {
	out := new(GetDetailNotificationTaskResponse)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/GetNotificationTaskByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetNotificationModules(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListNotificationModuleResponse, error) {
	out := new(ListNotificationModuleResponse)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/GetNotificationModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetModuleEvents(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListModuleEventResponse, error) {
	out := new(ListModuleEventResponse)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/GetModuleEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) GetModuleEventsByModuleID(ctx context.Context, in *GetModuleEventsByModileIDRequest, opts ...grpc.CallOption) (*ListModuleEventResponse, error) {
	out := new(ListModuleEventResponse)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/GetModuleEventsByModuleID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BRIGateSendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*BRIGateNotificationResponse, error) {
	out := new(BRIGateNotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/BRIGateSendEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) BRIGateSendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*BRIGateNotificationResponse, error) {
	out := new(BRIGateNotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/BRIGateSendSms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SaveNotificationModule(ctx context.Context, in *NotificationModule, opts ...grpc.CallOption) (*NotificationModule, error) {
	out := new(NotificationModule)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/SaveNotificationModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SaveModuleEvent(ctx context.Context, in *ModuleEvent, opts ...grpc.CallOption) (*ModuleEvent, error) {
	out := new(ModuleEvent)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/SaveModuleEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListEventVariable(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListVariableResponse, error) {
	out := new(ListVariableResponse)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/ListEventVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SaveEventVariable(ctx context.Context, in *EventVariable, opts ...grpc.CallOption) (*EventVariable, error) {
	out := new(EventVariable)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/SaveEventVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListClient(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListClientResponse, error) {
	out := new(ListClientResponse)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/ListClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SaveClient(ctx context.Context, in *TempClient, opts ...grpc.CallOption) (*TempClient, error) {
	out := new(TempClient)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/SaveClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) DownloadListNotificationTasks(ctx context.Context, in *FileListNotificationTaskRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/DownloadListNotificationTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) RequestDeleteNotificationTask(ctx context.Context, in *GetNotificationTaskByIDRequest, opts ...grpc.CallOption) (*GetDetailNotificationTaskResponse, error) {
	out := new(GetDetailNotificationTaskResponse)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/RequestDeleteNotificationTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error) {
	out := new(SendNotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/SendNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) SendNotificationWorkflow(ctx context.Context, in *SendNotificationWorkflowRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error) {
	out := new(SendNotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/SendNotificationWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) HistoryNotification(ctx context.Context, in *HistoryNotificationRequest, opts ...grpc.CallOption) (*HistoryNotificationResponse, error) {
	out := new(HistoryNotificationResponse)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/HistoryNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) UpdateLogHistoryNotifiation(ctx context.Context, in *UpdateLogHistoryNotifiationRequest, opts ...grpc.CallOption) (*UpdateLogHistoryNotifiationResponse, error) {
	out := new(UpdateLogHistoryNotifiationResponse)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/UpdateLogHistoryNotifiation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) ListModuleVariable(ctx context.Context, in *ListModuleVariableReq, opts ...grpc.CallOption) (*ListModuleVariableResp, error) {
	out := new(ListModuleVariableResp)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/ListModuleVariable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiServiceClient) TemplateByKey(ctx context.Context, in *NotificationKey, opts ...grpc.CallOption) (*NotificationKeyResponse, error) {
	out := new(NotificationKeyResponse)
	err := c.cc.Invoke(ctx, "/notification.service.v1.ApiService/TemplateByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	HealthCheck(context.Context, *Empty) (*HealthCheckResponse, error)
	GetNotifications(context.Context, *GetNotificationsReq) (*ListNotificationRes, error)
	GetNotificationsHttp(context.Context, *GetNotificationsReq) (*ListNotificationRes, error)
	GetListNotification(context.Context, *GetNotificationsReq) (*ListNotificationFCMRes, error)
	CreateNotification(context.Context, *CreateNotificationRequest) (*CommonResponse, error)
	DeleteNotification(context.Context, *CreateNotificationRequest) (*CommonResponse, error)
	SendPushNotification(context.Context, *SendPushNotificationRequest) (*CommonResponse, error)
	SendPushNotificationV2(context.Context, *SendPushNotificationRequest) (*CommonResponse, error)
	CreateNotificationTask(context.Context, *CreateNotificationTaskRequest) (*CreateNotificationTaskResponse, error)
	GetMyTasks(context.Context, *GetNotificationTaskRequest) (*GetNotificationTaskResponse, error)
	GetNotificationTaskByID(context.Context, *GetNotificationTaskByIDRequest) (*GetDetailNotificationTaskResponse, error)
	GetNotificationModules(context.Context, *ListRequest) (*ListNotificationModuleResponse, error)
	GetModuleEvents(context.Context, *ListRequest) (*ListModuleEventResponse, error)
	GetModuleEventsByModuleID(context.Context, *GetModuleEventsByModileIDRequest) (*ListModuleEventResponse, error)
	BRIGateSendEmail(context.Context, *SendEmailRequest) (*BRIGateNotificationResponse, error)
	BRIGateSendSms(context.Context, *SendSmsRequest) (*BRIGateNotificationResponse, error)
	SaveNotificationModule(context.Context, *NotificationModule) (*NotificationModule, error)
	SaveModuleEvent(context.Context, *ModuleEvent) (*ModuleEvent, error)
	ListEventVariable(context.Context, *Empty) (*ListVariableResponse, error)
	SaveEventVariable(context.Context, *EventVariable) (*EventVariable, error)
	ListClient(context.Context, *Empty) (*ListClientResponse, error)
	SaveClient(context.Context, *TempClient) (*TempClient, error)
	DownloadListNotificationTasks(context.Context, *FileListNotificationTaskRequest) (*httpbody.HttpBody, error)
	RequestDeleteNotificationTask(context.Context, *GetNotificationTaskByIDRequest) (*GetDetailNotificationTaskResponse, error)
	SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error)
	SendNotificationWorkflow(context.Context, *SendNotificationWorkflowRequest) (*SendNotificationResponse, error)
	HistoryNotification(context.Context, *HistoryNotificationRequest) (*HistoryNotificationResponse, error)
	UpdateLogHistoryNotifiation(context.Context, *UpdateLogHistoryNotifiationRequest) (*UpdateLogHistoryNotifiationResponse, error)
	ListModuleVariable(context.Context, *ListModuleVariableReq) (*ListModuleVariableResp, error)
	TemplateByKey(context.Context, *NotificationKey) (*NotificationKeyResponse, error)
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) HealthCheck(context.Context, *Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedApiServiceServer) GetNotifications(context.Context, *GetNotificationsReq) (*ListNotificationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedApiServiceServer) GetNotificationsHttp(context.Context, *GetNotificationsReq) (*ListNotificationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationsHttp not implemented")
}
func (UnimplementedApiServiceServer) GetListNotification(context.Context, *GetNotificationsReq) (*ListNotificationFCMRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListNotification not implemented")
}
func (UnimplementedApiServiceServer) CreateNotification(context.Context, *CreateNotificationRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotification not implemented")
}
func (UnimplementedApiServiceServer) DeleteNotification(context.Context, *CreateNotificationRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotification not implemented")
}
func (UnimplementedApiServiceServer) SendPushNotification(context.Context, *SendPushNotificationRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPushNotification not implemented")
}
func (UnimplementedApiServiceServer) SendPushNotificationV2(context.Context, *SendPushNotificationRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPushNotificationV2 not implemented")
}
func (UnimplementedApiServiceServer) CreateNotificationTask(context.Context, *CreateNotificationTaskRequest) (*CreateNotificationTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotificationTask not implemented")
}
func (UnimplementedApiServiceServer) GetMyTasks(context.Context, *GetNotificationTaskRequest) (*GetNotificationTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyTasks not implemented")
}
func (UnimplementedApiServiceServer) GetNotificationTaskByID(context.Context, *GetNotificationTaskByIDRequest) (*GetDetailNotificationTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationTaskByID not implemented")
}
func (UnimplementedApiServiceServer) GetNotificationModules(context.Context, *ListRequest) (*ListNotificationModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationModules not implemented")
}
func (UnimplementedApiServiceServer) GetModuleEvents(context.Context, *ListRequest) (*ListModuleEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleEvents not implemented")
}
func (UnimplementedApiServiceServer) GetModuleEventsByModuleID(context.Context, *GetModuleEventsByModileIDRequest) (*ListModuleEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleEventsByModuleID not implemented")
}
func (UnimplementedApiServiceServer) BRIGateSendEmail(context.Context, *SendEmailRequest) (*BRIGateNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BRIGateSendEmail not implemented")
}
func (UnimplementedApiServiceServer) BRIGateSendSms(context.Context, *SendSmsRequest) (*BRIGateNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BRIGateSendSms not implemented")
}
func (UnimplementedApiServiceServer) SaveNotificationModule(context.Context, *NotificationModule) (*NotificationModule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveNotificationModule not implemented")
}
func (UnimplementedApiServiceServer) SaveModuleEvent(context.Context, *ModuleEvent) (*ModuleEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveModuleEvent not implemented")
}
func (UnimplementedApiServiceServer) ListEventVariable(context.Context, *Empty) (*ListVariableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventVariable not implemented")
}
func (UnimplementedApiServiceServer) SaveEventVariable(context.Context, *EventVariable) (*EventVariable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveEventVariable not implemented")
}
func (UnimplementedApiServiceServer) ListClient(context.Context, *Empty) (*ListClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClient not implemented")
}
func (UnimplementedApiServiceServer) SaveClient(context.Context, *TempClient) (*TempClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveClient not implemented")
}
func (UnimplementedApiServiceServer) DownloadListNotificationTasks(context.Context, *FileListNotificationTaskRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadListNotificationTasks not implemented")
}
func (UnimplementedApiServiceServer) RequestDeleteNotificationTask(context.Context, *GetNotificationTaskByIDRequest) (*GetDetailNotificationTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestDeleteNotificationTask not implemented")
}
func (UnimplementedApiServiceServer) SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedApiServiceServer) SendNotificationWorkflow(context.Context, *SendNotificationWorkflowRequest) (*SendNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotificationWorkflow not implemented")
}
func (UnimplementedApiServiceServer) HistoryNotification(context.Context, *HistoryNotificationRequest) (*HistoryNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryNotification not implemented")
}
func (UnimplementedApiServiceServer) UpdateLogHistoryNotifiation(context.Context, *UpdateLogHistoryNotifiationRequest) (*UpdateLogHistoryNotifiationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLogHistoryNotifiation not implemented")
}
func (UnimplementedApiServiceServer) ListModuleVariable(context.Context, *ListModuleVariableReq) (*ListModuleVariableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModuleVariable not implemented")
}
func (UnimplementedApiServiceServer) TemplateByKey(context.Context, *NotificationKey) (*NotificationKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TemplateByKey not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HealthCheck(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/GetNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetNotifications(ctx, req.(*GetNotificationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetNotificationsHttp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetNotificationsHttp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/GetNotificationsHttp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetNotificationsHttp(ctx, req.(*GetNotificationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetListNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetListNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/GetListNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetListNotification(ctx, req.(*GetNotificationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/CreateNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateNotification(ctx, req.(*CreateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DeleteNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DeleteNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/DeleteNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DeleteNotification(ctx, req.(*CreateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SendPushNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPushNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SendPushNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/SendPushNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SendPushNotification(ctx, req.(*SendPushNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SendPushNotificationV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPushNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SendPushNotificationV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/SendPushNotificationV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SendPushNotificationV2(ctx, req.(*SendPushNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_CreateNotificationTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).CreateNotificationTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/CreateNotificationTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).CreateNotificationTask(ctx, req.(*CreateNotificationTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetMyTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetMyTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/GetMyTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetMyTasks(ctx, req.(*GetNotificationTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetNotificationTaskByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationTaskByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetNotificationTaskByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/GetNotificationTaskByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetNotificationTaskByID(ctx, req.(*GetNotificationTaskByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetNotificationModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetNotificationModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/GetNotificationModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetNotificationModules(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetModuleEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetModuleEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/GetModuleEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetModuleEvents(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_GetModuleEventsByModuleID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModuleEventsByModileIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).GetModuleEventsByModuleID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/GetModuleEventsByModuleID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).GetModuleEventsByModuleID(ctx, req.(*GetModuleEventsByModileIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BRIGateSendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BRIGateSendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/BRIGateSendEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BRIGateSendEmail(ctx, req.(*SendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_BRIGateSendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).BRIGateSendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/BRIGateSendSms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).BRIGateSendSms(ctx, req.(*SendSmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SaveNotificationModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationModule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SaveNotificationModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/SaveNotificationModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SaveNotificationModule(ctx, req.(*NotificationModule))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SaveModuleEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SaveModuleEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/SaveModuleEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SaveModuleEvent(ctx, req.(*ModuleEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListEventVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListEventVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/ListEventVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListEventVariable(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SaveEventVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventVariable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SaveEventVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/SaveEventVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SaveEventVariable(ctx, req.(*EventVariable))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/ListClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListClient(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SaveClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TempClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SaveClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/SaveClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SaveClient(ctx, req.(*TempClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_DownloadListNotificationTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileListNotificationTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).DownloadListNotificationTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/DownloadListNotificationTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).DownloadListNotificationTasks(ctx, req.(*FileListNotificationTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_RequestDeleteNotificationTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationTaskByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).RequestDeleteNotificationTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/RequestDeleteNotificationTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).RequestDeleteNotificationTask(ctx, req.(*GetNotificationTaskByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/SendNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SendNotification(ctx, req.(*SendNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_SendNotificationWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).SendNotificationWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/SendNotificationWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).SendNotificationWorkflow(ctx, req.(*SendNotificationWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_HistoryNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).HistoryNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/HistoryNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).HistoryNotification(ctx, req.(*HistoryNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_UpdateLogHistoryNotifiation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLogHistoryNotifiationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).UpdateLogHistoryNotifiation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/UpdateLogHistoryNotifiation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).UpdateLogHistoryNotifiation(ctx, req.(*UpdateLogHistoryNotifiationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_ListModuleVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModuleVariableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).ListModuleVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/ListModuleVariable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).ListModuleVariable(ctx, req.(*ListModuleVariableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiService_TemplateByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServiceServer).TemplateByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notification.service.v1.ApiService/TemplateByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServiceServer).TemplateByKey(ctx, req.(*NotificationKey))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notification.service.v1.ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _ApiService_HealthCheck_Handler,
		},
		{
			MethodName: "GetNotifications",
			Handler:    _ApiService_GetNotifications_Handler,
		},
		{
			MethodName: "GetNotificationsHttp",
			Handler:    _ApiService_GetNotificationsHttp_Handler,
		},
		{
			MethodName: "GetListNotification",
			Handler:    _ApiService_GetListNotification_Handler,
		},
		{
			MethodName: "CreateNotification",
			Handler:    _ApiService_CreateNotification_Handler,
		},
		{
			MethodName: "DeleteNotification",
			Handler:    _ApiService_DeleteNotification_Handler,
		},
		{
			MethodName: "SendPushNotification",
			Handler:    _ApiService_SendPushNotification_Handler,
		},
		{
			MethodName: "SendPushNotificationV2",
			Handler:    _ApiService_SendPushNotificationV2_Handler,
		},
		{
			MethodName: "CreateNotificationTask",
			Handler:    _ApiService_CreateNotificationTask_Handler,
		},
		{
			MethodName: "GetMyTasks",
			Handler:    _ApiService_GetMyTasks_Handler,
		},
		{
			MethodName: "GetNotificationTaskByID",
			Handler:    _ApiService_GetNotificationTaskByID_Handler,
		},
		{
			MethodName: "GetNotificationModules",
			Handler:    _ApiService_GetNotificationModules_Handler,
		},
		{
			MethodName: "GetModuleEvents",
			Handler:    _ApiService_GetModuleEvents_Handler,
		},
		{
			MethodName: "GetModuleEventsByModuleID",
			Handler:    _ApiService_GetModuleEventsByModuleID_Handler,
		},
		{
			MethodName: "BRIGateSendEmail",
			Handler:    _ApiService_BRIGateSendEmail_Handler,
		},
		{
			MethodName: "BRIGateSendSms",
			Handler:    _ApiService_BRIGateSendSms_Handler,
		},
		{
			MethodName: "SaveNotificationModule",
			Handler:    _ApiService_SaveNotificationModule_Handler,
		},
		{
			MethodName: "SaveModuleEvent",
			Handler:    _ApiService_SaveModuleEvent_Handler,
		},
		{
			MethodName: "ListEventVariable",
			Handler:    _ApiService_ListEventVariable_Handler,
		},
		{
			MethodName: "SaveEventVariable",
			Handler:    _ApiService_SaveEventVariable_Handler,
		},
		{
			MethodName: "ListClient",
			Handler:    _ApiService_ListClient_Handler,
		},
		{
			MethodName: "SaveClient",
			Handler:    _ApiService_SaveClient_Handler,
		},
		{
			MethodName: "DownloadListNotificationTasks",
			Handler:    _ApiService_DownloadListNotificationTasks_Handler,
		},
		{
			MethodName: "RequestDeleteNotificationTask",
			Handler:    _ApiService_RequestDeleteNotificationTask_Handler,
		},
		{
			MethodName: "SendNotification",
			Handler:    _ApiService_SendNotification_Handler,
		},
		{
			MethodName: "SendNotificationWorkflow",
			Handler:    _ApiService_SendNotificationWorkflow_Handler,
		},
		{
			MethodName: "HistoryNotification",
			Handler:    _ApiService_HistoryNotification_Handler,
		},
		{
			MethodName: "UpdateLogHistoryNotifiation",
			Handler:    _ApiService_UpdateLogHistoryNotifiation_Handler,
		},
		{
			MethodName: "ListModuleVariable",
			Handler:    _ApiService_ListModuleVariable_Handler,
		},
		{
			MethodName: "TemplateByKey",
			Handler:    _ApiService_TemplateByKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification_api.proto",
}
