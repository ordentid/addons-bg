{
  "swagger": "2.0",
  "info": {
    "title": "bg_api.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "ApiService"
    }
  ],
  "schemes": [
    "HTTP",
    "HTTPS",
    "WS",
    "WSS"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/bg/applicant-name": {
      "get": {
        "summary": "Applicant Name",
        "description": "This API for applicant name list",
        "operationId": "ApiService_GetApplicantName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetApplicantNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Applicant Name"
        ]
      }
    },
    "/api/bg/health": {
      "get": {
        "summary": "Health Check",
        "description": "This API for check health server",
        "operationId": "ApiService_HealthCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1HealthCheckResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ApiService"
        ],
        "security": []
      }
    },
    "/api/bg/mapping-digital/task": {
      "get": {
        "summary": "BG Mapping Digital List",
        "description": "This API for BG Mapping Digital list",
        "operationId": "ApiService_GetMappingDigital",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMappingDigitalResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AllStatus",
              "Pending",
              "Draft",
              "Returned",
              "Approved",
              "Rejected",
              "DeleteRequest",
              "Deleted"
            ],
            "default": "AllStatus"
          },
          {
            "name": "step",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AllStep",
              "Maker",
              "Checker",
              "Signer",
              "Releaser"
            ],
            "default": "AllStep"
          },
          {
            "name": "limit",
            "description": "Limit data per page. Default value '-1' for disable limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "Page number to get data. Default value '-1' for disable page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Order data by column name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dir",
            "description": "Sort DirectionEnum should be ASC or DESC",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "filter",
            "description": "Create 'AND' queries \n format: [key:value,key:value] \n example: filter=task_id:1,type:Announcement =\u003e Where task_id = 1 AND type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key:\u003e=value' =\u003e 'key \u003e= value' \n - 'key:\u003c=value' =\u003e 'key \u003c= value' \n - 'key1:\u003e=value1,key2:\u003c=value2' =\u003e 'key1 \u003e= value1 AND key2 \u003c= value2' BETWEEN EXAMPLE \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "Create 'OR' queries \n format: [key1,key2,key3:value] \n example: query=name,type:Announcement =\u003e Where name = 'Announcement' OR type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BG Mapping Digital"
        ]
      },
      "post": {
        "summary": "Update Or Create BG Mapping Digital",
        "description": "This API for update or create BG Mapping Digital",
        "operationId": "ApiService_CreateMappingDigital",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateMappingDigitalResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateMappingDigitalRequest"
            }
          }
        ],
        "tags": [
          "BG Mapping Digital"
        ]
      }
    },
    "/api/bg/mapping-digital/task/{taskID}": {
      "get": {
        "summary": "BG Mapping Digital Detail",
        "description": "This API for BG Mapping Digital detail",
        "operationId": "ApiService_GetMappingDigitalDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMappingDigitalDetailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "BG Mapping Digital"
        ]
      },
      "put": {
        "summary": "Update Or Create BG Mapping Digital",
        "description": "This API for update or create BG Mapping Digital",
        "operationId": "ApiService_CreateMappingDigital2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateMappingDigitalResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "thirdPartyID": {
                  "type": "string",
                  "format": "uint64"
                },
                "beneficiaryNames": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "isDraft": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "tags": [
          "BG Mapping Digital"
        ]
      }
    },
    "/api/bg/mapping/task": {
      "get": {
        "summary": "BG Mapping List",
        "description": "This API for BG Mapping list",
        "operationId": "ApiService_GetTaskMapping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTaskMappingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AllStatus",
              "Pending",
              "Draft",
              "Returned",
              "Approved",
              "Rejected",
              "DeleteRequest",
              "Deleted"
            ],
            "default": "AllStatus"
          },
          {
            "name": "step",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AllStep",
              "Maker",
              "Checker",
              "Signer",
              "Releaser"
            ],
            "default": "AllStep"
          },
          {
            "name": "limit",
            "description": "Limit data per page. Default value '-1' for disable limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "Page number to get data. Default value '-1' for disable page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Order data by column name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dir",
            "description": "Sort DirectionEnum should be ASC or DESC",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "filter",
            "description": "Create 'AND' queries \n format: [key:value,key:value] \n example: filter=task_id:1,type:Announcement =\u003e Where task_id = 1 AND type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key:\u003e=value' =\u003e 'key \u003e= value' \n - 'key:\u003c=value' =\u003e 'key \u003c= value' \n - 'key1:\u003e=value1,key2:\u003c=value2' =\u003e 'key1 \u003e= value1 AND key2 \u003c= value2' BETWEEN EXAMPLE \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "Create 'OR' queries \n format: [key1,key2,key3:value] \n example: query=name,type:Announcement =\u003e Where name = 'Announcement' OR type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BG Mapping"
        ]
      },
      "post": {
        "summary": "Update Or Create Mapping",
        "description": "This API for update or create BG Mapping",
        "operationId": "ApiService_CreateTaskMapping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateTaskMappingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateTaskMappingRequest"
            }
          }
        ],
        "tags": [
          "BG Mapping"
        ]
      }
    },
    "/api/bg/mapping/task/template/{fileFormat}": {
      "get": {
        "summary": "BG Mapping Export",
        "description": "This API for BG Mapping export",
        "operationId": "ApiService_GetTaskMappingFile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTaskMappingFileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "fileFormat",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "null",
              "csv",
              "xls",
              "xlsx"
            ]
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AllStatus",
              "Pending",
              "Draft",
              "Returned",
              "Approved",
              "Rejected",
              "DeleteRequest",
              "Deleted"
            ],
            "default": "AllStatus"
          },
          {
            "name": "step",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AllStep",
              "Maker",
              "Checker",
              "Signer",
              "Releaser"
            ],
            "default": "AllStep"
          },
          {
            "name": "limit",
            "description": "Limit data per page. Default value '-1' for disable limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "Page number to get data. Default value '-1' for disable page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Order data by column name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dir",
            "description": "Sort DirectionEnum should be ASC or DESC",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "filter",
            "description": "Create 'AND' queries \n format: [key:value,key:value] \n example: filter=task_id:1,type:Announcement =\u003e Where task_id = 1 AND type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key:\u003e=value' =\u003e 'key \u003e= value' \n - 'key:\u003c=value' =\u003e 'key \u003c= value' \n - 'key1:\u003e=value1,key2:\u003c=value2' =\u003e 'key1 \u003e= value1 AND key2 \u003c= value2' BETWEEN EXAMPLE \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "Create 'OR' queries \n format: [key1,key2,key3:value] \n example: query=name,type:Announcement =\u003e Where name = 'Announcement' OR type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BG Mapping"
        ]
      }
    },
    "/api/bg/mapping/task/{taskID}": {
      "get": {
        "summary": "BG Mapping Detail",
        "description": "This API for BG Mapping detail",
        "operationId": "ApiService_GetTaskMappingDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTaskMappingDetailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "BG Mapping"
        ]
      },
      "put": {
        "summary": "Update Or Create Mapping",
        "description": "This API for update or create BG Mapping",
        "operationId": "ApiService_CreateTaskMapping2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateTaskMappingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "companyID": {
                  "type": "string",
                  "format": "uint64"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/v1MappingData"
                  }
                },
                "isDraft": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "tags": [
          "BG Mapping"
        ]
      }
    },
    "/api/bg/third-party": {
      "get": {
        "summary": "Third Party",
        "description": "This API for third party list",
        "operationId": "ApiService_GetThirdParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetThirdPartyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Third Party"
        ]
      },
      "post": {
        "summary": "Generate Third Party",
        "description": "This API for generate third party",
        "operationId": "ApiService_GenerateThirdParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GenerateThirdPartyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GenerateThirdPartyRequest"
            }
          }
        ],
        "tags": [
          "Third Party"
        ]
      }
    },
    "/api/bg/transaction/data": {
      "get": {
        "summary": "Transaction List",
        "description": "This API for transaction list",
        "operationId": "ApiService_GetTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "transaction.id",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "transaction.transactionID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "transaction.thirdPartyID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "transaction.thirdPartyName",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "transaction.referenceNo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.registrationNo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.applicantName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.beneficiaryName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.issueDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "transaction.effectiveDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "transaction.expiryDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "transaction.claimPeriod",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "transaction.closingDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "transaction.currency",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.amount",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "transaction.remark",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.bgStatus",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Cancelled",
              "Active",
              "ClaimPeriod",
              "ClosingPeriod",
              "Closed"
            ],
            "default": "Cancelled"
          },
          {
            "name": "transaction.channelID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "transaction.channelName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.bgType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "BidBond",
              "AdvancePayment",
              "PerformanceBond",
              "GovernmentPaymentGuarantee",
              "MaintenanceBond",
              "ProcurementBond",
              "TransactionRiskBond",
              "CustomsBond"
            ],
            "default": "BidBond"
          },
          {
            "name": "transaction.documentPath",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.companyID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "transaction.status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "MappingDigital",
              "PendingForIssuing"
            ],
            "default": "MappingDigital"
          },
          {
            "name": "transaction.createdByID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "transaction.updatedByID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "transaction.createdAt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "transaction.updatedAt",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "limit",
            "description": "Limit data per page. Default value '-1' for disable limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "Page number to get data. Default value '-1' for disable page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Order data by column name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dir",
            "description": "Sort DirectionEnum should be ASC or DESC",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "filter",
            "description": "Create 'AND' queries \n format: [key:value,key:value] \n example: filter=task_id:1,type:Announcement =\u003e Where task_id = 1 AND type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key:\u003e=value' =\u003e 'key \u003e= value' \n - 'key:\u003c=value' =\u003e 'key \u003c= value' \n - 'key1:\u003e=value1,key2:\u003c=value2' =\u003e 'key1 \u003e= value1 AND key2 \u003c= value2' BETWEEN EXAMPLE \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "Create 'OR' queries \n format: [key1,key2,key3:value] \n example: query=name,type:Announcement =\u003e Where name = 'Announcement' OR type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Transaction"
        ],
        "security": []
      },
      "post": {
        "summary": "Create Transaction",
        "description": "This API for create transaction",
        "operationId": "ApiService_CreateTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateTransactionRequest"
            }
          }
        ],
        "tags": [
          "Transaction"
        ]
      }
    },
    "/api/bg/transaction/data/{transactionID}": {
      "get": {
        "summary": "Transaction Detail",
        "description": "This API for transaction detail",
        "operationId": "ApiService_GetTransactionDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTransactionDetailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "transactionID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Transaction"
        ],
        "security": []
      },
      "post": {
        "summary": "Update Transaction",
        "description": "This API for update transaction",
        "operationId": "ApiService_UpdateTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "transactionID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/v1Transaction"
                }
              }
            }
          }
        ],
        "tags": [
          "Transaction"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1ApiPaginationResponse": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "format": "uint64"
        },
        "limit": {
          "type": "string",
          "format": "uint64"
        },
        "totalRecord": {
          "type": "string",
          "format": "uint64"
        },
        "totalPage": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1BgStatus": {
      "type": "string",
      "enum": [
        "Cancelled",
        "Active",
        "ClaimPeriod",
        "ClosingPeriod",
        "Closed"
      ],
      "default": "Cancelled"
    },
    "v1BgType": {
      "type": "string",
      "enum": [
        "BidBond",
        "AdvancePayment",
        "PerformanceBond",
        "GovernmentPaymentGuarantee",
        "MaintenanceBond",
        "ProcurementBond",
        "TransactionRiskBond",
        "CustomsBond"
      ],
      "default": "BidBond"
    },
    "v1Company": {
      "type": "object",
      "properties": {
        "companyID": {
          "type": "string",
          "format": "uint64"
        },
        "holdingID": {
          "type": "string",
          "format": "uint64"
        },
        "groupName": {
          "type": "string"
        },
        "companyName": {
          "type": "string"
        },
        "holdingCompanyName": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1CreateMappingDigitalRequest": {
      "type": "object",
      "properties": {
        "taskID": {
          "type": "string",
          "format": "uint64"
        },
        "thirdPartyID": {
          "type": "string",
          "format": "uint64"
        },
        "beneficiaryNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isDraft": {
          "type": "boolean"
        }
      }
    },
    "v1CreateMappingDigitalResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/v1Task"
        }
      }
    },
    "v1CreateTaskMappingRequest": {
      "type": "object",
      "properties": {
        "taskID": {
          "type": "string",
          "format": "uint64"
        },
        "companyID": {
          "type": "string",
          "format": "uint64"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MappingData"
          }
        },
        "isDraft": {
          "type": "boolean"
        }
      }
    },
    "v1CreateTaskMappingResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/v1Task"
        }
      }
    },
    "v1CreateTransactionRequest": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Transaction"
          }
        }
      }
    },
    "v1CreateTransactionResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Transaction"
          }
        }
      }
    },
    "v1Direction": {
      "type": "string",
      "enum": [
        "DESC",
        "ASC"
      ],
      "default": "DESC"
    },
    "v1FormatTemplate": {
      "type": "string",
      "enum": [
        "null",
        "csv",
        "xls",
        "xlsx"
      ],
      "default": "null"
    },
    "v1GenerateThirdPartyRequest": {
      "type": "object",
      "properties": {
        "page": {
          "type": "string",
          "format": "uint64"
        },
        "limit": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1GenerateThirdPartyResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "pagination": {
          "$ref": "#/definitions/v1ApiPaginationResponse"
        }
      }
    },
    "v1GetApplicantNameData": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "total": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v1GetApplicantNameResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1GetApplicantNameData"
          }
        }
      }
    },
    "v1GetMappingDigitalDetailResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/v1TaskMappingDigitalData"
        }
      }
    },
    "v1GetMappingDigitalResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TaskMappingDigitalData"
          }
        },
        "pagination": {
          "$ref": "#/definitions/v1PaginationResponse"
        }
      }
    },
    "v1GetTaskMappingDetailResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/v1TaskMappingData"
        }
      }
    },
    "v1GetTaskMappingFileResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1GetTaskMappingResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TaskMappingData"
          }
        },
        "pagination": {
          "$ref": "#/definitions/v1PaginationResponse"
        }
      }
    },
    "v1GetThirdPartyResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ThirdParty"
          }
        }
      }
    },
    "v1GetTransactionDetailResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/v1Transaction"
        }
      }
    },
    "v1GetTransactionResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Transaction"
          }
        },
        "pagination": {
          "$ref": "#/definitions/v1PaginationResponse"
        }
      }
    },
    "v1HealthCheckResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "v1MappingData": {
      "type": "object",
      "properties": {
        "thirdPartyID": {
          "type": "string",
          "format": "uint64"
        },
        "thirdPartyName": {
          "type": "string",
          "readOnly": true
        },
        "companyID": {
          "type": "string",
          "format": "uint64",
          "readOnly": true
        },
        "companyName": {
          "type": "string",
          "readOnly": true
        },
        "isAllowAllBeneficiary": {
          "type": "boolean"
        }
      }
    },
    "v1MappingDigitalData": {
      "type": "object",
      "properties": {
        "thirdPartyID": {
          "type": "string",
          "format": "uint64"
        },
        "thirdPartyName": {
          "type": "string",
          "readOnly": true
        },
        "companyID": {
          "type": "string",
          "format": "uint64",
          "readOnly": true
        },
        "companyName": {
          "type": "string",
          "readOnly": true
        },
        "beneficiaryName": {
          "type": "string"
        }
      }
    },
    "v1PaginationResponse": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "totalRows": {
          "type": "string",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1Task": {
      "type": "object",
      "properties": {
        "taskID": {
          "type": "string",
          "format": "uint64"
        },
        "type": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "step": {
          "type": "string"
        },
        "featureID": {
          "type": "string",
          "format": "uint64"
        },
        "lastApprovedByID": {
          "type": "string",
          "format": "uint64"
        },
        "lastRejectedByID": {
          "type": "string",
          "format": "uint64"
        },
        "lastApprovedByName": {
          "type": "string"
        },
        "lastRejectedByName": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "updatedByName": {
          "type": "string"
        },
        "reasons": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "companyID": {
          "type": "string",
          "format": "uint64"
        },
        "holdingID": {
          "type": "string",
          "format": "uint64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1TaskMappingData": {
      "type": "object",
      "properties": {
        "task": {
          "$ref": "#/definitions/v1Task"
        },
        "company": {
          "$ref": "#/definitions/v1Company"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MappingData"
          }
        }
      }
    },
    "v1TaskMappingDigitalData": {
      "type": "object",
      "properties": {
        "task": {
          "$ref": "#/definitions/v1Task"
        },
        "company": {
          "$ref": "#/definitions/v1Company"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MappingDigitalData"
          }
        }
      }
    },
    "v1TaskStatus": {
      "type": "string",
      "enum": [
        "AllStatus",
        "Pending",
        "Draft",
        "Returned",
        "Approved",
        "Rejected",
        "DeleteRequest",
        "Deleted"
      ],
      "default": "AllStatus"
    },
    "v1TaskStep": {
      "type": "string",
      "enum": [
        "AllStep",
        "Maker",
        "Checker",
        "Signer",
        "Releaser"
      ],
      "default": "AllStep"
    },
    "v1ThirdParty": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "thirdPartyID": {
          "type": "string",
          "format": "uint64"
        },
        "name": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "v1Transaction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "transactionID": {
          "type": "string",
          "format": "uint64"
        },
        "thirdPartyID": {
          "type": "string",
          "format": "uint64"
        },
        "thirdPartyName": {
          "type": "string",
          "format": "uint64"
        },
        "referenceNo": {
          "type": "string"
        },
        "registrationNo": {
          "type": "string"
        },
        "applicantName": {
          "type": "string"
        },
        "beneficiaryName": {
          "type": "string"
        },
        "issueDate": {
          "type": "string",
          "format": "date",
          "example": "2022-07-06",
          "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
        },
        "effectiveDate": {
          "type": "string",
          "format": "date",
          "example": "2022-07-06",
          "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
        },
        "expiryDate": {
          "type": "string",
          "format": "date",
          "example": "2022-07-06",
          "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
        },
        "claimPeriod": {
          "type": "string",
          "format": "uint64"
        },
        "closingDate": {
          "type": "string",
          "format": "date",
          "example": "2022-07-06",
          "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
        },
        "currency": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "format": "double"
        },
        "remark": {
          "type": "string"
        },
        "bgStatus": {
          "$ref": "#/definitions/v1BgStatus"
        },
        "channelID": {
          "type": "string",
          "format": "uint64"
        },
        "channelName": {
          "type": "string"
        },
        "bgType": {
          "$ref": "#/definitions/v1BgType"
        },
        "documentPath": {
          "type": "string"
        },
        "companyID": {
          "type": "string",
          "format": "uint64"
        },
        "status": {
          "$ref": "#/definitions/v1TransactionStatus"
        },
        "createdByID": {
          "type": "string",
          "format": "uint64",
          "readOnly": true
        },
        "updatedByID": {
          "type": "string",
          "format": "uint64",
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "v1TransactionStatus": {
      "type": "string",
      "enum": [
        "MappingDigital",
        "PendingForIssuing"
      ],
      "default": "MappingDigital"
    },
    "v1UpdateTransactionResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/v1Transaction"
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "description": "Authentication token, prefixed by Bearer: Bearer \u003ctoken\u003e",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": []
    }
  ]
}
