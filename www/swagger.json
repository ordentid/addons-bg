{
  "swagger": "2.0",
  "info": {
    "title": "bg_api.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "ApiService"
    }
  ],
  "schemes": [
    "HTTP",
    "HTTPS",
    "WS",
    "WSS"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/bg/applicant-name": {
      "get": {
        "summary": "Applicant",
        "description": "This API for Applicant list",
        "operationId": "ApiService_GetApplicantName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetApplicantNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "thirdPartyID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Applicant"
        ]
      }
    },
    "/api/bg/beneficiary-name": {
      "get": {
        "summary": "Beneficiary",
        "description": "This API for Beneficiary list",
        "operationId": "ApiService_GetBeneficiaryName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetBeneficiaryNameResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "thirdPartyID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AllBeneficiary",
              "IsMappedBeneficiary"
            ],
            "default": "AllBeneficiary"
          }
        ],
        "tags": [
          "Beneficiary"
        ]
      }
    },
    "/api/bg/branch": {
      "get": {
        "summary": "Branch",
        "description": "This API for Branch list",
        "operationId": "ApiService_GetBranch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetBranchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Branch"
        ]
      }
    },
    "/api/bg/health": {
      "get": {
        "summary": "Health Check",
        "description": "This API for check health server",
        "operationId": "ApiService_HealthCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1HealthCheckResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ApiService"
        ],
        "security": []
      }
    },
    "/api/bg/issuing/check": {
      "get": {
        "summary": "Check BG Issuing Status",
        "description": "This API for check BG Issuing status which has been sent to Portal",
        "operationId": "ApiService_CheckIssuingStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckIssuingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "BG Issuing"
        ]
      }
    },
    "/api/bg/issuing/task": {
      "get": {
        "summary": "BG Issuing List",
        "description": "This API for BG Issuing list",
        "operationId": "ApiService_GetTaskIssuing",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTaskIssuingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AllStatus",
              "Pending",
              "Draft",
              "Returned",
              "Approved",
              "Rejected",
              "DeleteRequest",
              "Deleted"
            ],
            "default": "AllStatus"
          },
          {
            "name": "step",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AllStep",
              "Maker",
              "Checker",
              "Signer",
              "Releaser"
            ],
            "default": "AllStep"
          },
          {
            "name": "limit",
            "description": "Limit data per page. Default value '-1' for disable limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "Page number to get data. Default value '-1' for disable page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Order data by column name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dir",
            "description": "Sort DirectionEnum should be ASC or DESC",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "filter",
            "description": "Create 'AND' queries \n format: [key:value,key:value] \n example: filter=task_id:1,type:Announcement =\u003e Where task_id = 1 AND type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key:\u003e=value' =\u003e 'key \u003e= value' \n - 'key:\u003c=value' =\u003e 'key \u003c= value' \n - 'key1:\u003e=value1,key2:\u003c=value2' =\u003e 'key1 \u003e= value1 AND key2 \u003c= value2' BETWEEN EXAMPLE \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "Create 'OR' queries \n format: [key1,key2,key3:value] \n example: query=name,type:Announcement =\u003e Where name = 'Announcement' OR type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "search",
            "description": "Search BG Issuing Task",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BG Issuing"
        ]
      },
      "post": {
        "summary": "Update Or Create BG Issuing",
        "description": "This API for update or create BG Issuing",
        "operationId": "ApiService_CreateTaskIssuing",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateTaskIssuingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateTaskIssuingRequest"
            }
          }
        ],
        "tags": [
          "BG Issuing"
        ]
      }
    },
    "/api/bg/issuing/task/template/{fileFormat}": {
      "get": {
        "summary": "BG Issuing Export",
        "description": "This API for BG Issuing export",
        "operationId": "ApiService_GetTaskIssuingFile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "fileFormat",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "null",
              "csv",
              "xls",
              "xlsx",
              "pdf"
            ]
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AllStatus",
              "Pending",
              "Draft",
              "Returned",
              "Approved",
              "Rejected",
              "DeleteRequest",
              "Deleted"
            ],
            "default": "AllStatus"
          },
          {
            "name": "step",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AllStep",
              "Maker",
              "Checker",
              "Signer",
              "Releaser"
            ],
            "default": "AllStep"
          },
          {
            "name": "limit",
            "description": "Limit data per page. Default value '-1' for disable limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "Page number to get data. Default value '-1' for disable page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Order data by column name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dir",
            "description": "Sort DirectionEnum should be ASC or DESC",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "filter",
            "description": "Create 'AND' queries \n format: [key:value,key:value] \n example: filter=task_id:1,type:Announcement =\u003e Where task_id = 1 AND type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key:\u003e=value' =\u003e 'key \u003e= value' \n - 'key:\u003c=value' =\u003e 'key \u003c= value' \n - 'key1:\u003e=value1,key2:\u003c=value2' =\u003e 'key1 \u003e= value1 AND key2 \u003c= value2' BETWEEN EXAMPLE \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "Create 'OR' queries \n format: [key1,key2,key3:value] \n example: query=name,type:Announcement =\u003e Where name = 'Announcement' OR type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BG Issuing"
        ]
      }
    },
    "/api/bg/issuing/task/{taskID}": {
      "get": {
        "summary": "BG Issuing Detail",
        "description": "This API for BG Issuing detail",
        "operationId": "ApiService_GetTaskIssuingDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTaskIssuingDetailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "BG Issuing"
        ]
      },
      "put": {
        "summary": "Update Or Create BG Issuing",
        "description": "This API for update or create BG Issuing",
        "operationId": "ApiService_CreateTaskIssuing2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateTaskIssuingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/v1IssuingData"
                },
                "isDraft": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "tags": [
          "BG Issuing"
        ]
      }
    },
    "/api/bg/mapping-digital/task": {
      "get": {
        "summary": "BG Mapping Digital List",
        "description": "This API for BG Mapping Digital list",
        "operationId": "ApiService_GetTaskMappingDigital",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTaskMappingDigitalResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AllStatus",
              "Pending",
              "Draft",
              "Returned",
              "Approved",
              "Rejected",
              "DeleteRequest",
              "Deleted"
            ],
            "default": "AllStatus"
          },
          {
            "name": "step",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AllStep",
              "Maker",
              "Checker",
              "Signer",
              "Releaser"
            ],
            "default": "AllStep"
          },
          {
            "name": "limit",
            "description": "Limit data per page. Default value '-1' for disable limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "Page number to get data. Default value '-1' for disable page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Order data by column name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dir",
            "description": "Sort DirectionEnum should be ASC or DESC",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "filter",
            "description": "Create 'AND' queries \n format: [key:value,key:value] \n example: filter=task_id:1,type:Announcement =\u003e Where task_id = 1 AND type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key:\u003e=value' =\u003e 'key \u003e= value' \n - 'key:\u003c=value' =\u003e 'key \u003c= value' \n - 'key1:\u003e=value1,key2:\u003c=value2' =\u003e 'key1 \u003e= value1 AND key2 \u003c= value2' BETWEEN EXAMPLE \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "Create 'OR' queries \n format: [key1,key2,key3:value] \n example: query=name,type:Announcement =\u003e Where name = 'Announcement' OR type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BG Mapping Digital"
        ]
      },
      "post": {
        "summary": "Update Or Create BG Mapping Digital",
        "description": "This API for update or create BG Mapping Digital",
        "operationId": "ApiService_CreateTaskMappingDigital",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateTaskMappingDigitalResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateTaskMappingDigitalRequest"
            }
          }
        ],
        "tags": [
          "BG Mapping Digital"
        ]
      }
    },
    "/api/bg/mapping-digital/task/template/{fileFormat}": {
      "get": {
        "summary": "BG Mapping Digital Export",
        "description": "This API for BG Mapping Digital export",
        "operationId": "ApiService_GetTaskMappingDigitalFile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "fileFormat",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "null",
              "csv",
              "xls",
              "xlsx",
              "pdf"
            ]
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AllStatus",
              "Pending",
              "Draft",
              "Returned",
              "Approved",
              "Rejected",
              "DeleteRequest",
              "Deleted"
            ],
            "default": "AllStatus"
          },
          {
            "name": "step",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AllStep",
              "Maker",
              "Checker",
              "Signer",
              "Releaser"
            ],
            "default": "AllStep"
          },
          {
            "name": "limit",
            "description": "Limit data per page. Default value '-1' for disable limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "Page number to get data. Default value '-1' for disable page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Order data by column name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dir",
            "description": "Sort DirectionEnum should be ASC or DESC",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "filter",
            "description": "Create 'AND' queries \n format: [key:value,key:value] \n example: filter=task_id:1,type:Announcement =\u003e Where task_id = 1 AND type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key:\u003e=value' =\u003e 'key \u003e= value' \n - 'key:\u003c=value' =\u003e 'key \u003c= value' \n - 'key1:\u003e=value1,key2:\u003c=value2' =\u003e 'key1 \u003e= value1 AND key2 \u003c= value2' BETWEEN EXAMPLE \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "Create 'OR' queries \n format: [key1,key2,key3:value] \n example: query=name,type:Announcement =\u003e Where name = 'Announcement' OR type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BG Mapping Digital"
        ]
      }
    },
    "/api/bg/mapping-digital/task/{taskID}": {
      "get": {
        "summary": "BG Mapping Digital Detail",
        "description": "This API for BG Mapping Digital detail",
        "operationId": "ApiService_GetTaskMappingDigitalDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTaskMappingDigitalDetailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "BG Mapping Digital"
        ]
      },
      "put": {
        "summary": "Update Or Create BG Mapping Digital",
        "description": "This API for update or create BG Mapping Digital",
        "operationId": "ApiService_CreateTaskMappingDigital2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateTaskMappingDigitalResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "thirdPartyID": {
                  "type": "string",
                  "format": "uint64"
                },
                "beneficiary": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/v1Beneficiary"
                  }
                },
                "isDraft": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "tags": [
          "BG Mapping Digital"
        ]
      }
    },
    "/api/bg/mapping/task": {
      "get": {
        "summary": "BG Mapping List",
        "description": "This API for BG Mapping list",
        "operationId": "ApiService_GetTaskMapping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTaskMappingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AllStatus",
              "Pending",
              "Draft",
              "Returned",
              "Approved",
              "Rejected",
              "DeleteRequest",
              "Deleted"
            ],
            "default": "AllStatus"
          },
          {
            "name": "step",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AllStep",
              "Maker",
              "Checker",
              "Signer",
              "Releaser"
            ],
            "default": "AllStep"
          },
          {
            "name": "limit",
            "description": "Limit data per page. Default value '-1' for disable limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "Page number to get data. Default value '-1' for disable page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Order data by column name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dir",
            "description": "Sort DirectionEnum should be ASC or DESC",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "filter",
            "description": "Create 'AND' queries \n format: [key:value,key:value] \n example: filter=task_id:1,type:Announcement =\u003e Where task_id = 1 AND type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key:\u003e=value' =\u003e 'key \u003e= value' \n - 'key:\u003c=value' =\u003e 'key \u003c= value' \n - 'key1:\u003e=value1,key2:\u003c=value2' =\u003e 'key1 \u003e= value1 AND key2 \u003c= value2' BETWEEN EXAMPLE \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "Create 'OR' queries \n format: [key1,key2,key3:value] \n example: query=name,type:Announcement =\u003e Where name = 'Announcement' OR type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BG Mapping"
        ]
      },
      "post": {
        "summary": "Update Or Create Mapping",
        "description": "This API for update or create BG Mapping",
        "operationId": "ApiService_CreateTaskMapping",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateTaskMappingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateTaskMappingRequest"
            }
          }
        ],
        "tags": [
          "BG Mapping"
        ]
      }
    },
    "/api/bg/mapping/task/template/{fileFormat}": {
      "get": {
        "summary": "BG Mapping Export",
        "description": "This API for BG Mapping export",
        "operationId": "ApiService_GetTaskMappingFile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "fileFormat",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "null",
              "csv",
              "xls",
              "xlsx",
              "pdf"
            ]
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AllStatus",
              "Pending",
              "Draft",
              "Returned",
              "Approved",
              "Rejected",
              "DeleteRequest",
              "Deleted"
            ],
            "default": "AllStatus"
          },
          {
            "name": "step",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AllStep",
              "Maker",
              "Checker",
              "Signer",
              "Releaser"
            ],
            "default": "AllStep"
          },
          {
            "name": "limit",
            "description": "Limit data per page. Default value '-1' for disable limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "Page number to get data. Default value '-1' for disable page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Order data by column name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dir",
            "description": "Sort DirectionEnum should be ASC or DESC",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "filter",
            "description": "Create 'AND' queries \n format: [key:value,key:value] \n example: filter=task_id:1,type:Announcement =\u003e Where task_id = 1 AND type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key:\u003e=value' =\u003e 'key \u003e= value' \n - 'key:\u003c=value' =\u003e 'key \u003c= value' \n - 'key1:\u003e=value1,key2:\u003c=value2' =\u003e 'key1 \u003e= value1 AND key2 \u003c= value2' BETWEEN EXAMPLE \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "Create 'OR' queries \n format: [key1,key2,key3:value] \n example: query=name,type:Announcement =\u003e Where name = 'Announcement' OR type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BG Mapping"
        ]
      }
    },
    "/api/bg/mapping/task/{taskID}": {
      "get": {
        "summary": "BG Mapping Detail",
        "description": "This API for BG Mapping detail",
        "operationId": "ApiService_GetTaskMappingDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTaskMappingDetailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "BG Mapping"
        ]
      },
      "put": {
        "summary": "Update Or Create Mapping",
        "description": "This API for update or create BG Mapping",
        "operationId": "ApiService_CreateTaskMapping2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateTaskMappingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "companyID": {
                  "type": "string",
                  "format": "uint64"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/v1MappingData"
                  }
                },
                "isDraft": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "tags": [
          "BG Mapping"
        ]
      }
    },
    "/api/bg/third-party": {
      "get": {
        "summary": "Third Party",
        "description": "This API for Third Party list",
        "operationId": "ApiService_GetThirdParty",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetThirdPartyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "All",
              "NeedMapping",
              "IsMapped"
            ],
            "default": "All"
          }
        ],
        "tags": [
          "Third Party"
        ]
      }
    },
    "/api/bg/transaction/attachment/{referenceNo}": {
      "get": {
        "summary": "Transaction Attachment",
        "description": "This API for transaction attachment",
        "operationId": "ApiService_GetTransactionAttachment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTransactionAttachmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "referenceNo",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Transaction"
        ],
        "security": []
      }
    },
    "/api/bg/transaction/data": {
      "get": {
        "summary": "Transaction List",
        "description": "This API for transaction list",
        "operationId": "ApiService_GetTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "transaction.startDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.endDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.applicantName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.claimPeriod",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "transaction.status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.referenceNo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.eventPeriod",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.beneficiaryID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "transaction.beneficiaryName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.thirdPartyID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "transaction.thirdPartyName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.channelID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "transaction.channelName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Limit data per page. Default value '-1' for disable limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "Page number to get data. Default value '-1' for disable page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Order data by column name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dir",
            "description": "Sort DirectionEnum should be ASC or DESC",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "filter",
            "description": "Create 'AND' queries \n format: [key:value,key:value] \n example: filter=task_id:1,type:Announcement =\u003e Where task_id = 1 AND type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key:\u003e=value' =\u003e 'key \u003e= value' \n - 'key:\u003c=value' =\u003e 'key \u003c= value' \n - 'key1:\u003e=value1,key2:\u003c=value2' =\u003e 'key1 \u003e= value1 AND key2 \u003c= value2' BETWEEN EXAMPLE \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "Create 'OR' queries \n format: [key1,key2,key3:value] \n example: query=name,type:Announcement =\u003e Where name = 'Announcement' OR type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Transaction"
        ]
      }
    },
    "/api/bg/transaction/data/create": {
      "post": {
        "summary": "Create Transaction",
        "description": "This API for create transaction",
        "operationId": "ApiService_CreateTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateTransactionRequest"
            }
          }
        ],
        "tags": [
          "Transaction"
        ]
      }
    },
    "/api/bg/transaction/data/delete": {
      "post": {
        "summary": "Delete Transaction",
        "description": "This API for delete transaction",
        "operationId": "ApiService_DeleteTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteTransactionRequest"
            }
          }
        ],
        "tags": [
          "Transaction"
        ]
      }
    },
    "/api/bg/transaction/data/template/{fileFormat}": {
      "get": {
        "summary": "Transaction Export",
        "description": "This API for Transaction export",
        "operationId": "ApiService_GetTransactionFile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiHttpBody"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "fileFormat",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "null",
              "csv",
              "xls",
              "xlsx",
              "pdf"
            ]
          },
          {
            "name": "transaction.startDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.endDate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.branch",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.applicantName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.claimPeriod",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "transaction.status",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.referenceNo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.eventPeriod",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.beneficiaryID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "transaction.beneficiaryName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.thirdPartyID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "transaction.thirdPartyName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "transaction.channelID",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "transaction.channelName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "description": "Limit data per page. Default value '-1' for disable limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page",
            "description": "Page number to get data. Default value '-1' for disable page",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "description": "Order data by column name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dir",
            "description": "Sort DirectionEnum should be ASC or DESC",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DESC",
              "ASC"
            ],
            "default": "DESC"
          },
          {
            "name": "filter",
            "description": "Create 'AND' queries \n format: [key:value,key:value] \n example: filter=task_id:1,type:Announcement =\u003e Where task_id = 1 AND type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key:\u003e=value' =\u003e 'key \u003e= value' \n - 'key:\u003c=value' =\u003e 'key \u003c= value' \n - 'key1:\u003e=value1,key2:\u003c=value2' =\u003e 'key1 \u003e= value1 AND key2 \u003c= value2' BETWEEN EXAMPLE \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "Create 'OR' queries \n format: [key1,key2,key3:value] \n example: query=name,type:Announcement =\u003e Where name = 'Announcement' OR type = 'Announcement' \n Expressions: \n - 'key:value' =\u003e 'key = value' \n - 'key:%%value' =\u003e 'key LIKE %value%' \n - 'key:%!value' =\u003e 'key ILIKE %value%' \n - 'key1.nestedKey1:value' =\u003e 'key1-\u003e\u003enestedKey1 = value'",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Transaction"
        ]
      }
    },
    "/api/bg/transaction/data/{referenceNo}": {
      "get": {
        "summary": "Transaction Detail",
        "description": "This API for transaction detail",
        "operationId": "ApiService_GetTransactionDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTransactionDetailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "referenceNo",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Transaction"
        ]
      }
    }
  },
  "definitions": {
    "apiHttpBody": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string",
          "description": "The HTTP Content-Type header value specifying the content type of the body."
        },
        "data": {
          "type": "string",
          "format": "byte",
          "description": "The HTTP request/response body as raw binary."
        },
        "extensions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Application specific response metadata. Must be set in the first response\nfor streaming APIs."
        }
      },
      "description": "Message that represents an arbitrary HTTP body. It should only be used for\npayload formats that can't be represented as JSON, such as raw binary or\nan HTML page.\n\n\nThis message can be used both in streaming and non-streaming API methods in\nthe request as well as the response.\n\nIt can be used as a top-level request field, which is convenient if one\nwants to extract parameters from either the URL or HTTP template into the\nrequest fields and also want access to the raw HTTP body.\n\nExample:\n\n    message GetResourceRequest {\n      // A unique request id.\n      string request_id = 1;\n\n      // The raw HTTP body is bound to this field.\n      google.api.HttpBody http_body = 2;\n\n    }\n\n    service ResourceService {\n      rpc GetResource(GetResourceRequest)\n        returns (google.api.HttpBody);\n      rpc UpdateResource(google.api.HttpBody)\n        returns (google.protobuf.Empty);\n\n    }\n\nExample with streaming methods:\n\n    service CaldavService {\n      rpc GetCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n      rpc UpdateCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n\n    }\n\nUse of this type only changes how the request and response bodies are\nhandled, all other features will continue to work unchanged."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\nExample 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\nExample 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AccountData": {
      "type": "object",
      "properties": {
        "cif": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "accountNumber": {
          "type": "string"
        }
      }
    },
    "v1ApplicantData": {
      "type": "object",
      "properties": {
        "applicantType": {
          "$ref": "#/definitions/v1ApplicantType"
        },
        "name": {
          "type": "string"
        },
        "birthDate": {
          "type": "string",
          "format": "date",
          "example": "2022-07-06",
          "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
        },
        "dateEstablished": {
          "type": "string",
          "format": "date",
          "example": "2022-07-06",
          "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
        },
        "companyType": {
          "$ref": "#/definitions/v1CompanyType"
        },
        "gender": {
          "$ref": "#/definitions/v1Gender"
        },
        "address": {
          "type": "string"
        },
        "contactPerson": {
          "type": "string"
        },
        "beneficiaryName": {
          "type": "string"
        },
        "beneficiaryAddress": {
          "type": "string"
        },
        "npwpNo": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "nik": {
          "type": "string"
        }
      }
    },
    "v1ApplicantName": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1ApplicantType": {
      "type": "string",
      "enum": [
        "CompanyApplicant",
        "IndividualApplicant"
      ],
      "default": "CompanyApplicant"
    },
    "v1Beneficiary": {
      "type": "object",
      "properties": {
        "beneficiaryId": {
          "type": "string",
          "format": "uint64"
        },
        "beneficiaryName": {
          "type": "string"
        }
      }
    },
    "v1BeneficiaryName": {
      "type": "object",
      "properties": {
        "beneficiaryId": {
          "type": "string",
          "format": "uint64"
        },
        "thirdPartyId": {
          "type": "string",
          "format": "uint64"
        },
        "cif": {
          "type": "string"
        },
        "fullname": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1BeneficiaryType": {
      "type": "string",
      "enum": [
        "AllBeneficiary",
        "IsMappedBeneficiary"
      ],
      "default": "AllBeneficiary"
    },
    "v1BgType": {
      "type": "string",
      "enum": [
        "BidBond",
        "AdvancePayment",
        "PerformanceBond",
        "GovernmentPaymentGuarantee",
        "MaintenanceBond",
        "ProcurementBond",
        "TransactionRiskBond",
        "CustomsBond"
      ],
      "default": "BidBond"
    },
    "v1Branch": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "name": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "v1CheckIssuingResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/v1IssuingPortal"
        }
      }
    },
    "v1Company": {
      "type": "object",
      "properties": {
        "companyID": {
          "type": "string",
          "format": "uint64"
        },
        "holdingID": {
          "type": "string",
          "format": "uint64"
        },
        "groupName": {
          "type": "string"
        },
        "companyName": {
          "type": "string"
        },
        "holdingCompanyName": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1CompanyType": {
      "type": "string",
      "enum": [
        "PT",
        "CV"
      ],
      "default": "PT"
    },
    "v1ContractGuaranteeType": {
      "type": "string",
      "enum": [
        "Insurance",
        "Cash",
        "NonCashLoan",
        "Combination",
        "CounterGuarantee"
      ],
      "default": "Insurance"
    },
    "v1CreateIssuingResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/v1IssuingPortal"
        }
      }
    },
    "v1CreateTaskIssuingRequest": {
      "type": "object",
      "properties": {
        "taskID": {
          "type": "string",
          "format": "uint64"
        },
        "data": {
          "$ref": "#/definitions/v1IssuingData"
        },
        "isDraft": {
          "type": "boolean"
        }
      }
    },
    "v1CreateTaskIssuingResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/v1Task"
        }
      }
    },
    "v1CreateTaskMappingDigitalRequest": {
      "type": "object",
      "properties": {
        "taskID": {
          "type": "string",
          "format": "uint64"
        },
        "thirdPartyID": {
          "type": "string",
          "format": "uint64"
        },
        "beneficiary": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Beneficiary"
          }
        },
        "isDraft": {
          "type": "boolean"
        }
      }
    },
    "v1CreateTaskMappingDigitalResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/v1Task"
        }
      }
    },
    "v1CreateTaskMappingRequest": {
      "type": "object",
      "properties": {
        "taskID": {
          "type": "string",
          "format": "uint64"
        },
        "companyID": {
          "type": "string",
          "format": "uint64"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MappingData"
          }
        },
        "isDraft": {
          "type": "boolean"
        }
      }
    },
    "v1CreateTaskMappingResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/v1Task"
        }
      }
    },
    "v1CreateTransactionRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "mappingData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MappingData"
          }
        },
        "mappingDataBackup": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MappingData"
          }
        },
        "mappingDigitalData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MappingDigitalData"
          }
        },
        "mappingDigitalDataBackup": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MappingDigitalData"
          }
        }
      }
    },
    "v1CreateTransactionResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Mapping"
          }
        }
      }
    },
    "v1DeleteTransactionRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "mappingData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MappingData"
          }
        },
        "mappingDataBackup": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MappingData"
          }
        },
        "mappingDigitalData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MappingDigitalData"
          }
        },
        "mappingDigitalDataBackup": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MappingDigitalData"
          }
        }
      }
    },
    "v1DeleteTransactionResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Mapping"
          }
        }
      }
    },
    "v1Direction": {
      "type": "string",
      "enum": [
        "DESC",
        "ASC"
      ],
      "default": "DESC"
    },
    "v1DocumentData": {
      "type": "object",
      "properties": {
        "businessLegal": {
          "type": "string"
        },
        "tender": {
          "type": "string"
        },
        "sp": {
          "type": "string"
        },
        "bg": {
          "type": "string"
        },
        "other": {
          "type": "string"
        }
      }
    },
    "v1FormatTemplate": {
      "type": "string",
      "enum": [
        "null",
        "csv",
        "xls",
        "xlsx",
        "pdf"
      ],
      "default": "null"
    },
    "v1Gender": {
      "type": "string",
      "enum": [
        "Male",
        "Female"
      ],
      "default": "Male"
    },
    "v1GetApplicantNameResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ApplicantName"
          }
        }
      }
    },
    "v1GetBeneficiaryNameResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1BeneficiaryName"
          }
        }
      }
    },
    "v1GetBranchResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Branch"
          }
        }
      }
    },
    "v1GetTaskIssuingDetailResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/v1TaskIssuingData"
        }
      }
    },
    "v1GetTaskIssuingResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TaskIssuingData"
          }
        },
        "pagination": {
          "$ref": "#/definitions/v1PaginationResponse"
        }
      }
    },
    "v1GetTaskMappingDetailResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/v1TaskMappingData"
        }
      }
    },
    "v1GetTaskMappingDigitalDetailResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/v1TaskMappingDigitalData"
        }
      }
    },
    "v1GetTaskMappingDigitalResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TaskMappingDigitalData"
          }
        },
        "pagination": {
          "$ref": "#/definitions/v1PaginationResponse"
        }
      }
    },
    "v1GetTaskMappingResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TaskMappingData"
          }
        },
        "pagination": {
          "$ref": "#/definitions/v1PaginationResponse"
        }
      }
    },
    "v1GetThirdPartyResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ThirdParty"
          }
        }
      }
    },
    "v1GetTransactionAttachmentResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetTransactionDetailResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/v1Transaction"
        }
      }
    },
    "v1GetTransactionResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "boolean"
        },
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Transaction"
          }
        },
        "pagination": {
          "$ref": "#/definitions/v1PaginationResponse"
        }
      }
    },
    "v1HealthCheckResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "v1IssuingData": {
      "type": "object",
      "properties": {
        "step": {
          "type": "string",
          "format": "uint64"
        },
        "referenceNo": {
          "type": "string"
        },
        "registrationNo": {
          "type": "string"
        },
        "publishing": {
          "$ref": "#/definitions/v1PublishingData"
        },
        "account": {
          "$ref": "#/definitions/v1AccountData"
        },
        "applicant": {
          "$ref": "#/definitions/v1ApplicantData"
        },
        "project": {
          "$ref": "#/definitions/v1ProjectData"
        },
        "document": {
          "$ref": "#/definitions/v1DocumentData"
        }
      }
    },
    "v1IssuingPortal": {
      "type": "object",
      "properties": {
        "registrationNo": {
          "type": "string"
        },
        "referenceNo": {
          "type": "string"
        },
        "warkatUrl": {
          "type": "string"
        },
        "warkatUrlPublic": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "modifiedDate": {
          "type": "string"
        }
      }
    },
    "v1Mapping": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "companyID": {
          "type": "string",
          "format": "uint64"
        },
        "thirdPartyID": {
          "type": "string",
          "format": "uint64"
        },
        "beneficiaryID": {
          "type": "string",
          "format": "uint64"
        },
        "isMapped": {
          "type": "boolean"
        },
        "createdByID": {
          "type": "string",
          "format": "uint64",
          "readOnly": true
        },
        "updatedByID": {
          "type": "string",
          "format": "uint64",
          "readOnly": true
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "v1MappingData": {
      "type": "object",
      "properties": {
        "thirdPartyID": {
          "type": "string",
          "format": "uint64"
        },
        "thirdPartyName": {
          "type": "string",
          "readOnly": true
        },
        "companyID": {
          "type": "string",
          "format": "uint64",
          "readOnly": true
        },
        "companyName": {
          "type": "string",
          "readOnly": true
        },
        "isAllowAllBeneficiary": {
          "type": "boolean"
        }
      }
    },
    "v1MappingDigitalData": {
      "type": "object",
      "properties": {
        "thirdPartyID": {
          "type": "string",
          "format": "uint64"
        },
        "thirdPartyName": {
          "type": "string",
          "readOnly": true
        },
        "companyID": {
          "type": "string",
          "format": "uint64",
          "readOnly": true
        },
        "companyName": {
          "type": "string",
          "readOnly": true
        },
        "beneficiaryId": {
          "type": "string",
          "format": "uint64"
        },
        "beneficiaryName": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "v1PaginationResponse": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "page": {
          "type": "integer",
          "format": "int32"
        },
        "totalRows": {
          "type": "string",
          "format": "int64"
        },
        "totalPages": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ProjectData": {
      "type": "object",
      "properties": {
        "contractNumber": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "projectDate": {
          "type": "string",
          "format": "date",
          "example": "2022-07-06",
          "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
        },
        "nrkNumber": {
          "type": "string"
        },
        "projectCurrency": {
          "type": "string"
        },
        "projectAmount": {
          "type": "number",
          "format": "double"
        },
        "bgCurrency": {
          "type": "string"
        },
        "bgAmount": {
          "type": "number",
          "format": "double"
        },
        "cashAccountNo": {
          "type": "string"
        },
        "cashAccountAmount": {
          "type": "number",
          "format": "double"
        },
        "cashAccountAmountString": {
          "type": "string"
        },
        "nonCashAccountNo": {
          "type": "string"
        },
        "nonCashAccountAmount": {
          "type": "number",
          "format": "double"
        },
        "nonCashAccountAmountString": {
          "type": "string"
        },
        "contractGuaranteeType": {
          "$ref": "#/definitions/v1ContractGuaranteeType"
        },
        "counterGuaranteeAmount": {
          "type": "number",
          "format": "double"
        },
        "counterGuaranteeAmountString": {
          "type": "string"
        },
        "insuranceLimitId": {
          "type": "string"
        },
        "sp3No": {
          "type": "string"
        },
        "holdAccountNo": {
          "type": "string"
        },
        "holdAccountAmount": {
          "type": "number",
          "format": "double"
        },
        "holdAccountAmountString": {
          "type": "string"
        },
        "consumerLimitId": {
          "type": "string"
        },
        "consumerLimitAmount": {
          "type": "number",
          "format": "double"
        },
        "consumerLimitAmountString": {
          "type": "string"
        }
      }
    },
    "v1PublishingData": {
      "type": "object",
      "properties": {
        "applicantType": {
          "$ref": "#/definitions/v1ApplicantType"
        },
        "publishingType": {
          "$ref": "#/definitions/v1PublishingType"
        },
        "thirdPartyID": {
          "type": "string",
          "format": "uint64"
        },
        "thirdPartyName": {
          "type": "string",
          "readOnly": true
        },
        "bgType": {
          "$ref": "#/definitions/v1BgType"
        },
        "effectiveDate": {
          "type": "string",
          "format": "date",
          "example": "2022-07-06",
          "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
        },
        "expiryDate": {
          "type": "string",
          "format": "date",
          "example": "2022-07-06",
          "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
        },
        "remark": {
          "type": "string"
        },
        "claimPeriod": {
          "type": "string",
          "format": "uint64"
        },
        "lawArticle": {
          "type": "string"
        },
        "openingBranchId": {
          "type": "string",
          "format": "uint64"
        },
        "openingBranchName": {
          "type": "string",
          "readOnly": true
        },
        "publishingBranchId": {
          "type": "string",
          "format": "uint64"
        },
        "publishingBranchName": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "v1PublishingType": {
      "type": "string",
      "enum": [
        "SingleBranch",
        "InterBranch"
      ],
      "default": "SingleBranch"
    },
    "v1Task": {
      "type": "object",
      "properties": {
        "taskID": {
          "type": "string",
          "format": "uint64"
        },
        "type": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "step": {
          "type": "string"
        },
        "featureID": {
          "type": "string",
          "format": "uint64"
        },
        "lastApprovedByID": {
          "type": "string",
          "format": "uint64"
        },
        "lastRejectedByID": {
          "type": "string",
          "format": "uint64"
        },
        "lastApprovedByName": {
          "type": "string"
        },
        "lastRejectedByName": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "updatedByName": {
          "type": "string"
        },
        "reasons": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "companyID": {
          "type": "string",
          "format": "uint64"
        },
        "holdingID": {
          "type": "string",
          "format": "uint64"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1TaskIssuingData": {
      "type": "object",
      "properties": {
        "task": {
          "$ref": "#/definitions/v1Task"
        },
        "company": {
          "$ref": "#/definitions/v1Company"
        },
        "data": {
          "$ref": "#/definitions/v1IssuingData"
        }
      }
    },
    "v1TaskMappingData": {
      "type": "object",
      "properties": {
        "task": {
          "$ref": "#/definitions/v1Task"
        },
        "company": {
          "$ref": "#/definitions/v1Company"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MappingData"
          }
        }
      }
    },
    "v1TaskMappingDigitalData": {
      "type": "object",
      "properties": {
        "task": {
          "$ref": "#/definitions/v1Task"
        },
        "company": {
          "$ref": "#/definitions/v1Company"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1MappingDigitalData"
          }
        }
      }
    },
    "v1TaskStatus": {
      "type": "string",
      "enum": [
        "AllStatus",
        "Pending",
        "Draft",
        "Returned",
        "Approved",
        "Rejected",
        "DeleteRequest",
        "Deleted"
      ],
      "default": "AllStatus"
    },
    "v1TaskStep": {
      "type": "string",
      "enum": [
        "AllStep",
        "Maker",
        "Checker",
        "Signer",
        "Releaser"
      ],
      "default": "AllStep"
    },
    "v1ThirdParty": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uint64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1ThirdPartyType": {
      "type": "string",
      "enum": [
        "All",
        "NeedMapping",
        "IsMapped"
      ],
      "default": "All"
    },
    "v1Transaction": {
      "type": "object",
      "properties": {
        "transactionID": {
          "type": "string",
          "format": "uint64"
        },
        "thirdPartyID": {
          "type": "string",
          "format": "uint64"
        },
        "thirdPartyName": {
          "type": "string"
        },
        "referenceNo": {
          "type": "string"
        },
        "registrationNo": {
          "type": "string"
        },
        "applicantName": {
          "type": "string"
        },
        "beneficiaryID": {
          "type": "string",
          "format": "uint64"
        },
        "beneficiaryName": {
          "type": "string"
        },
        "issueDate": {
          "type": "string"
        },
        "effectiveDate": {
          "type": "string"
        },
        "expiryDate": {
          "type": "string"
        },
        "claimPeriod": {
          "type": "integer",
          "format": "int64"
        },
        "closingDate": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "format": "double"
        },
        "createdDate": {
          "type": "string"
        },
        "modifiedDate": {
          "type": "string"
        },
        "remark": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "channelID": {
          "type": "string",
          "format": "uint64"
        },
        "channelName": {
          "type": "string"
        },
        "transactionTypeID": {
          "$ref": "#/definitions/v1BgType"
        }
      }
    },
    "v1TransactionRequest": {
      "type": "object",
      "properties": {
        "startDate": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "branch": {
          "type": "string"
        },
        "applicantName": {
          "type": "string"
        },
        "claimPeriod": {
          "type": "integer",
          "format": "int64"
        },
        "status": {
          "type": "string"
        },
        "referenceNo": {
          "type": "string"
        },
        "eventPeriod": {
          "type": "string"
        },
        "beneficiaryID": {
          "type": "string",
          "format": "uint64"
        },
        "beneficiaryName": {
          "type": "string"
        },
        "thirdPartyID": {
          "type": "string",
          "format": "uint64"
        },
        "thirdPartyName": {
          "type": "string"
        },
        "channelID": {
          "type": "string",
          "format": "uint64"
        },
        "channelName": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "description": "Authentication token, prefixed by Bearer: Bearer \u003ctoken\u003e",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": []
    }
  ]
}
